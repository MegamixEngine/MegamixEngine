<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM1SniperJoe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Please don't.

event_inherited();

healthpointsStart = 10;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "joes";

facePlayerOnSpawn = true;

// Enemy specific code
shootTimer = 0;
shooting = false;
shootAmount = 0;
shootTotal = 0;
jumpCount = 0;

myDir = -1;
xs = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // if it's on the ground, check if the player is behind it, by comparing what myDir is
    //( set on spawn), and the image_xscale attempting to be set relative to the player.
    // if they're not equal, jump and try to catch up with the player.
    
    if (ground)
    {
        var rn = irandom(1);
        calibrateDirection();
        if (image_xscale != myDir)
        {
            yspeed = -6;
            xspeed = image_xscale * 2;
            xs = xspeed;
            ground = false;
        }
        else if (!shooting &amp;&amp; shootTimer &gt;= 89 &amp;&amp; jumpCount &gt;= 2)
        {
            jumpCount = 0;
            shooting = true;
            shootTimer = 0;
            shootTotal = irandom(3) + 1;
        }
        else if (!shooting &amp;&amp; shootTimer &gt;= 89 &amp;&amp; rn == 1)
        {
            yspeed = -6;
            xspeed = 0;
            xs = xspeed;
            shootTimer = 0;
            ground = false;
            jumpCount += 1;
        }
    }
    
    
    // Shooting
    if (!shooting)
    {
        // reset animation if it's returning from shooting
        if (image_index &gt; 0 &amp;&amp; !(shootTimer mod 10))
        {
            image_index -= 1;
        }
        shootTimer += 1; // increment shooting timer
        if (shootTimer &gt;= 90)
        {
            shooting = true;
            shootTimer = 0;
            shootTotal = irandom(3) + 1;
            jumpCount = 0;
        }
    }
    else
    {
        if (image_index &lt; 2) // if it's getting ready to shoot, play animation
        {
            image_index += 0.1;
        }
        else
        {
            shootTimer += 1;
            if (shootTimer &gt;= 30)
            {
                if (shootAmount &lt; shootTotal)
                {
                    shootTimer = 0;
                    var i = instance_create(x + (12 * image_xscale), y - 8, objEnemyBullet);
                    i.xspeed = image_xscale * 4;
                    i.sprite_index = sprCrazyRazyBullet;
                    playSFX(sfxEnemyShootClassic); // shoooot
                    shootAmount += 1;
					if (shootAmount &lt;= shootTotal - 1)
                    {
                        image_index = 1;
                    }
                }
                if (shootAmount &gt;= shootTotal)
                {
                    shootTimer = 0;
                    shootAmount = 0;
                    shooting = false;
                }
            }
        }
    }
    
    if (ground)
    {
        sprite_index = sprMM1SniperJoe;
        xspeed = 0;
        xs = 0;
    }
    else
    {
        shootTimer = 0;
        shooting = false;
        sprite_index = sprMM1SniperJoeJump;
        xspeed = xs;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();
myDir = image_xscale;
shootTimer = 0;
shooting = false;
shootAmount = 0;
image_index = 0;
jumpCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if image_index is shield up, and you're not shooting sniper joe in the back or whatever, reflect bullets
if (sprite_index != sprMM1SniperJoeJump &amp;&amp; image_index == 0)
{
    if (collision_rectangle(x + 12 * image_xscale, y - 3, x + 14 * image_xscale, y - 20, other.id, false, false))
    {
        other.guardCancel = 1;
        if (!shooting)
            shootTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
