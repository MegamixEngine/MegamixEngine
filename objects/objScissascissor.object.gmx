<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprScissascissor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// An enemy from Hornet Man's stage. Will start as two pieces of a scissor that attempt to combine by
// smashing into each other, and once combined, the full scissor will dash at Mega Man until it goes
// offscreen. It then loops back around the screen for another run at the player.

// This enemy is a bit strange, so it's placed a little weirdly. Despite it being shown in the editor
// as the whole scissor, when this object at its placed position is spawned, it will come already
// seperated, just to make things a bit more intuitive.

event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "floating";

blockCollision = 0;
grav = 0;

facePlayerOnSpawn = true;

splitWithSpawn = false;

// Enemy specific code
despawnRange = 16; // Needs to be higher because of its loop attack.
actionTimer = -1;
animTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Actual action once combined
    if (actionTimer &gt; -1)
    {
        actionTimer += 1;
        
        // quick anim frame 1 for more polish
        if (actionTimer == 3)
        {
            image_index = 0;
        }
        
        if (actionTimer == 25)
        {
            xspeed = 5 * image_xscale;
        }
        
        // loop back around if offscreen
        if (actionTimer &gt; 25 &amp;&amp; image_speed == 0 &amp;&amp; ((x - (sprite_width / 2) &lt; view_xview[0] &amp;&amp; image_xscale == -1) || (x - (sprite_width / 2) &gt; view_xview[0] + view_wview[0] &amp;&amp; image_xscale == 1)))
        {
            image_xscale = -image_xscale;
            xspeed = -xspeed;
            image_speed = 0.4;
        }
    }
}
else if (dead)
{
    splitWithSpawn = false;
    image_speed = 0;
    image_index = 0;
    actionTimer = -1;
    xspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    // Check for if it's spawned yet, if so, split into two parts
    // if !splitWithSpawn and insideView()
    //{
    var a = instance_create(x, y - 32, objScissascissorPart);
    a.image_yscale = -1;
    a.parent = id;
    
    a = instance_create(x, y + 32, objScissascissorPart);
    a.image_yscale = 1;
    a.parent = id;
    
    splitWithSpawn = true;
    
    visible = false;
    contactDamage = 0;
    canHit = false;
    x += 32 * image_xscale;
    
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
