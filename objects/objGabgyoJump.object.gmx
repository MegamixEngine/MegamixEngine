<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGabgyoJumpRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
ogContactDamage = 3;
contactDamage = 0;

category = "aquatic, nature";

blockCollision = false;
grav = 0;
inWater = -1; // isn't effected by water


// Enemy specific code
init = 1;
phase = 0;
timer = 0;
imgIndex = 0;


// Creation code (all optional):
col = 0; // col = &lt;number&gt; (0 = red (default); 1 = yellow), set to anything else when using a custom sprite.
radius = 32; // &lt;-- detection range here
delayMax = 90; //how long the fish waits between jumps
heightLimit = 0; //if less than 0, then limits gabgyo's speed to junping to this height
spawnSFX = getGenericSFX(SFX_SPLASH); //if set, play sound when jumping
imgSpd = 0.16; //animation speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    if (col == 1)
    {
        sprite_index = sprGabgyoJumpYellow;
    }
}

if (phase != 1)
{
    visible = false;
    canHit = false;
    contactDamage = 0;
}

event_inherited();
if(xcoll!=0)
{
    xspeed=xcoll;
}


if (entityCanStep())
{
    switch (phase)
    {
        // wait to jump
        case 0:
            if (instance_exists(target))
            {
                if (abs(target.x - x) &lt; radius) 
                {
                    phase = 1;
                    
                    calibrateDirection();
                    
                    visible = true;
                    canHit = true;
                    grav = gravAccel;
                    contactDamage = ogContactDamage;
                    
                    if (spawnSFX != noone)
                        playSFX(spawnSFX);
                    
                    if (instance_exists(target))
                    {
                        yspeed = ySpeedAim(y, target.y, grav);
                        yspeed -= 0.8; // little extra height
                        if (heightLimit &lt; 0)
                        {
                            if (yspeed &lt; heightLimit)
                                yspeed = heightLimit;
                        }
                    }
                }
            }
            
            break;
        
        // jumping
        case 1:
            imgIndex += imgSpd;
            if (yspeed &lt; 0)
            {
                if (imgIndex &gt;= 2)
                {
                    imgIndex = imgIndex mod 2;
                }
            }
            else
            {
                if (imgIndex &gt;= 4)
                {
                    imgIndex = 2 + imgIndex mod 4;
                }
            }
            if (y + yspeed &gt;= ystart)
            {
                phase = 2;
                
                x = xstart;
                y = ystart;
                xspeed = 0;
                yspeed = 0;
                grav = 0;
                
                visible = false;
                imgIndex = 0;
            }
            
            break;
        
        // cooldown
        case 2:
            timer += 1;
            if (timer &gt;= delayMax)
            {
                phase = 0;
                visible = false;
                timer = 0;
            }
            
            break;
    }
}
else if (dead)
{
    if (phase == 1)
    {
        timer += 1;
        if (timer &gt;= delayMax + 6)
        {
            phase = 0;
            timer = 0;
            
            dead = false;
            visible = false;
            beenOutsideView = false;
        }
    }
    
    grav = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
