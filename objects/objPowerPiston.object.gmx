<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPowerPiston</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
imageOffset = 0;
contactDamage = 8;
customPose = true;
ground = false;
grav = 0;
phase = 0;
shotsFired = 0;
attackTimer = 0;
healthBarPrimaryColor[1] = 16;
healthBarSecondaryColor[1] = 40;

image_index = 4;

yMax = ystart + 32;
yMin = -1;
animTimer = 0;
delayRock = 24;
bodyFrame = 0;
lightFrame = 0;
turnTimer = 0;
delayMove = 8;
cTurn = -1;
turnCheck[0] = 24;
turnCheck[1] = 24;
turnCheck[2] = 32;
turnCheck[3] = 24;
turnCheck[4] = 600;
startCheck = false;
child = noone;
shootAngle = 35;
isDying = false;
explodeTimer = 0;

// Music
music = "Mega_Man_6.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 4);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 4);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 4);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 8);

// MaGMML1
enemyDamageValue(objMetalBlade, 4);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 2);
enemyDamageValue(objTopSpin, 8);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 3);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 2);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 4);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 4);
enemyDamageValue(objSuperArmDebris, 4);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);

// Misc.
enemyDamageValue(objPowerStone, 4);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBrickWeapon, 4);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// leave this. this is needed.
event_inherited();

if (cTurn == -1)
{
    cTurn = choose(0, 1);
}

if (!startCheck)
{
    startCheck = true;
    
    
    for (var i = 0; i &lt; view_wview; i++)
    {
        if (checkSolid(i, 0))
        {
            image_xscale = -1;
            x += i - 1;
            break;
        }
        if (checkSolid(-i, 0))
        {
            image_xscale = 1;
            x -= i - 1;
            break;
        }
    }
    for (var i = 0; i &lt; view_hview; i++)
    {
        if (checkSolid(0, -i))
        {
            yMin = y;
            break;
        }
    }
}

// all of power piston's events trigger when the game isn't frozen.
if (!global.frozen)
{
    // power piston's custom intro
    if (startIntro)
    {
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
    }
    else if (isIntro)
    {
        if (y != ystart)
        {
            y = ystart;
        }
        // custom intro:
        attackTimer++;
        
        if (attackTimer == 10 &amp;&amp; image_index &gt; 0)
        {
            image_index--;
            attackTimer = 0;
        }
        if (attackTimer == 40)
        {
            canFillHealthBar = true;
            isIntro = false;
            grav = gravStart;
            blockCollision = blockCollisionStart;
            attackTimer = 0;
        }
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        attackTimer++;
        animTimer++;
        delayRock--;
        turnTimer++;
        delayMove--;
        
        
        
        
        // animation setup
        image_index = 5 + bodyFrame;
        if (animTimer mod 8 == 0)
        {
            bodyFrame = !bodyFrame;
        }
        
        if (animTimer mod 5 == 0)
        {
            lightFrame++;
            if (lightFrame == 3)
            {
                lightFrame = 0;
            }
        }
        
        switch (phase)
        {
            case 0: // move and shoot 
                if (yspeed == 0 &amp;&amp; delayMove &lt;= 0) // if not moving, move.
                {
                    yspeed = choose(1, -1);
                }
                if (yspeed &gt; 0 &amp;&amp; y &gt;= yMax || yspeed &lt; 0 &amp;&amp; y &lt;= yMin || ycoll != 0 || turnTimer &gt;= turnCheck[cTurn mod 5]) // turn around, bright eyes
                {
                    yspeed *= -1;
                    if (turnTimer &gt;= turnCheck[cTurn mod 4]) // spaz about
                    {
                        turnTimer = 0;
                        cTurn++;
                    }
                    delayMove = choose(0, 0, 32);
                    if (delayMove &gt; 0)
                    {
                        yspeed = 0;
                    }
                }
                if (delayRock &lt;= 0 &amp;&amp; !instance_exists(child)) // if no rocks or explosions exist, and there is no deleay, create rock
                {
                    var inst = instance_create(view_xview + 24 + irandom(view_wview - 48), view_yview - 16, objPowerPistonRock);
                    inst.parent = id;
                    inst.itemDrop = -1;
                    child = inst.id;
                }
                if (instance_exists(child))
                {
                    delayRock = 16;
                }
                if (attackTimer &gt;= 64) // fire projectiles
                {
                    var getAngle;
                    
                    // If megaman exists, grab his angle, otherwise grab some random different angle.
                    if (instance_exists(target))
                        getAngle = point_direction(x, y, target.x, target.y);
                    else
                        getAngle = point_direction(x, y, x + (45 * (image_xscale)),
                            45 * (image_xscale));
                    
                    var ID;
                    if (shotsFired == 0) // power piston only fires three bullets on its first barrage.
                    {
                        ID = instance_create(x + image_xscale * 8, spriteGetYCenter(),
                            objMM5AimedBullet);
                        
                        ID.dir = getAngle;
                        ID.xscale = image_xscale;
                    }
                    
                    ID = instance_create(x + image_xscale * 8, spriteGetYCenter(),
                        objMM5AimedBullet);
                    ID.dir = getAngle + shootAngle;
                    ID.xscale = image_xscale;
                    ID = instance_create(x + image_xscale * 8, spriteGetYCenter(),
                        objMM5AimedBullet);
                    ID.dir = getAngle - shootAngle;
                    ID.xscale = image_xscale;
                    playSFX(sfxEnemyShoot);
                    shotsFired++;
                    
                    if (shotsFired &gt;= 2)
                    {
                        shotsFired = 0;
                    }
                    attackTimer = 0;
                }
                break;
        }
    }
    
    // Death animation
    if (isDying)
    {
        explodeTimer++;
        if (explodeTimer == 20)//18
        {
            with(instance_create(x-14*image_xscale,y+33,objBigExplosion))
                depth = -1;
            stopSFX(sfxExplosion2);
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 40)//27
        {
            with(instance_create(x-14*image_xscale,y-17,objBigExplosion))
                depth = -1;
            stopSFX(sfxExplosion2);
            playSFX(sfxExplosion2);
            image_index = 3;
        }
        if (explodeTimer == 60)//36
        {
            with(instance_create(x+26*image_xscale,y+9,objBigExplosion))
                depth = -1;
            stopSFX(sfxExplosion2);
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 80)//36
        {
            with(instance_create(x+4*image_xscale,y-32,objBigExplosion))
                depth = -1;
            stopSFX(sfxExplosion2);
            playSFX(sfxExplosion2);
            image_index = 4;
        }
        if (explodeTimer == 100)//45
        {
            with(instance_create(x+18*image_xscale,y+41,objBigExplosion))
                depth = -1;
            stopSFX(sfxExplosion2);
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 120)
        {
            event_user(EV_DEATH);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isFight)
{
    with (objPowerPistonRock)
    {
        instance_create(x, y, objExplosion);
        instance_destroy();
    }
    with (objNewShotmanBullet)
        instance_destroy();
    with (objHarmfulExplosion)
        instance_destroy();
    with (objMM5AimedBullet)
        instance_destroy();
    
    // Begin death animation
    image_index = 2;
    stopSFX(sfxEnemyHit);
    iFrames = 0;
    isFight = false;
    isDying = true;
    canHit = false;
    canDamage = false;
    yspeed = 0;
    with(instance_create(x+33*image_xscale,y-33,objBigExplosion))
        depth = -1;
    playSFX(sfxExplosion2);
}
else
{
    event_inherited();
    playSFX(sfxExplosion2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw code
drawSelf();
if (isFight) //(!dead) &amp;&amp; (!isDying)
{
    if (lightFrame &lt; 2)
    {
        draw_sprite_ext(sprite_index, min(lightFrame + 7, 8), round(x), round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if ((iFrames mod 4) &lt; 2 || !iFrames)
        {
            event_user(2);
        }
        else // Hitspark
        {
            d3d_set_fog(true, c_white, 0, 0);
            event_user(2);
            d3d_set_fog(false, 0, 0, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
