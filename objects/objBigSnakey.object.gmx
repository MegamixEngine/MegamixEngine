<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigSnakey</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 10;
healthpoints = healthpointsStart;
contactDamage = 8;
category = "nature";

//@cc neck length
length = 3;

// Enemy specific code
shootCounter = 0;
shootTimer = 0;
blink = 0;
blinkTimer = 0;
endTimer = 60;
doesIntro = false;

bodySolid = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (shootTimer == 0)
    {
        image_index = 0;
    }
    if (shootTimer == endTimer)
    {
        image_index = 1;
        instance_create(x + 32 * image_xscale, y - 16 * image_yscale, objBigSnakeyFire);
        if (shootCounter &lt; 2)
        {
            shootCounter += 1;
            shootTimer -= 20;
        }
    }
    
    // image_index += 0.1;
    shootTimer += 1;
    if (shootTimer &gt;= endTimer * 1.5)
    {
        shootTimer = 0;
        shootCounter = 0;
    }
    blinkTimer += 1;
    if (blinkTimer &gt;= 5)
    {
        if (blink &lt; 1)
            blink += 1 / 30;
        else
            blink += 1;
        if (blink &gt;= 4)
            blink = 0;
        blinkTimer = 0;
    }
    
    if (!instance_exists(bodySolid) &amp;&amp; length &gt; 0)
    {
        bodySolid = instance_create(x - 16, y, objSolid);
        bodySolid.image_xscale = 2;
        bodySolid.image_yscale = length;
        bodySolid.depth = 1000;
    }
}
else
{
    if (instance_exists(bodySolid))
    {
        with (bodySolid)
        {
            instance_destroy();
        }
    }
    if (!insideView())
    {
        image_index = 0;
        shootTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// event_inherited();

if (iFrames == 1 || iFrames == 3)
{
    d3d_set_fog(true, c_white, 0, 0);
}

drawSelf();
if (floor(blink) &gt; 0)
{
    draw_sprite_ext(sprite_index, 1 + floor(blink) - (floor(blink / 3) * 2),
        round(x), round(y), image_xscale, image_yscale, image_angle,
        image_blend, image_alpha);
}
if (length &gt; 0)
{
    for (var i = 1; i &lt;= length; i += 1)
    {
        draw_background_part(tstSnakeman, 0, 32, 32, 16, round(x) - 16,
            round(y) + (i - 1) * 16);
    }
}

if (iFrames == 1 || iFrames == 3)
{
    d3d_set_fog(false, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
