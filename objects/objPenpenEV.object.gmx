<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPenpenEV</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 3;

facePlayerOnSpawn = true;

category = "nature, bird";

// Enemy specific code
phase = 0;
timer = 0;
boostWait = 100;
bounced = false;

xSpd = 2;
decel = 0.02;
xspeed = 0;
yspeed = 0;
prevXSpeed = 0;
myX = 0;
theirX = 0;

animCount = 0;
imgSpd = 0.3;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // bounce
    if (phase == 0 || phase == 4)
    {
        // bounce off walls
        if (xspeed == 0 &amp;&amp; abs(prevXSpeed) &gt; decel)
        {
            xspeed = -prevXSpeed;
            bounced = true;
        }
        
        // ram other Penpen EVs
        var penpen = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, objPenpenEV, false, true);
        if (instance_exists(penpen))
        {
            if (xspeed != 0 &amp;&amp; (penpen.phase == 0 || penpen.phase == 4))
            {
                myX = bboxGetXCenterObject(id);
                theirX = bboxGetXCenterObject(penpen);
                
                if ((myX &lt; theirX &amp;&amp; xspeed &gt; 0 &amp;&amp; penpen.xspeed &lt; 0) || (myX &gt; theirX &amp;&amp; xspeed &lt; 0 &amp;&amp; penpen.xspeed &gt; 0))
                {
                    // both coming towards each other
                    if ((myX &lt; theirX &amp;&amp; xspeed &gt; 0) || (myX &gt; theirX &amp;&amp; xspeed &lt; 0))
                    {
                        // hitting each other
                        var xs = xspeed;
                        xspeed = penpen.xspeed;
                        penpen.xspeed = xs;
                        bounced = true;
                    }
                    else
                    {
                        // moving past each other
                        // do nothing
                    }
                }
                else if (abs(xspeed) &gt; abs(penpen.xspeed)) // only the one moving faster will do anything
                {
                    // moving the same direction
                    if ((myX &lt; theirX &amp;&amp; xspeed &gt; 0) || (myX &gt; theirX &amp;&amp; xspeed &lt; 0)) // behind the slower penpen
                    {
                        penpen.xspeed += xspeed;
                        xspeed = 0;
                        bounced = true;
                    }
                }
            }
        }
        
        // decelerate
        if (phase == 0 || (phase == 4 &amp;&amp; bounced))
        {
            if (xspeed != 0 &amp;&amp; xspeed &lt; decel &amp;&amp; xspeed &gt; -decel) // round to 0 so the value doesn't swing back and forth around 0
            {
                xspeed = 0;
            }
            
            if (xspeed &gt; 0)
            {
                xspeed -= decel;
            }
            else if (xspeed &lt; 0)
            {
                xspeed += decel;
            }
        }
    }
    
    // pattern
    switch (phase)
    {
        // spin twice
        case 0: // bouncing done near the top
        // animate 
            imgIndex += imgSpd / 2 + (abs(xspeed) / 4);
            if (imgIndex &gt;= 8)
            {
                imgIndex = imgIndex - 8;
                
                if (xspeed == 0 &amp;&amp; yspeed == 0)
                {
                    animCount += 1;
                }
            }
            
            // check for phase transition (after two spins, and facing player)
            if (instance_exists(target))
            {
                myX = bboxGetXCenterObject(id);
                theirX = bboxGetXCenterObject(target);
                if (animCount &gt;= 2 // &lt;-- number of spins in place until readying for rocketing off here
                &amp;&amp; ((theirX &lt; myX &amp;&amp; imgIndex div 1 == 6 &amp;&amp; image_xscale == 1)
                    || (theirX &lt; myX &amp;&amp; imgIndex div 1 == 2 &amp;&amp; image_xscale == -1)
                    || (theirX &gt;= myX &amp;&amp; imgIndex div 1 == 2 &amp;&amp; image_xscale == 1)
                    || (theirX &gt;= myX &amp;&amp; imgIndex div 1 == 6 &amp;&amp; image_xscale == -1)))
                {
                    phase = 1;
                    xspeed = 0;
                    animCount = 0;
                    imgIndex = 2;
                    calibrateDirection();
                    bounced = false;
                }
            }
            
            break;
        
        // small wait before turning on the side
        case 1:
            timer += 1;
            if (timer &gt;= 20) // &lt;-- time in grace period before turning on his side here
            {
                phase = 2;
                timer = 0;
                imgIndex = 8;
            }
            
            break;
        
        // go on the side and wait a bit
        case 2:
            if (imgIndex &lt; 9)
            {
                imgIndex += imgSpd;
            }
            else
            {
                imgIndex = 9;
                
                if (timer == 0)
                {
                    playSFX(sfxClamp);
                }
                
                timer += 1;
                if (timer &gt;= 30)
                {
                    phase = 3;
                    timer = 0;
                    imgIndex = 10;
                }
            }
            
            break;
        
        // extend booster
        case 3:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 14)
            {
                phase = 4;
                xspeed = 3 * image_xscale;
                imgIndex = 14;
                playSFX(sfxEnemyBoost);
            }
            
            break;
        
        // boost
        case 4: // bouncing done near the top 
            imgIndex += imgSpd;
            if (imgIndex &gt;= 17)
            {
                imgIndex = 14 + imgIndex mod 17;
            }
            
            // show_debug_message("bounced: " + string(bounced));
            
            if (timer &lt; boostWait &amp;&amp; !bounced)
            {
                timer += 1;
            }
            else if (ground &amp;&amp; xspeed == 0)
            {
                phase = 5;
                timer = 0;
                xspeed = 0;
                imgIndex = 13;
                bounced = false;
            }
            
            break;
        
        // retract booster and get back up
        case 5:
            imgIndex -= imgSpd;
            if (imgIndex &lt; 8)
            {
                phase = 0;
                imgIndex = 2;
            }
            
            break;
    }
    
    prevXSpeed = xspeed;
}
else if (dead)
{
    phase = 0;
    timer = 0;
    animCount = 0;
    imgIndex = 0;
    xspeed = 0;
    yspeed = 0;
    prevXSpeed = 0;
    bounced = false;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// gain momentum from shots
event_inherited();

if (phase == 0)
{
    animCount = 0;
    
    if (other.x &lt; x)
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
    
    xspeed += (global.damage * 0.75) * -image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
