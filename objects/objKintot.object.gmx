<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKintot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// An enemy from Burst Man's stage. It'll float up and down in the water, or flop around otherwise.

// Creation code (all optional):

event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 2;

category = "aquatic, nature";

blockCollision = 0;
grav = 0;

facePlayerOnSpawn = true;

// Enemy specific code
sinCounter = 0;

animTimer = 0;
blinkTimer = 0;

outtaWaterTimer = 0;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (inWater)
    {
        blockCollision = 0;
        grav = 0;
        
        // wave movement
        sinCounter += .045;
        yspeed = (sin(sinCounter));
        
        // fish tail animation
        animTimer++;
        
        if (animTimer mod 8 == 0)
        {
            image_index += 1;
            if (image_index &gt; 7 + ((blinkTimer &gt; 110) * 8))
            {
                image_index -= 8;
            }
        }
        
        // blinking
        blinkTimer++;
        
        if (blinkTimer == 110)
        {
            image_index += 8;
        }
        
        if (blinkTimer == 120)
        {
            image_index -= 8;
            blinkTimer = 0;
        }
        
        // for some reason, it turns back after travelling a full screen, and never turns back afterwards.
        // mm7.....
        if (abs(x - xstart) &gt; (view_wview[0] - 32))
        {
            x -= xspeed;
            xspeed = -xspeed;
            image_xscale = -image_xscale;
        }
    }
    else
    {
        blockCollision = 1;
        
        // force into flopping animation
        if (image_index &lt; 16)
        {
            image_index = 16;
            xspeed = 0;
            yspeed = 0;
            grav = gravAccel;
        }
        
        // flop anim
        animTimer++;
        
        if (animTimer mod 6 == 0)
        {
            if (image_index == 17)
            {
                image_index = 16;
            }
            else
            {
                image_index = 17;
            }
        }
        
        // it dies if its outside water for too long
        outtaWaterTimer++;
        
        if (outtaWaterTimer &gt;= 360)
        {
            playSFX(sfxEnemyHit);
            healthpoints = 0;
            event_user(EV_DEATH);
        }
        
        // jump on ground/water
        if (ycoll &gt; 0 || place_meeting(x, y - 1, objWater))
        {
            playSFX(sfxSplash);
            yspeed = choose(-4.5, -3.5);
            
            // sometimes it flips
            if (irandom_range(1, 2) == 1)
            {
                image_xscale = -image_xscale;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_index = 0;
grav = 0;
if (inWater)
{
    xspeed = image_xscale;
}
sinCounter = 0;

animTimer = 0;
blinkTimer = 0;

outtaWaterTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
