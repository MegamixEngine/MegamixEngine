<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTileAnimator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_number(object_index) &gt; 1)
{
    instance_destroy();
    exit;
}

global.playerConfigID = 0;
global.nextRoom = -1;
visible = 0;
alarm[0] = 60;
playerID = 0;
borderProperties = borderInit();//Call here since we only need it once per frame.

//Option-Types
// - optionName - Name of the option
// - optionDescription - description that is displayed below
// - optionVar - global variable associated with the option
// - optionSettings - the settings at which the options can be

var offon = "OFF,ON"; //So we can quickly copy if needed. For our convenience.

option = 0;
menuDelay = 0;
holdTimer = 0;

// for hitflash effect
useShader = false;
replaceColor[0] = c_black;
replaceColor[1] = c_black;
replaceColor[2] = c_black;
replaceColor[3] = c_black;
newColor[0] = c_black;
newColor[1] = c_black;
newColor[2] = c_black;
newColor[3] = c_black;

// == CONTROLS =======================================================================================
page = 0;
pageOption = 0;

pageName[page] = "CONTROLS";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "BUSTER CHARGE"; //AUTO CHARGE
optionDescription[  option] = "Choose how to charge the Mega Buster: hold SHOOT, automatically charge, or press SHOOT to toggle.";
optionVar[          option] = "autoCharge";
optionSettings[     option] = "HOLD,AUTO,TOGGLE"; //offon + ",TOGGLE";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "AUTO FIRE";
optionDescription[  option] = "Enables rapid fire. Hold SHOOT to fire continuously. A few select special weapons are not affected.";
optionVar[          option] = "autoFire";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "WEAPON WHEEL";
optionDescription[  option] = "Enables the Weapon Wheel (assigned key/button or right analog stick). Customize on the pause menu.";
optionVar[          option] = "WheelEnabled";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "WEAPON HOLD TOGGLE";
optionDescription[  option] = "Press (instead of hold) SHOOT to use the Weapon Wheel and some special weapons (e.g. Break Dash).";
optionVar[          option] = "holdToggle";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "GAMEPAD RUMBLE"; //MOVED HERE - Traditionally this is alongside the controls and not a misc thing. - ACE
optionDescription[  option] = "(Rumble-capable gamepads only.) Certain actions (e.g. dying) cause the controller to vibrate.";
optionVar[          option] = "joystick_rumbleType";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "BUTTON PROMPTS"; //MOVED HERE - Traditionally this is alongside the controls and not a misc thing. - ACE
optionDescription[  option] = "Choose which button prompts appear when using controllers. CONTEXT is based on the action.";
optionVar[          option] = "buttonPromptOverride";
optionSettings[     option] = "AUTO,XBOX,PS4,SWITCH,GEN/MD,N64,GCN,CONTEXT";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "DOWN + JUMP SLIDE";
optionDescription[  option] = "Enables the classic DOWN + JUMP input for sliding. This setting does not affect the SLIDE key/button.";
optionVar[          option] = "downJumpSlide";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MANUAL TIPPY TOE";
optionDescription[  option] = "(Analog controllers only.) Walking speed is determined by how far the analog stick is being tilted.";
optionVar[          option] = "manualTippytoe";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "ESC. KEY";
optionDescription[  option] = "Sets the Escape key to either pause the game, exit it entirely (hold to quit), or do nothing at all.";
optionVar[          option] = "escapeBehavior";
optionSettings[     option] = "QUIT,PAUSE,N/A";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "RETRY HOTKEYS";
optionDescription[  option] = "Enables keyboard shortcuts for retrying from checkpoint (CTRL+R) and resetting a level (CTRL+Y).";
optionVar[          option] = "resetShortcuts";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SHOW CONTROLLER";
optionDescription[  option] = "Adds an overlay to the bottom right corner of the screen to show key/button inputs.";
optionVar[          option] = "showControllerOverlay";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// == BINDINGS =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "BINDINGS";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "CONFIGURE PLAYER";
optionDescription[  option] = "";
optionVar[          option] = "playerConfigID";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "LEFT";
optionDescription[  option] = "";
optionVar[          option] = INPUT_LEFT;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "RIGHT";
optionDescription[  option] = "";
optionVar[          option] = INPUT_RIGHT;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "UP";
optionDescription[  option] = "";
optionVar[          option] = INPUT_UP;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "DOWN";
optionDescription[  option] = "";
optionVar[          option] = INPUT_DOWN;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "JUMP";
optionDescription[  option] = "";
optionVar[          option] = INPUT_JUMP;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SHOOT";
optionDescription[  option] = "";
optionVar[          option] = INPUT_SHOOT;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SLIDE";
optionDescription[  option] = "";
optionVar[          option] = INPUT_SLIDE;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "PREVIOUS WEAPON";
optionDescription[  option] = "";
optionVar[          option] = INPUT_WEAPONLEFT;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "NEXT WEAPON";
optionDescription[  option] = "";
optionVar[          option] = INPUT_WEAPONRIGHT;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "PAUSE";
optionDescription[  option] = "";
optionVar[          option] = INPUT_PAUSE;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "QUICKITEM";
optionDescription[  option] = "";
optionVar[          option] = INPUT_QUICKITEM;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "WEAPON WHEEL";
optionDescription[  option] = "";
optionVar[          option] = INPUT_WEAPONWHEEL;
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "RESET CONTROLS";
optionDescription[  option] = "";
optionVar[          option] = "";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

//GAMEPAD RUMBLE MOVED TO MISC


// == DISPLAY =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "DISPLAY";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SCREEN SIZE";
optionDescription[  option] = "Scales the size of the game window; at maximum size, the window will stretch to fit.";
optionVar[          option] = "screensize";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "FULLSCREEN";
optionDescription[  option] = "Choose between OFF (windowed), ON (fullscreen), and ABSOLUTE (alternative fullscreen).";
optionVar[          option] = "fullscreen";
optionSettings[     option] = offon + ",ABSOLUTE";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*optionName[         option] = "RESOLUTION";
optionDescription[  option] = "Configure the resolution. Either use a 256x224 resolution or have it adapt to your screen size.";
optionVar[          option] = "adaptiveResolution";
optionSettings[     option] = "256x224,ADAPTIVE";
optionPage[page, (pageOption ++)] = (option ++);
*/
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "ASPECT RATIO";
optionDescription[  option] = 'Choose 8:7 for "Pixel Perfect" mode or 4:3 for "CRT TV" mode.';
optionVar[          option] = "screenRatio";
optionSettings[     option] = "8:7,4:3";
optionPage[page, (pageOption ++)] = (option ++);
if (!global.failedShaderVibeCheck)
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    optionName[         option] = "SCREEN SHADER";
    optionDescription[  option] = "Applies a filter that emulates the look of playing on an older TV or computer monitor.";
    optionVar[          option] = "screenShader";
    optionSettings[     option] = "NONE,TV,MONITOR";
    optionPage[page, (pageOption ++)] = (option ++);
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    optionName[         option] = "PALETTE";
    optionDescription[  option] = "Adjust colors to a specific style.";
    optionVar[          option] = "paletteShader";
    optionSettings[     option] = "NONE,LC1,MM9,YUV,Famicube,Richbit,DMG,Pocket";
    optionPage[page, (pageOption ++)] = (option ++);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MOUSE CURSOR";
optionDescription[  option] = "Choose how the cursor is displayed in fullscreen.";
optionVar[          option] = "mouseType";
optionSettings[     option] = "OFF,ON,POINTAN";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "VSYNC";
optionDescription[  option] = "Prevents screen tearing, but may impact game performance.";
optionVar[          option] = "vsync";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SHOW FPS";
optionDescription[  option] = "Displays the game's framerate (frames per second, or FPS) in the bottom right corner.";
optionVar[          option] = "showFPS";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);


// == BORDER =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "BORDER";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "VISIBILITY";
optionDescription[  option] = "Determines if any border elements are always visible, or only visible in fullscreen.";
optionVar[          option] = "borderVisibility";
optionSettings[     option] = "FULLSCREEN,ALWAYS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "ARTWORK";
optionDescription[  option] = "BORDERDESC";//Override. "Add an artistic border to the game window. Check out all the options!";
optionVar[          option] = "fullscreenBorder";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "BRIGHTNESS";
optionDescription[  option] = "Adjust the brightness of the border/HUD.#(0% - 200%)";
optionVar[          option] = "borderBrightness";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SATURATION";
optionDescription[  option] = "Adjust the saturation of the border.#(0% - 200%).";
optionVar[          option] = "borderSaturation";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "COLOR";
optionDescription[  option] = "Adjust the hue of the border/HUD. Set to STANDARD to revert any coloring.";
optionVar[          option] = "borderColor";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "COLOR APPLICATION";
optionDescription[  option] = "Determines if the COLOR option is applied to the HUD, the border, or both.";
optionVar[          option] = "hueApplication";
optionSettings[     option] = "BOTH,BORDER,HUD,NONE";
optionPage[page, (pageOption ++)] = (option ++);


// == AUDIO =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "AUDIO";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MASTER VOLUME";
optionDescription[  option] = "Adjust the volume of the game's audio.";
optionVar[          option] = "mastervolume";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MUSIC VOLUME";
optionDescription[  option] = "Adjust the volume of the game's music.";
optionVar[          option] = "musicvolume";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MUSIC CREDITS";
optionDescription[  option] = "Show music info when a song plays, if available. One Time only shows info the first time it's played in a session.";
optionVar[          option] = "musicShowCredits";
optionSettings[     option] = "OFF,ONE TIME,ON";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SOUND VOLUME";
optionDescription[  option] = "Adjust the volume of the game's sound effects.";
optionVar[          option] = "soundvolume";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "TEXT SOUNDS";
optionDescription[  option] = "SFX (if any) for text being typed out in dialogue boxes.";
optionVar[          option] = "textSounds";
optionSettings[     option] = "OFF,Mega Man GB,Mega Man 7,Mega Man 8,Mega Man X,Mega Man BN";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "TEXTBOX SOUNDS";
optionDescription[  option] = "Enables SFX for when dialogue boxes enter/leave the screen.";
optionVar[          option] = "textAppearanceSounds";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// == GRAPHICS =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "GRAPHICS";

// - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MULTIPLAYER COLORS";
optionDescription[  option] = "Choose whether or not players are locked to specific colors in multiplayer.";
optionVar[          option] = "multiplayerColors";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "DEATH EFFECT";
optionDescription[  option] = "Color of the player's death explosion. MATCHING matches the player's current color scheme.";
optionVar[          option] = "deathEffect";
optionSettings[     option] = "DEFAULT,MATCHING,RAINBOW";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MEGA MAN COLOR";
optionDescription[  option] = "Which default color for Mega Man to use when not using Special Weapons.";
optionVar[          option] = "mmColor";
optionSettings[     option] = "MM1-MM6,MM9/MM10";
optionPage[page, (pageOption ++)] = (option ++);

// - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "HITFLASH EFFECT";
optionDescription[  option] = " ";//Add a space here so it keeps the box (it looks better with the enemy in the box).
optionVar[          option] = "hitFlashType";
optionSettings[     option] = "WHITE,MM1,MM2,MM3+";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "ITEM GRAPHICS";
optionDescription[  option] = "Graphical style used by health and weapon energy refills.";
optionVar[          option] = "pickupGraphics";
optionSettings[     option] = "MM2+,MM1";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "WEAPON ICON";
optionDescription[  option] = "Briefly displays the icon of the selected weapon overhead when performing a Quick Weapon Switch.";
optionVar[          option] = "wepIconShow";
optionSettings[     option] = "OFF,ON";//,REDUCED"; //might try a smaller variant
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "MOVING TEXT";
optionDescription[  option] = "Allows text to occasionally shake, wiggle, or whirl for emphasis inside text boxes.";
optionVar[          option] = "showMovingText";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "COLORBLIND MODE";
optionDescription[  option] = "Changes the graphics for certain color-dependent challenges (e.g. vanishing Sheep Man blocks).";
optionVar[          option] = "colorBlindSheepBlocks";
optionSettings[     option] = "OFF,ON";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "COLORED TEXT OVERLAYS";
optionDescription[  option] = "Adds a customizable overlay to all text boxes to improve readability (opens a separate menu).";
optionVar[          option] = "";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);


// == SOUND EFFECTS =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "SFX";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "JUMP";
optionDescription[  option] = ""//"Choose the sound effect for landing from a jump.";
optionVar[          option] = "jumpSound";
optionSettings[     option] = "MM3-6,MM1-2,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "TELEPORT";
optionDescription[  option] = ""//"Choose the teleport sound effects.";
optionVar[          option] = "teleportSound";
optionSettings[     option] = "MM3-6,MM1-2,GB1,GB2,GB3-5,DOS";;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "BUSTER";
optionDescription[  option] = ""//"Choose the buster sound effects.";
optionVar[          option] = "busterSound";
optionSettings[     option] = "MM3+,MM1-2,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "HURT";
optionDescription[  option] = ""//"Choose the sound for the player taking damage.";
optionVar[          option] = "hurtSound";
optionSettings[     option] = "MM3+,MM2,MM1,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "REFILL";
optionDescription[  option] = ""//"Choose the sound for refilling HP.";
optionVar[          option] = "refillSound";
optionSettings[     option] = "MM3+,MM1-2,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SPLASH";
optionDescription[  option] = ""//"Choose the sound effect for splashing in water.";
optionVar[          option] = "splashSound";
optionSettings[     option] = "MM3+,MM1-2,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "BOSS DOOR";
optionDescription[  option] = ""//"Choose the boss door sound effect.";
optionVar[          option] = "doorSound";
optionSettings[     option] = "MM3+,MM1-2,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "PLAYER/BOSS DEATH";
optionDescription[  option] = ""//"Choose the death sound. These sometimes differ between players and bosses.";
optionVar[          option] = "deathSound";
optionSettings[     option] = "MM3+,MM2,MM1,GB1,GB2,GB3-5,DOS";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "PAUSE";
optionDescription[  option] = ""//"Choose the pause/unpause sounds. Also used for entering various menus.";
optionVar[          option] = "pauseSound";
optionSettings[     option] = "DEFAULT,MM4,GB1,GB2,GB3-5,DOS"//"MM 3-6,MM 1/2,GB3-5,GB2,DOS";
optionPage[page, (pageOption ++)] = (option ++);



// == MISC. =======================================================================================
page ++;
pageOption = 0;

pageName[page] = "MISC.";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "CHECKPOINT NOT.";
optionDescription[  option] = "Choose where the notification appears when you reach a checkpoint. Also plays a sound.";
optionVar[          option] = "checkpointNotification";
optionSettings[     option] = "OFF,TOP,MIDDLE,BOTTOM";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "PICKUP EFFECT";
optionDescription[  option] = "When an item refills your health or ammo, does it pause to fill the bar or does it happen instantly?";
optionVar[          option] = "healthEffect";
optionSettings[     option] = "FILL,INSTANT";
optionPage[page, (pageOption ++)] = (option ++);

// - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "BUSTER CHARGE BAR";
optionDescription[  option] = "Displays the charge level of the Mega Buster next to the health bar.";
optionVar[          option] = "chargeBar";
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "DAMAGE POPUP";
optionDescription[  option] = "Damage dealt or received is briefly displayed as a number above the target.";
optionVar[          option] = "damagePopup"
optionSettings[     option] = offon;
optionPage[page, (pageOption ++)] = (option ++);

// - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
optionName[         option] = "SPEEDRUN MODE";
optionDescription[  option] = "Automatically skips events where applicable. *Not recommended* for first time players!";
optionVar[          option] = "autoCutsceneSkip";
optionSettings[     option] = "OFF,CUTSCENES,ALL";
optionPage[page, (pageOption ++)] = (option ++);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*optionName[         option] = "PLAYER COUNT";
optionDescription[  option] = "[MULTIPLAYER - REMOVE THIS OPTION FOR FINAL GAME. FAR FAR TOO MANY ISSUES WHEN ENABLED MID-GAME!]";
optionVar[          option] = "playerCount";
optionSettings[     option] = ""; //SPECIAL
optionPage[page, (pageOption ++)] = (option ++);
*/
// - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


var totalOptions = option;

// - Menu Navigation Variables
page = 0;
pageIndex = 0; // which option on the current page
optionCount = array_length_2d(optionPage, 0); // # of options on the current page
pageCount = array_length_1d(pageName); // # of pages
x_dir = 0; // Player's left/right movement to change an option

// - Option-updating Variables
option = 0;
preValue = 0; // option before it was updated

// - Phase Variables
phase = 0;
newPage = 0;
textAlpha = 1;

// == Initilaize display values ==
for (var i = 0; i &lt; totalOptions; i++;)
{
    optionDisplay[i] = "";
    
    option = i;
    event_user(1);
}

option = 0;
optionsVisible = 8;

boxRetract = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key stuff

configuringGamepad = false;
endBinding = 0;
buttonPromptType = 1;

keyIndex = 0;
key = -1;
keyLock = 0;
keyTimer = 0;

illegalKeys = makeArray
(
    vk_f1,
    vk_f2,
    vk_f3,
    vk_f4,
    vk_f5,
    vk_f6,
    vk_f7,
    vk_f8,
    vk_f9,
    vk_f10,
    vk_f11,
    vk_f12,
    
    /*vk_numpad0,
    vk_numpad1,
    vk_numpad2,
    vk_numpad3,
    vk_numpad4,
    vk_numpad5,
    vk_numpad6,
    vk_numpad7,
    vk_numpad8,
    vk_numpad9,*/
    
    vk_nokey,
    
    vk_escape,
    vk_alt,
    vk_printscreen,
    vk_delete,
    
    vk_add,
    vk_subtract,
    vk_multiply,
    vk_divide,
    vk_decimal
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(sfxEnergyRestoreClassic);
audio_stop_sound(sfxEnergyRestore); //3+
audio_stop_sound(sfxGB3Refill);
audio_stop_sound(sfxGB2Refill);
audio_stop_sound(sfxGB1Refill);
audio_stop_sound(sfxMMDosPickup);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(sfxEnergyRestoreClassic);
audio_stop_sound(sfxEnergyRestore); //3+
audio_stop_sound(sfxGB3Refill);
audio_stop_sound(sfxGB2Refill);
audio_stop_sound(sfxGB1Refill);
audio_stop_sound(sfxMMDosPickup);
audio_stop_sound(getGenericSFX(SFX_REFILL));

audio_stop_sound(sfxDoorClassic);
audio_stop_sound(sfxDoor);
audio_stop_sound(sfxGB3BossShutter);
audio_stop_sound(sfxGB2BossDoor);
audio_stop_sound(sfxGB1Door);
audio_stop_sound(sfxMMDosDoor);
audio_stop_sound(getGenericSFX(SFX_DOOR));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Repeating alarm for the hitflash effect demonstration.
alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var fadeSpeed = 0.2;

if (menuDelay &gt; 0)
{
    menuDelay --;
}

if (global.buttonPromptType &gt; 0)
{
    buttonPromptType = global.buttonPromptType;
}

switch (phase)
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 0: // Fade to Black
    
        if (objGlobalControl.fadeAlpha &gt;= 1)
        {
            global.nextRoom = 0;
            visible = 1;
            phase = 1;
        }
        
        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 1: // Face To Options
    
        if (objGlobalControl.fadeAlpha &lt;= 0)
        {
            phase = 2;
        }
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 2: // Menu Selection
    
        event_user(0);
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 3: // Fade out of options
    
        if (room == rmOptions)
        {
            saveLoadOptions(true);
            global.nextRoom = rmTitleScreen;
            phase = 74;
        }
        else // In-game
        { 
            if (global.nextRoom == 0) 
            {
                global.nextRoom = -1;
            }
            else if (objGlobalControl.fadeAlpha == 1)
            {
                global.nextRoom = 0;
                visible = 0;
                phase = 4;
            }
        }
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 4: // Fade back to the game
    
        if (objGlobalControl.fadeAlpha == 0)
        {
            global.frozen = true;
            instance_destroy();
        }
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 5: // Submenu Cross-Fade: Old page fades out
    
        textAlpha -= fadeSpeed;
        
        if (textAlpha &lt;= 0)
        {
            page = newPage;
            optionCount = array_length_2d(optionPage, page);
            pageIndex = min(pageIndex, optionCount - 1);
            option = optionPage[page, pageIndex];
            
            textAlpha = 0;
            phase = 6;
        }
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 6: // Submenu Cross-Fade: New page fades in
    
        textAlpha += fadeSpeed;
        
        if (textAlpha &gt;= 1)
        {
            textAlpha = 1;
            phase = 2;
        }
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 7: //Button Mapping
        
        event_user(4);
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
}

// Since screen size can also be changed via the F3 &amp; F4 keys anytime,
// that option's display value must be updated every frame
var _op = option;
option = indexOf(optionName, "SCREEN SIZE");
event_user(1);
option = _op;

var _op = option;
option = indexOf(optionName, "GAMEPAD RUMBLE");
event_user(1);
option = _op;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surfw += 2;
surfh += 2;

var surf = mm_surface_create(surfw, surfh);

surface_set_target(surf);
draw_clear_alpha(c_white, 0);

//draw_set_color(make_color_rgb(252, 160, 68));
draw_set_color(c_black);
draw_rectangle(1, 1, surfw - 2, surfh - 2, 0);

draw_set_blend_mode(bm_subtract);
draw_point(1, 1);
draw_point(surfw - 2, 1);
draw_point(1, surfh - 2);
draw_point(surfw - 2, surfh - 2);

draw_set_blend_mode(bm_normal);
draw_set_color(c_white);

surface_reset_target();

//var shader = shColorEdges;
var shader = shAddPartialOutline;
shader_set_safe(shader);

var col = make_color_rgb(252, 252, 252);
//var col = make_color_rgb(252, 160, 68);
shader_set_uniform_f(shader_get_uniform(shader,"u_color"), colour_get_red(col), colour_get_green(col), colour_get_blue(col));
shader_set_uniform_f(shader_get_uniform(shader,"offsetx"), 1 / surfw);
shader_set_uniform_f(shader_get_uniform(shader,"offsety"), 1 / surfh);

draw_surface_ext(surf, (surfx - 1), (surfy - 1), 1, 1, 0, c_white, surfa);

shader_reset();
mm_surface_free(surf);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key Mapping

var variable = "";
var cid = global.playerConfigID;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//GET INPUT
var invalid = 0;
var keyOld = key;
key = -1;

if (configuringGamepad) //Gamepad Configuring
{
    variable = "gamepadBind";
    
    var gamepad = objGlobalControl.controllerID[cid];
    
    if (gamepad != -1)
    { 
        var buttons = 128;
        /*Yes, 128. Bad DInput controllers don't bind in the range of their number 
        of buttons, so this could miss out on important bindings.
        E.g. Sega Genesis 3B reports a button count of 10. Yet button B is registered as ID 13.
        128 buttons is the maximum number a single DInput controller can provide.
        
        */
        if (gamepad &lt; 4)
        {
            buttons = gamepad_button_count(gamepad);
            //XInput on the other hand, is standardized. This should always return 10, but just in case, call in anyway.
        }
        //max(24,gamepad_button_count(gamepad));
        //printErr(buttons);
        for (var i = 0; i &lt; buttons; i++;)
        {
            if (gamepad_button_check_cross(gamepad, i))
            {
                key = i;
                break;
            }
        }
        
        //Can't rebind right stick
        if (key == global.gamepadBind0[INPUT_WEAPONWHEEL2])
        {
            invalid = 1;
        }
    }
} 
else //Keyboard Configuring
{ 
    variable = "keyboardBind";
    
    if (keyboard_check(vk_anykey)) 
    {
        key = keyboard_key;
        
        if (indexOf(illegalKeys, key) != -1)
        {
            invalid = 1;
        }
    }
}

if (key != -1)
{
    keyTimer ++;
}
else
{
    keyLock = 0;
    
    //SKIP
    if (keyboard_check_pressed(vk_alt))
    {
        endBinding = 1;
        playSFX(sfxTextBox);
    }
    
    //END IT
    if (endBinding)
    {
        phase = 2;
    }
}

if ((keyOld != key) || keyLock)
{
    keyTimer = 0;
}

if (invalid)
{
    if (keyTimer == 0)
    {
        playSFX(sfxError);
        proceed = 0;
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//DEBIND (Gamepad only)
if (configuringGamepad)
{
    if (keyboard_check_pressed(vk_delete)) 
    {
        keyTimer = 1;
        key = -1;
        
        playSFX(sfxTextBox);
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//ASSIGN
if ((keyTimer &gt;= 1) &amp;&amp; !invalid  &amp;&amp; !endBinding)
{
    variable = variable + string(cid);
    
    var myArray = variable_global_get(variable);
    
    var originalKey = myArray[keyIndex];
    
    if (key != originalKey)
    {
        //Swap duplicates
        if (key &gt;= 0)
        {
            var otherIndex = indexOf(myArray, key);
            
            if (otherIndex &gt;= 0)
            {
                myArray[otherIndex] = originalKey;
            }
        }
        
        //Assign key
        myArray[keyIndex] = key;
        
        variable_global_set(variable, myArray);
    }
    
    playSFX(sfxMenuSelect);
    endBinding = 1;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stuff that needs to be done, when a variable has been changed, goes here

if (pageName[page] == "DISPLAY" || pageName[page] == "BORDER")
{
    setScreenSize(global.screensize);
    with (objShaderControl)
    {
        instance_destroy();
    }
    
    instance_create(0, 0, objShaderControl);
}

var name = optionName[option];

if (pageName[page] == "SFX")
{
    switch(name)
    {
        case "JUMP": playSFX(getGenericSFX(SFX_JUMP)); break;
        case "TELEPORT": playSFX(getGenericSFX(SFX_TELEOUT)); break;
        case "HURT": playSFX(getGenericSFX(SFX_HURT)); break;
        case "BUSTER": playSFX(getGenericSFX(SFX_BUSTER)); break;
        case "PLAYER/BOSS DEATH": playSFX(getGenericSFX(SFX_PLAYERDIE)); break;
        case "SPLASH": playSFX(getGenericSFX(SFX_SPLASH)); break;
        //case "BOSS DOOR": playSFX(getGenericSFX(SFX_DOOR)); break;
        case "PAUSE": playSFX(getGenericSFX(SFX_PAUSE));break;
    }

}

switch(name)
{
    // ------------------------------------------------------------------------
    
    case "VSYNC":
        
        display_reset(0, global.vsync);
        
        break;
    
    // ------------------------------------------------------------------------
    case "REFILL":
        //just in case this sound is still going.
  
        audio_stop_sound(sfxEnergyRestoreClassic);
        audio_stop_sound(sfxEnergyRestore); //3+
        audio_stop_sound(sfxGB3Refill);
        audio_stop_sound(sfxGB2Refill);
        audio_stop_sound(sfxGB1Refill);
        audio_stop_sound(sfxMMDosPickup);
        if (getGenericSFX(SFX_REFILL))
        {
            audio_stop_sound(getGenericSFX(SFX_REFILL));
        }
        loopSFX(getGenericSFX(SFX_REFILL));
        alarm[2] = 32;
    break;
    case "BOSS DOOR":
        audio_stop_sound(sfxDoorClassic);
        audio_stop_sound(sfxDoor); //3+
        audio_stop_sound(sfxGB3BossShutter);
        audio_stop_sound(sfxGB2BossDoor);
        audio_stop_sound(sfxGB1Door);
        audio_stop_sound(sfxMMDosDoor);
        if (getGenericSFX(SFX_DOOR))
        {
            audio_stop_sound(getGenericSFX(SFX_DOOR));
        }
        loopSFX(getGenericSFX(SFX_DOOR));
        alarm[2] = 32;
    break;
    case "MASTER VOLUME":
    case "MUSIC VOLUME":
        
        musicVolumeUpdate();
        
        break;
    case "MUSIC CREDITS":
        if (global.musicShowCredits != 1)
        {
            ds_map_clear(global.songCredits_History);
        }
    break;
    
    // ------------------------------------------------------------------------
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Here you can set how special options handles their values

//Quick Note:
//'pre_value' - is the original value from the option
//'new_value' - set this to change the value of the option
//'txt' - this is for the text that show which setting the option is on

switch (optionName[option])
{
    // ------------------------------------------------------------------------
    
    case "SCREEN SIZE": // Screen size
    
        new_value = pre_value + x_dir;
        
        txt = string(new_value) + 'X';
        
        if (floor(new_value) != new_value)
        {
            txt = "STRETCH";
        }
        
        break;
    
    // ------------------------------------------------------------------------
    
    case "ARTWORK":
        
        new_value = pre_value;
        
        if (x_dir != 0)
        {
            do
            {
                new_value = modf((new_value + x_dir), array_length_1d(borderProperties)/3);
            }
            until (borderProperties[new_value*3+1]);
            if (new_value &gt;= sprite_get_number(sprBorders))
            {
                customBorderLoad(new_value);
            }
        }
        
        
        txt = borderProperties[new_value*3];
        
        break;
        
    // ------------------------------------------------------------------------
    
    case "MASTER VOLUME":
    case "MUSIC VOLUME":
    case "MIC VOLUME":
    case "MIC SENSITIVITY":
    case "SOUND VOLUME":
        
        new_value = clamp(pre_value + (10 * x_dir), 0, 100);
        
        txt = string(new_value) + '%';
        
        break;
        
    // ------------------------------------------------------------------------
    
    case "BRIGHTNESS":
    case "SATURATION":
        
        new_value = clamp(pre_value + (0.1 * x_dir), 0, 2);
        
        txt = string_format(100 * new_value, 0, 0) + '%';
        
        break;
    
    // ------------------------------------------------------------------------
    
    case "COLOR":
        
        new_value = clamp(pre_value + x_dir * 5, -1, 255);
        
        if ((pre_value &lt; 0) &amp;&amp; (x_dir == 1))
        {
            new_value = 0;
        }
        
        if (new_value &lt; 0)
        {
            txt = "STANDARD";
        }
        else
        {
            txt = string_format(new_value, 0, 0);
        }
        
        break;
            
    // ------------------------------------------------------------------------
    
    case "PLAYER COUNT":
    
        new_value = max(1, modf((pre_value + x_dir), (MAX_PLAYERS + 1)));
        
        txt = string(new_value);
        
        break;
    
    // ------------------------------------------------------------------------
    
    case "CONFIGURE PLAYER":
    
        new_value = modf((pre_value + x_dir), MAX_PLAYERS);
        
        txt = string(new_value + 1);
        
        break;
    
    // ------------------------------------------------------------------------
    
    case "GAMEPAD RUMBLE":
        
        var index = global.playerConfigID;
        var sub_value = pre_value[index];
        
        if (x_dir != 0)
        {
            sub_value = !sub_value;
            
            if (sub_value)
            {
                applyRumble(index, 0,1,.05,15);
            }
            else
            {
                rumbleClearAll();
            }
            
            new_value = pre_value;
            new_value[global.playerConfigID] = sub_value;
        }
        
        txt = "ON";
        if (!sub_value)
        {
            txt = "OFF";
        }
        
        break;
    
    // ------------------------------------------------------------------------
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update display value
txt = "";

option_var = optionVar[option];

if (is_string(option_var))
{
    if (option_var != "")
    {
        pre_value = variable_global_get(option_var);
        
        var settings = optionSettings[option];
        
        if (settings != "") //Automatic
        {
            var str = settings;
            var count = string_count(",", str);
            
            var val = modf(pre_value + x_dir, count + 1);
            variable_global_set(option_var, val);
            
            for (var i = 0; i &lt;= val; i ++;)
            {
                var comma = string_pos(",", str);
                
                if (comma &gt; 0)
                {
                    txt = string_copy(str, 1, comma - 1);
                    str = string_delete(str, 1, comma);
                }
                else
                {
                    txt = str;
                }
            }
        }
        else //Manual
        {
            new_value = pre_value;
            
            event_user(2);
            
            if (pre_value != new_value)
            {
                variable_global_set(option_var, new_value);
                
                if (pageName[page] == "SFX")
                {
                    stopSFX(getGenericSFX(SFX_JUMP));
                    stopSFX(getGenericSFX(SFX_BUSTER));
                    stopSFX(getGenericSFX(SFX_DOOR));
                    stopSFX(getGenericSFX(SFX_HURT));
                    stopSFX(getGenericSFX(SFX_PLAYERDIE));
                    stopSFX(getGenericSFX(SFX_SPLASH));
                    stopSFX(getGenericSFX(SFX_TELEOUT));
                    stopSFX(getGenericSFX(SFX_PAUSE));
                }
            }
        }
        
        // Option has successfully changed
        if (variable_global_get(option_var) != pre_value)
        {
            if (pageName[page] != "SFX")
            {
                playSFX(sfxMenuMove);
            }
            
            event_user(3);
        }
    }
}

optionDisplay[option] = txt;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Navigation
if (instance_exists(objColoredTextOverlaysMenu))
{
    exit;
}

var interval = 8;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Leaving the options menu
if (global.keyShootPressed[playerID] || global.keyPausePressed[playerID]) &amp;&amp; (pageName[page] != "BINDINGS")
{
    phase = 3;
    playSFX(sfxMenuSelect);
    exit;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Page Navigation
var p_dir = global.keyWeaponSwitchRightPressed[playerID] - global.keyWeaponSwitchLeftPressed[playerID];

if (p_dir != 0)
{
    newPage = modf(page + p_dir, pageCount);
    phase = 5;
    playSFX(sfxBolt);
    exit;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Up/Down Navigation
y_dir = global.keyDown[playerID] - global.keyUp[playerID];
x_dir = (global.keyRight[playerID] - global.keyLeft[playerID]);     
if (phase == 7)
{
    y_dir = global.keyDown[global.playerConfigID] - global.keyUp[global.playerConfigID];
    x_dir = (global.keyRight[global.playerConfigID] - global.keyLeft[global.playerConfigID]);   
}

if (y_dir != 0)
{
    if ((holdTimer == 0)
    || (((holdTimer mod interval) == 0) &amp;&amp; (holdTimer &gt;= (interval * 4))))
    {
        pageIndex = modf(pageIndex + y_dir, optionCount);
        option = optionPage[page, pageIndex];
        
        playSFX(sfxMenuMove);
        
        menuDelay = 0;
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//Key bindings
if (is_real(optionVar[option])) //Options with a real number assigned to them correspond to a key binding
{
    if (global.keyJumpPressed[playerID] || (global.keyPausePressed[playerID] &amp;&amp; (pageName[page] == "BINDINGS")))
    {
        phase = 7;
        
        keyIndex = optionVar[option];
        keyTimer = 0;
        
        key = -1;
        keyLock = 1;
        
        endBinding = 0;
        configuringGamepad = sign(global.buttonPromptType);
        
        playSFX(sfxMenuSelect);
    }
}
else //Other options
{
    // Options with no global var assigned will respond to the select (jump) key
    if (optionVar[option] == "")
    {
        if (global.keyJumpPressed[playerID])
        {
            var name = optionName[option];
            
            switch(name)
            {
                case "RESET CONTROLS":
                
                    playSFX(getGenericSFX(SFX_PAUSE));
                    controlMappingInit(global.playerConfigID);
                    
                    break;
                    
                case "COLORED TEXT OVERLAYS":
            
                    playSFX(getGenericSFX(SFX_PAUSE));
                    instance_create(x, y, objColoredTextOverlaysMenu);
                    
                    break;
            }
        }
    } 
    else //Regular options
    {
        if (menuDelay == 0)
        {
            if (x_dir != 0)
            {
                if (holdTimer == 0)
                {
                    event_user(1);
                }
                
                if (((holdTimer mod interval) == 0) &amp;&amp; (holdTimer &gt;= (interval * 4)))
                {
                    switch (optionName[option])
                    {
                        case "MASTER VOLUME":
                        case "MUSIC VOLUME":
                        case "MIC VOLUME":
                        case "MIC SENSITIVITY":
                        case "SOUND VOLUME":
                        case "BRIGHTNESS":
                        case "SATURATION":
                        case "COLOR":
                            
                            event_user(1);
                            break;
                    }
                }
            }
        }
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if ((x_dir == 0) &amp;&amp; (y_dir == 0))
{
    holdTimer = 0;
}
else
{
    holdTimer ++;
}

x_dir = 0;
y_dir = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var xview = view_xview[0];
var yview = view_yview[0];
var wview = view_wview[0];
var hview = view_hview[0];

draw_sprite_ext(sprDot, 0, xview, yview, wview, hview, 0, c_black, 1);

var weirdGrey = make_color_rgb(248, 88, 152);

//////////////////////////////////////////////////////////////////////////

// Description of the highlighted option
var yy = yview + (hview - 32);
var xx = xview + 16;

var str = optionDescription[option];
if (str == "BORDERDESC")
{
    if (global.fullscreenBorder)
        str = borderProperties[global.fullscreenBorder*3] + "#" + borderProperties[global.fullscreenBorder*3+2];
    else
        str = "Add an artistic border to the game window.";
    
}

var retract = ((str == "") || (phase == 7));

if (!retract) //Actual text
{    
    draw_set_halign(fa_left);
    draw_set_valign(0);
    draw_set_alpha(1);
    draw_set_font(global.fontSmall);
    
    draw_text_ext(xx + 12, (yy - 27 ), str, 9, (wview - 56));
    
    draw_set_alpha(1);
    draw_set_font(global.font);
}


if (phase != 7 &amp;&amp; optionName[option] == "HITFLASH EFFECT")
{
    
    draw_sprite_ext(sprBusterShot,0,view_xview+128+alarm[0]*5,view_yview+224-32-12,1,1,0,c_white,1);
    
    if (alarm[0] &lt; 4)
    {
        hitFlashEffect(true,c_white);
        
        draw_sprite_ext(sprCrazyCannonRed,0,view_xview+128,view_yview+224-32-4,1,1,0,c_white,1);
        
        hitFlashEffect(false,c_white);
    }
    else
    {
        draw_sprite_ext(sprCrazyCannonRed,0,view_xview+128,view_yview+224-32-4,1,1,0,c_white,1);
    }
}

//////////////////////////////////////////////////////////////////////////

// Menu BG
//draw_sprite(sprite_index, 0, xview, yview);

var x1, x2, xx, img, slot;

var wpndir = (global.keyWeaponSwitchRight[playerID] - global.keyWeaponSwitchLeftPressed[playerID]);

var xx = xview + (wview / 2);

//Handle Magic Man blink
var img = floor((global.roomTimer mod 390) / 3);

if (img &gt; 6)
{
    img = 0;
}
else if (img &gt;= 4)
{
    img = 3 - (img - 4);
}

draw_set_halign(fa_center);
draw_set_valign(fa_top);

draw_text(xx, yview + 38, pageName[page]);
    
if (global.playerCount &gt; 1 &amp;&amp; room != rmOptions)
{
    drawPlayerNumber(playerID,xview + 8,yview);
}
//////////////////////////////////////////////////////////////////////////

//DRAW OPTIONS
var menu_x = xview + 32;
var menu_r = (menu_x + (wview - 64));
var buttonx = (menu_r - 8);

var ioptionsVisible = optionsVisible;
if (!retract)
{
    ioptionsVisible -= 2;
}

var optionPosition = (option - optionPage[page, 0]);

var optionStart = max(floor(optionPosition - (ioptionsVisible / 2)), 0);
var optionEnd = min((optionStart + ioptionsVisible), optionCount);
    optionStart = max((optionEnd - ioptionsVisible), 0);
    
var yy = (yview + 56);

// The options on the current page
for (var i = optionStart; i &lt; optionEnd; i++;)
{
    var i_option = optionPage[page, i];
    var name = optionName[i_option];
    var txt = optionDisplay[i_option];
    var drawBindings = is_real(optionVar[i_option]);
    var txtColor = c_white;
    var flickerButton = 0;
    if (name == "ARTWORK")
    {
        if (txt != "NONE")
        {
            txt = string(global.fullscreenBorder);
        }
        
        //global.fullscreenBorder
        //draw_set_font(global.fontSmall);
    }
    if (i_option == option) //This is the current option
    {
        surfx = menu_x - 4;
        surfy = yy - 3;
        surfw = ((menu_r - menu_x) + 10);
        surfh = 14;
        surfa = textAlpha;
        event_user(10);
        
        txtColor = make_color_rgb(252, 252, 252);
        
        if ((txt != "") &amp;&amp; !drawBindings) // Draw arrows for switching options
        {
            for (ii = 0; ii &lt;= 1; ii ++;)
            {
                dir = (ii - !ii);
                var xx = round((menu_r + (dir * 2)) - ((string_width(txt) + 1) * (dir &lt; 0)));
                
                draw_sprite_ext(sprUIArrow, 0, xx, (yy + 4), 1, 1, (180 * (dir &lt; 0)), txtColor, textAlpha);
            }
        }
        else // Draw jump-button for confirming
        {
            if ((textAlpha == 1) &amp;&amp; (phase != 7))
            {
                var buttonxx = (buttonx - (48 * drawBindings));
                
                drawButtonPrompt("jump", buttonxx, yy, 0, global.playerConfigID);
            }
        }
        
        if ((phase == 7) &amp;&amp; !endBinding)
        {
            flickerButton = (((global.roomTimer / 8) mod 1) &lt; 0.5);
        }
    }
    
    //Draw bindings
    if (drawBindings)
    {
        var button = optionVar[i_option];
        var oldPrompt = global.buttonPromptType;
        
        //KEY
        if (configuringGamepad || !flickerButton)
        {
            global.buttonPromptType = 0;
            
            drawButtonPrompt(button, (buttonx - 24), yy, 0, global.playerConfigID);
        }
        
        draw_set_halign(fa_left);
        draw_set_color(txtColor);
        draw_text((buttonx - 12), yy, "/");
        draw_set_color(c_white);
        
        //BUTTON
        if (!configuringGamepad || !flickerButton)
        {
            global.buttonPromptType = buttonPromptType;
            if (global.buttonPromptOverride != BUTTONPROMPT_CONTEXTID)
            {
                drawButtonPrompt(button, buttonx, yy, 0, global.playerConfigID);
            }
            else
            {
                var binds = makeArray(global.gamepadBind0,global.gamepadBind1,global.gamepadBind2,global.gamepadBind3);
                var bind = binds[global.playerConfigID];
                draw_text(buttonx, yy,string(bind[button]));
            }
        }
        
        global.buttonPromptType = oldPrompt;
    }
    
    
    
    draw_set_alpha(textAlpha);
    draw_set_color(txtColor);
    
    // Option name
    draw_set_halign(fa_left);
    draw_text(menu_x, yy, name);
    
    // Option state
    draw_set_halign(fa_right);
    draw_text(menu_r, yy, txt);
    
    draw_set_font(global.font);
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    //Arrows
    var bop = (((global.roomTimer / 60) mod 1) &lt; 0.5);
    var arrowx = (menu_x + 4);
    
    if (i == optionStart)
    {
        if (optionStart &gt; 0)
        {
            draw_sprite_ext(sprUIArrow, 0, arrowx, ((yy - 4) - bop), 1, 1, 90, c_white, textAlpha);
        }
    }
    
    if (i == (optionEnd - 1))
    {
        if (optionEnd &lt; optionCount)
        {
            draw_sprite_ext(sprUIArrow, 0, arrowx, ((yy + 12) + bop), 1, 1, 270, c_white, textAlpha);
        }
    }
    
    yy += 16;
}

clearDrawState();

// - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if (phase != 7)
{
    //Switch page prompt
    var dir; 
    var prompt = makeArray("switchleft", "switchright");
    
    for (ii = 0; ii &lt;= 1; ii ++;)
    {
        dir = (ii - !ii);
        var xx = round((xview + (wview / 2)) + (115 * dir));
        var yy = round((yview + 88) + (sin(global.roomTimer / 20) * 3));
        
        surfx = (xx - 7);
        surfy = (yy - 7);
        surfw = 14;
        surfh = 24;
        surfa = 1;
        event_user(10);
        
        drawButtonPrompt(prompt[ii], (xx - 4), (yy - 4),false, playerID);
        
        draw_sprite_ext(sprUIArrow, 0, (xx - dir), (yy + 11), 1, 1, (180 * (dir &lt; 0)),  make_color_rgb(252, 252, 252), 1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
