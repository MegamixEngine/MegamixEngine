<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDockaLocker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Code borrowed from yoku blocks
// Creation code(all optional since gm:studio executes creation code after the create event):
// startup = &lt;number&gt; (the amount of frames it takes for the Yoku block to first appear)
// active = &lt;number&gt; (the amount of frames the Yoku block is active before disappearing)
// wait = &lt;number&gt; (the amount of frames the Yoku block needs to reappear after disappearing

// Creation code (optional):
// sprite = &lt;sprite name&gt; (to set the enemy to have a custom graphics)
// spriteBack = &lt;sprite name&gt; (what would be seen behind him once it's open or it's dead)
// neverDespawn = &lt;boolean&gt; (true = will reappear after disappearing for the first time (default); false = only appears once) (setting this to false will eliminate the need to set the wait variable)
// col = Change colours: 0 (default) = blue, 1 = purple

// Note: Dockalocker appear and disappear regardless of whether they are on-screen or off-screen

event_inherited();
blockCollision = 0;
canHit = false;
canDamage = false;

contactDamage = 2;
noFlicker = true;

if (sprite_index != sprDockaLocker)
    sprite_index = sprDockaLocker;

grav = 0;

// creation code setup stuff
back = noone;
startup = 0;
active = 120;
neverDespawn = true;
wait = 120;
sprite = noone;
col = 0;
spriteBack = sprDockalockerBack;
doSFX = true;

timer = 0;
phase = 0; // 0 = waiting to appear; 1 = active; 2 = waiting to reappear after disappearing; 3 = inactive;

respawnRange = -1;
despawnRange = -1;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!neverDespawn)
{
    wait = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    switch (phase)
    {
        case 0: // Waiting to appear
        // timer 
            canHit = false;
            canDamage = false;
            timer += 1;
            if (timer &gt;= startup)
            {
                timer = 0;
                phase = 1;
                image_index = 0;
            }
            break;
        case 1: // active
        // have solid 
            var canShoot = false;
            if (insideView())
            {
                canHit = true;
                canDamage = true;
                canShoot = true;
            }
            
            // Animation
            if (image_index &lt; image_number - 1)
            {
                image_speed = 0.25;
            }
            else
            {
                if (image_speed != 0 &amp;&amp; timer &gt; active * 0.5 &amp;&amp; canShoot)
                {
                    event_user(0);
                    image_speed = 0;
                }
                image_index = image_number - 1;
            }
            
            // timer
            timer += 1;
            if (timer &gt;= active)
            {
                timer = 0;
                image_speed = -0.25;
                
                if (neverDespawn)
                {
                    phase = 2;
                }
                else
                {
                    phase = 3; // set to inactive phase
                }
            }
            break;
        case 2: // Waiting to reappear after disappearing
        // timer 
            timer += 1;
            canDamage = false;
            canHit = false;
            if (timer &gt;= wait)
            {
                timer = 0;
                phase = 1;
                image_index = 0;
            }
            break;
        case 3: // inactive 
            canDamage = false;
            canHit = false;
            break;
    }
}
else if (dead)
{
    phase = 0;
    timer = 0;
    if (instance_exists(back))
    {
        back.visible = false;
    }
    image_speed = 0;
    image_index = 0;
    canDamage = false;
    canHit = false;
}

if (phase != 1)
{
    if (image_index == 0)
        image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (instance_exists(back))
{
    if (spawned)
    {
        back.visible = true;
    }
    else
    {
        back.visible = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
back.visible = true;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var bullet = instance_create(x + 8, y + 11, objEnemyBullet);
bullet.target = self.target;
bullet.contactDamage = 2;
with (bullet)
    aimAtTarget(3);
playSFX(sfxEnemyShootClassic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// custom sprite using sprite variable

if (sprite != noone)
{
    sprite_index = sprite;
}
else
{
    switch (col)
    {
        case 1:
            sprite_index = sprDockaLockerPurple;
            break;
        default:
            sprite_index = sprDockaLocker;
            break;
    }
}
back = instance_create(x + 16, y, prtAlwaysActive);
back.depth = 3;
back.sprite_index = spriteBack;
back.image_speed = 0;
back.visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
