<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTenguWind</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code
// windSpeed = ;
// windAccel = ; (how fast the wind changes when a wind speed trigger is hit)

event_inherited();

canHit = false;
blockCollision = 0;
grav = 0;
despawnRange = -1;
respawnRange = -1;
bubbleTimer = -1;

activated = false;
leafTimer = 0;


// creation code stuff
windSpeed = -0.75;
maxWindSpeed = windSpeed;
startWindSpeed = maxWindSpeed;
windAccel = 0.008;
startWindAccel = windAccel;

objectDrop = objTenguLeaf // leaf object used.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.frozen &amp;&amp; activated)
{
    with (objMegaman)
    {
        /* if (isSlide)
        {
            if (xspeed &gt; 1)
            {
                xspeed = xspeed / 2;
            }
            if (xspeed &lt; 0 &amp;&amp; xspeed &gt; -3)
            {
                xspeed = -3;
            }
        }
        else */
        if (global.playerHealth[playerID] &gt; 0 &amp;&amp; !climbing)
        {
            shiftObject(other.windSpeed, 0, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // activate check
    if (!activated &amp;&amp; insideSection(x, y))
    {
        activated = true;
        
        // don't effect the player when spawning in
        for (var p = 0; p &lt; instance_number(objMegaman); p++)
        {
            var player = instance_find(objMegaman, p);
            if (instance_exists(player))
            {
                if (player.teleporting || player.showReady)
                {
                    activated = false;
                }
            }
        }
    }
    
    // spawn leaves
    if (activated &amp;&amp; windSpeed != 0)
    {
        leafTimer++;
        
        if (leafTimer mod 7 == 0)
        {
            var spawnX = view_xview[0];
            if (windSpeed &lt; 0)
            {
                spawnX += view_wview[0];
            }
            
            var spawnRange = 70;
            instance_create(spawnX, view_yview[0] + view_hview[0] / 2 + 10 + irandom_range(-spawnRange, spawnRange), objectDrop);
        }
    }
    
    // change speeds
    if (windSpeed != maxWindSpeed)
    {
        show_debug_message("before change: " + string(windSpeed));
        if (windSpeed &gt;= maxWindSpeed - windAccel &amp;&amp; windSpeed &lt;= maxWindSpeed + windAccel)
        {
            // round to the max speed
            windSpeed = maxWindSpeed;
        }
        else
        {
            // accelerate
            if (windSpeed &gt; maxWindSpeed)
            {
                windSpeed -= windAccel;
            }
            else
            {
                windSpeed += windAccel;
            }
        }
        
        show_debug_message("after change: " + string(windSpeed));
    }
}
else if (dead)
{
    activated = false;
    leafTimer = 0;
    maxWindSpeed = startWindSpeed;
    windSpeed = maxWindSpeed;
    windAccel = startWindAccel;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxWindSpeed = windSpeed;
startWindSpeed = maxWindSpeed;

startWindAccel = windAccel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
