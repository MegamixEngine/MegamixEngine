<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNewShotman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// It can shoot straight shots in both directions, and arc shots when Mega Man gets close to it.
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "cannons";

// Enemy specific code
shootTimer1 = 0;
shootTimer2 = 0;
shooting2 = false;
spriteTimer = 0;

image_speed = 8 / 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Shooting normal bullets
    shootTimer1 += 1;
    var shootTimerInterval;
    shootTimerInterval = 30;
    if (shootTimer1 == shootTimerInterval
        || shootTimer1 == shootTimerInterval * 2
        || shootTimer1 == shootTimerInterval * 3)
    {
        var i = instance_create(bbox_left - 4, y - 12, objEnemyBullet);
        i.xspeed = -2;
        i.dir = 180;
        i = instance_create(bbox_right + 4, y - 12, objEnemyBullet);
        i.xspeed = 2;
        i.dir = 0;
    }
    
    if (shootTimer1 &gt;= shootTimerInterval * 4.5)
    {
        shootTimer1 = 0;
    }
    
    // Shooting gravity bullets
    if (instance_exists(target))
    {
        var dist;
        dist = point_distance(spriteGetXCenter(), spriteGetYCenter(),
            spriteGetXCenterObject(target),
            spriteGetYCenterObject(target));
        if (dist &lt;= 100)
        {
            shootTimer2 += 1;
            var shootTimerInterval2;
            shootTimerInterval2 = 20;
            if (shootTimer2 == shootTimerInterval2
                || shootTimer2 == shootTimerInterval2 * 2)
            {
                i = instance_create(x, y - 16, objNewShotmanBullet);
                i.grav = 0.25;
                i.destX = spriteGetXCenterObject(target);
                i.destY = spriteGetYCenterObject(target);
                i.yspeed = -5;
                i.stopAtSolid = 1;
                
                spriteTimer = 5;
                sprite_index = sprNewShotmanShoot;
            }
            
            if (shootTimer2 &gt;= shootTimerInterval2 * 6)
            {
                shootTimer2 = 0;
            }
        }
    }
    
    // Sprites
    if (spriteTimer &gt; 0)
    {
        spriteTimer -= 1;
        if (spriteTimer &lt;= 0)
        {
            sprite_index = sprNewShotman;
        }
    }
}
else if (dead)
{
    shootTimer1 = 0;
    shootTimer2 = 0;
    shooting2 = 0;
    spriteTimer = 0;
    sprite_index = sprNewShotman;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
