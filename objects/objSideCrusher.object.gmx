<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSideCrusher</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform_object(objCrusher, ev_create, 0);

despawnRange = -1;
goUp = 0;
fallen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (((xcoll &gt; 0 &amp;&amp; image_xscale &gt;= 1) || (xcoll &lt; 0 &amp;&amp; image_xscale &lt;= -1)) &amp;&amp; !goUp) // If hit the wall
    {
        // only play sfx if you can actually see it
        if (insideView())
        {
            playSFX(sfxTimeStopper);
        }
        xspeed = 0;
        goUp = 64;
    }
    
    if (goUp) // wait for a bit then go up
    {
        goUp -= 1;
        if (!goUp)
        {
            xspeed = -image_xscale;
        }
    }
    
    if (!fallen)
    {
        if (xspeed == 0)
        {
            with (target)
            {
                with (other)
                {
                    if (abs(other.y - y) &lt; 40)
                    {
                        fallen = true;
                        xspeed = 1.5 * image_xscale;
                    }
                }
            }
        }
    }
    else
    {
        if (((x &lt; xstart) &amp;&amp; image_xscale &gt; 0) || (x &gt; xstart &amp;&amp; image_xscale &lt; 0) || (sign(xspeed) != image_xscale &amp;&amp; xcoll != 0))
        {
            xspeed = 0;
            fallen = false;
        }
        else
        {
            xspeed += 0.1 * image_xscale;
            xspeed = min(7, max(xspeed, -7));
        }
    }
}
else if (dead)
{
    fallen = false;
    goUp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform_object(objCrusher, ev_other, ev_user11);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i = x + (-4 * (image_xscale == -1)) + (16 * (image_xscale == 1)) + (-16 * image_xscale);
var endit = 0;

while (i &gt; view_xview - 16 + 16)
{
    var s = 0;
    if (collision_point(i, y, objSolid, false, false))
    {
        while (collision_point(i + s, y, objSolid, false, false))
        {
            s += image_xscale;
            if ((s == 16) || (s == -16))
            {
                exit;
            }
            endit = 1;
        }
    }
    
    if (image_xscale == -1)
    {
        draw_sprite_part(sprSideCrusherChain, image_index, 0, 0, 16, 32,
            i + s - 15, y - 16);
    }
    else
    {
        draw_sprite_part(sprSideCrusherChain, image_index, 0, 0,
            16 - abs(s), 32, i + s, y - 16);
    }
    i -= 16 * image_xscale;
    
    if (endit)
    {
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead)
{
    exit;
}

// chain drawing
// a somewhat yucky solution, but i don't want to have to suffer through infinite while loop
// crashes constantly to get this to work ;_;
event_user(0);

drawSelf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
