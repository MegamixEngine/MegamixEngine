<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprOshitsuOsarettsu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 6;
healthpoints = 6;
contactDamage = 6; /// Holy $@#%
facePlayer = false;
facePlayerOnSpawn = false;
category = "grounded, shielded";

// Enemy specific code

// Creation Code
maxDist = 256 / 16; // How many 16x16 tiles it will advance before retrating

// Constants
retreatSpeed = 1;
chargeSpeed = 2.25;
deccel = 0.35;
stunTime = 20;
startTime = 30;

// Variables
timer = 0;
phase = 0;
stunTimer = 0;
isCharging = false;
canTurn = true;
animTimer = 0;
animSpeed = 0;
startXscale = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy AI
event_inherited();
if (entityCanStep())
{
    if (!ground)
    {
        xspeed = 0;
        animSpeed = 0.25;
    }
    else
    {
        var leftLimit = xstart;
        var rightLimit = xstart + maxDist * 16 * startXscale;
        if (startXscale == -1)
        {
            leftLimit = xstart + maxDist * 16 * startXscale;
            rightLimit = xstart;
        }
        if (xcoll != 0 || checkFall(32 * sign(xspeed)) || (x &gt; rightLimit) || ((x &lt; leftLimit))) //! checkSolid(xspeed + sign(xspeed) * abs(bbox_left - bbox_right) + sign(xspeed), 3)
        {
            if (phase == 0)
            {
                isCharging = !isCharging;
                timer = 0;
            }
            xspeed = 0;
            if (x &gt; rightLimit)
                x = rightLimit;
            else if (x &lt; leftLimit)
                x = leftLimit;
        }
        if (stunTimer != 0)
        {
            animSpeed = 0.35;
            var psign = sign(xspeed);
            xspeed += sign(xspeed) * -1 * deccel;
            if (psign != sign(xspeed))
                xspeed = 0;
            stunTimer -= 1;
            if (stunTimer &lt; 0 &amp;&amp; xspeed == 0)
            {
                stunTimer = 0;
                timer = 0;
            }
        }
        else
        {
            if (phase == 0 &amp;&amp; (timer &gt; startTime &amp;&amp; isCharging &amp;&amp; (place_meeting(x, y, objMegaman) || (instance_exists(target) &amp;&amp; sign(target.x - x) == -image_xscale))))
            {
                xspeed = 0;
                isCharging = false;
                timer = 0;
                canTurn = false;
            }
            timer += 1;
            
            if (phase == 0)
            {
                if (timer &gt; startTime)
                {
                    canTurn = true;
                    if (isCharging) // Charge
                    {
                        animSpeed = 0.4;
                        xspeed = chargeSpeed * image_xscale;
                    }
                    else // Retreat
                    {
                        animSpeed = 0.25;
                        xspeed = retreatSpeed * -1 * image_xscale;
                    }
                }
                else // Check if we should turn
                {
                    if (xspeed == 0 || !isCharging)
                        animSpeed = 0.25;
                    else if (isCharging)
                        animSpeed = 0.4;
                    if (canTurn &amp;&amp; xspeed == 0 &amp;&amp; instance_exists(target) &amp;&amp; sign(target.x - x) == -image_xscale)
                    {
                        phase = 1;
                        animTimer = 0;
                        timer = 0;
                        animSpeed = 0.15;
                    }
                }
            }
        }
    }
    
    // Animations
    
    animTimer += animSpeed;
    if (phase == 0)
    {
        if (floor(animTimer) &gt; 3)
            animTimer = 0;
        image_index = (stunTimer != 0) * 4 + floor(animTimer);
    }
    else if (phase == 1)
    {
        if (floor(animTimer) &gt; 2)
        {
            image_xscale *= -1;
            phase = 0;
            isCharging = false;
            timer = 999;
            image_index = 0;
            animTimer = 0;
        }
        else
            image_index = 8 + floor(animTimer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (startXscale == 0)
    startXscale = image_xscale;
image_xscale = startXscale;
phase = 0;
timer = 0;
stunTimer = 0;
isCharging = true;
canTurn = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.bbox_top &gt;= bbox_top + 12 &amp;&amp; sign(x - other.x) == image_xscale)
    exit;
if (other.bbox_top &gt;= bbox_top + 12)
{
    other.guardCancel = 1;
    timer = 0;
    stunTimer = stunTime;
    if (phase != 1)
    {
        xspeed = -image_xscale * chargeSpeed;
        if (!checkSolid(xspeed + sign(xspeed) * abs(bbox_left - bbox_right) + sign(xspeed), 3))
            xspeed = 0;
    }
}
else if (other.bbox_top &lt; bbox_top + 12 &amp;&amp; !(other.bbox_right &gt; bbox_left + 4 &amp;&amp; other.bbox_left &lt; bbox_right - 4))
{
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
instance_create(bbox_left + abs(bbox_left - bbox_right) / 2, bbox_top + abs(bbox_top - bbox_bottom) / 2, objBigExplosion);
stopSFX(sfxEnemyHit);
playSFX(sfxMM9Explosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
