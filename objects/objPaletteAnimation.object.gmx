<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPaletteAnimation</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A animator that influences the palette of the entire depth its assigned to. Requires DirectX9.

//@cc An array of colors.
colorsToReplace = makeArray(c_red,c_purple,c_orange);
//@cc An array *of* an array of colors to swap to.
colorsToApply[0] = makeArray(c_blue,c_navy,c_green);
//@cc How fast the colors should swap.

colorTimer = 32;

colorSets = -1;

colorSet = 0;

//@cc Display colors in top left for debugging.
debugDraw = false;

debugID = -1;

//@cc How to perform palette swapping. See comment below.
executionType = 0;
/*
For 1.9, we have two systems to perform palette swapping, each have their own
benefits and limits. For 2.0, this system will be replaced with a system that
can have both benefits without the downsides.

Type 0 can support a theoretically infinite amount of unique colors to swap out,
but it only works with background, not foreground.

Type 1 can support foreground, but is limited to the maximum colors of 
shadersetColorReplace.

The creation code variables used are otherwise the same.

*/
depthStart = 1000000;//NOTE: Adjust this for GMS2, it is technically outside the viable ranges. 

//Offset alarm0 if you need to offset the palette.

mask_index = sprMegaman;

paletteSurface = -1;

cleanupVersion = false;//Used to clean up shader setting caused by the object.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (cleanupVersion)
{
    exit;
}

if (surface_exists(paletteSurface))
{
    mm_surface_free(paletteSurface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colorSet = (colorSet+1) % colorSets;
alarm[0] = colorTimer;

/*#event step
//2.0 todo: Replace this shorthand and make it an inline function.
if (!executionType &amp;&amp; cleanupVersion)
{
    defer(ev_draw,ev_draw,depth-2,shaderReset,array_create(0),0);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (cleanupVersion)
{
    exit;
}


colorSets = array_length_1d(colorsToApply);

if (alarm[0] &lt; 0)
{
    alarm[0] = colorTimer;
}

if (debugID &lt; 0)
{
    for (var i = 0; i &lt; instance_number(object_index); i++)
    {
        with (instance_find(object_index,i))
        {
            debugID = i;
        }
    }
}
if (executionType)
{
    depth = depthStart+1;
    with (instance_create(x,y,object_index))
    {
        executionType = true;
        cleanupVersion = true;
        depth = other.depth-2;
    }
}
else
{
    depth = depthStart-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debugDraw)
{
    var cApply = colorsToApply[colorSet];
    for (var i = 0; i &lt; array_length_1d(cApply); i++)
    {
        
        draw_sprite_ext(sprDot,0,view_xview+i*4,view_yview+debugID*8,4,4,0,colorsToReplace[i],1);
        draw_sprite_ext(sprDot,0,view_xview+i*4,view_yview+4+debugID*8,4,4,0,cApply[i],1);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!executionType)
{
    exit;
}
if (cleanupVersion)
{
    exit;
}
var cApply = colorsToApply[colorSet];
var shaderList = array_create(0);
for (var i = 0; i &lt; array_length_1d(colorsToReplace); i++)
{
    shaderList[i*2] = colorsToReplace[i];
    shaderList[i*2+1] = cApply[i];
}
scriptExecuteNargs(shaderSetColorreplace,shaderList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (cleanupVersion)
{
    shader_reset();
    exit;
}
if (executionType)
{
    exit;
}
if (!surface_exists(paletteSurface))
{
    paletteSurface = mm_surface_create(surface_get_width(application_surface),surface_get_height(application_surface));
}

surface_set_target(paletteSurface);
draw_clear_alpha(c_black,0);

var cApply = colorsToApply[colorSet];
//TODO: Simplify your test case to black to white.
var shaderList = array_create(0);
shader_set_safe(shIsolateColor);
draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
for (var i = 0; i &lt; array_length_1d(colorsToReplace); i++)
{
    
    
    shader_set_uniform_f(shader_get_uniform(shIsolateColor, "isolation"),color_get_red(colorsToReplace[i]),color_get_green(colorsToReplace[i]),color_get_blue(colorsToReplace[i]),255);
    shader_set_uniform_f(shader_get_uniform(shIsolateColor, "replacement"),color_get_red(cApply[i]),color_get_green(cApply[i]),color_get_blue(cApply[i]),255);
    draw_surface(application_surface,0,0);
    
}
draw_set_blend_mode(bm_normal);
shader_reset();
surface_reset_target();

draw_surface_ext(paletteSurface,view_xview,view_yview,1/floor(global.screensize),1/floor(global.screensize),0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
