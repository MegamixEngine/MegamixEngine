<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTricastleCannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
blockCollision = false;
grav = 0;
canHit = false;
healthpointsStart = 9001;


animSpeed = 0;
animFrame = 0;
angle = 90;
newAngle = 90;
timer = 0;
image_speed = 0;
bullet = noone;
bx = -1;
by = -1;
bxspeed = 0;
respawn = 0;


shoot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(bullet))
{
    with (bullet)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (angle != newAngle) // Transition between angles
    {
        timer += 1;
        if (timer &gt; 10)
        {
            timer = 0;
            if (angle &lt; newAngle)
                angle += 45;
            else
                angle -= 45;
        }
        if (angle &gt; 180)
            angle = 180;
        if (angle &lt; 0)
            angle = 0;
    }
    if (shoot &amp;&amp; angle == newAngle) // if it's in the right it can shoot
    {
        animSpeed = 0.1;
        shoot = false;
    }
    animFrame += animSpeed;
    if (animFrame &gt; 2)
    {
        animFrame = 0;
        animSpeed = 0;
    }
    
    var of = 0;
    if (angle == 180)
        of = 12;
    else if (angle == 135)
        of = 9;
    else if (angle == 90)
        of = 6;
    else if (angle == 45)
        of = 3;
    image_index = of + floor(animFrame);
    if (animFrame == 2)
    {
        playSFX(sfxCannonShoot);
        bullet = instance_create(x, y, objEnemyBullet);
        bullet.sprite_index = sprTricastleCannonBall;
        bullet.image_speed = 0;
        bullet.target = self.target;
        with (bullet)
        {
            blockCollision = 0;
            yspeed = -1.5 - abs(sin(degtorad(other.angle))) * 2;
            if (sin(degtorad(other.angle) == 0))
                yspeed = 0;
            
            grav = 0.2;
            explodeOnContact = true;
            contactDamage = 4;
            var tx = 0;
            var ty = 0;
            if (instance_exists(target))
            {
                tx = target.x;
                ty = target.y;
            }
            x = other.bbox_left + abs(other.bbox_left - other.bbox_right) / 2 + cos(degtorad(other.angle)) * 16;
            y = other.y - sin(degtorad(other.angle)) * 16 - 4;
            xspeed = other.bxspeed;
        }
    }
    
    if (!instance_exists(bullet) &amp;&amp; bullet != noone)
    {
        if (angle != 90)
        {
            newAngle = 90;
            timer = 0;
        }
        bullet = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    angle = 90;
    newAngle = 90;
    image_index = 6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// aim and shoot
if (instance_exists(target))
{
    if (target.x &lt; bbox_right + 16 &amp;&amp; target.x &gt; bbox_left + 16)
        newAngle = 90;
    else if (target.x &lt;= bbox_left &amp;&amp; target.x &gt; bbox_left - 90)
        newAngle = 180;
    else if (target.x &lt;= bbox_left - 90)
        newAngle = 90 + 45;
    else if (target.x &gt; bbox_right &amp;&amp; target.x &lt; bbox_right + 90)
        newAngle = 0;
    else if (target.x &gt;= bbox_right + 90)
        newAngle = 45;
    
    timer = 0;
    shoot = true;
    var ysp = -1.5 - abs(sin(degtorad(newAngle))) * 2;
    bxspeed = xSpeedAim(bbox_left + abs(bbox_left - bbox_right) / 2 + cos(degtorad(newAngle)) * 16, y - sin(degtorad(newAngle)) * 16, target.x, target.y, ysp, 0.2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
