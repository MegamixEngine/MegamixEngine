<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objGlobalControl)
{
    fadeAlpha = 1;
}

timer = 0;
timerMax = 420;


catastrophicFailure = false;

global.failedShaderVibeCheck = false;

failureMessage = "";

event_user(0);//Checks for shaders and DLLs.

alarm[0] = 16;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Proceed to the next screen
//timer += 1;
if (failureMessage == "")
{
    if (FULL_BUILD)
        global.nextRoom = rmCapcomLogo;
    else
        global.nextRoom = rmTitleScreen;
    //playSFX(sfxImportantItem);
}
if (alarm[0] &lt; 0)
{
    if (global.keyPausePressed[0] || global.keyJumpPressed[0]
        || global.keyShootPressed[0] || timer &gt;= timerMax)
    {
        if (catastrophicFailure)
        {
            playSFX(sfxError);
        }
        else
        {
            playSFX(sfxMenuSelect);
            global.nextRoom = rmTitleScreen;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var shader_last = shZZZ_KEEP_AS_LASTSHADER;
var failedShaders = array_create(0);
for (var i = 0; i &lt;= shader_last; i++)
{
    if !shader_is_compiled(i)
    {
        arrayAppend(failedShaders,i);  
    }
}
if (array_length_1d(failedShaders) &gt; 0)
{
    global.failedShaderVibeCheck = true;
    global.screenShader = 0;
    failureMessage += "Shader ID's ";
    for (var i = 0; i &lt; array_length_1d(failedShaders); i++)
    {
        failureMessage += string(failedShaders[i]) + ", ";
        if (i%4 == 0 &amp;&amp; i &gt; 0)
        {
            failureMessage += "#";
        }
    }
    failureMessage += "could#not be compiled.#";
}
if (!file_exists("fmodex.dll"))
{
    catastrophicFailure = true;
    failureMessage += '"fmodex.dll" cannot be found.#'
}
if (!file_exists("GMFMODSimple.dll"))
{
    catastrophicFailure = true;
    failureMessage += '"GMFMODSimple.dll" cannot be found.#'
}
if (!file_exists("gme.dll"))
{
    catastrophicFailure = true;
    failureMessage += '"gme.dll" cannot be found.#'
}
if (!file_exists("gig.dll"))
{
    catastrophicFailure = true;
    failureMessage += '"gig.dll" cannot be found.#'
}
if (!file_exists("MECLMM.dll"))
{
    catastrophicFailure = true;
    failureMessage += '"MECLMM.dll" cannot be found.#'
}
if (MECLMM_GetVersion() &lt; 100)//This should be updated as compatibility with newer versions changes.
{//NOTE: If you modify your version outside active Megamix dev, make sure to also modify MECLMM_GetFork,
//and check for it here.
    printErr(MECLMM_GetVersion());
    catastrophicFailure = true;
    failureMessage += "MECLMM version is incompatible.#"
}

if (catastrophicFailure)
{
    failureMessage += "The game cannot be played.#Please ensure the above DLLs#are in the game's root directory.";
}
else
{
    if (failureMessage != "")
    {
        failureMessage += "#The game can be played, however,#certain visual effects#may not work on this machine.#Custom costume support#may also be limited.#Install DirectX 9#if not installed."
    }
}
if (failureMessage != "")
{
    if (catastrophicFailure)
    {
        playSFX(sfxAlarm);
    }
    else
    {
        playSFX(sfxError);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.fontSmall);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_sprite_ext(sprWilyCastle,1,0,0,1,1,0,c_dkgray,1);
draw_text(round(room_width / 2), round(room_height / 2), failureMessage);

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.font);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
