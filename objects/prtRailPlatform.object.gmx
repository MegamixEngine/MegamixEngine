<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSolid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

isSolid = 2;

startingDirection = -1;

grav = 0;
blockCollision = 0;
bubbleTimer = -1;

respawnRange = -1;
despawnRange = -1;

mySpeed = 1;

init = 1;
dir = "none"; // left, up, down, right
startDir = "none";

// distance from the x and y position to check by
xOffset = 8;
yOffset = 8;

// Helpful variable to use in childs
lastRail = noone;
prevRail = noone;
bumped = false;

fallMomentum = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xsp = xspeed;
var ysp = yspeed;
xspeed = 0;
yspeed = 0;
event_inherited();
xspeed = xsp;
yspeed = ysp;
if (init)
{
    lastRail = collision_point(x + xOffset, y + yOffset, prtRail, true, true);
    if (dir == "none"
        &amp;&amp; instance_exists(lastRail))
    {
        // by default, the platform goes vertically on corner tiles
        switch (lastRail.dir)
        {
            case 0:
                dir = "right";
                break;
            case 1:
            case 3:
            case 5:
                dir = "up";
                break;
            case 2:
            case 4:
                dir = "down";
                break;
        }
        if(startDir == "none")
            startDir = dir;
        init = false;
    }
}

if (entityCanStep())
{
    bumped = false;
    event_user(0);
    
    if (dir == "none")
    {
        dir = "fall";
    }
    
    if (dir != "fall")
    {
        xspeed = 0;
        yspeed = 0;
    }
    if (instance_exists(lastRail))
    {
        switch (lastRail.dir)
        {
            case 0: // horizontal 
                if (dir == "fall")
                {
                    if (xspeed &gt;= 0)
                        dir = "right";
                    else
                        dir = "left";
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                }
                break;
            case 1: // vertical 
                if (dir == "fall")
                {
                    if (yspeed &gt;= 0)
                        dir = "down";
                    else
                        dir = "up";
                    xspeed = (lastRail.x + 8 - xOffset) - (x);
                }
                break;
            case 2: // top left 
                if (x + xOffset &lt;= lastRail.x + 8
                    &amp;&amp; dir == "left")
                {
                    dir = "down";
                    xspeed = (lastRail.x + 8 - xOffset) - (x);
                }
                if (y + yOffset &lt;= lastRail.y + 8
                    &amp;&amp; dir == "up")
                {
                    dir = "right";
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                }
                if (dir == "fall"
                    &amp;&amp; y + yOffset &gt;= lastRail.y + 8)
                {
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                    if (xspeed &gt;= 0)
                        dir = "right";
                    else
                        dir = "left";
                }
                break;
            case 3: // bottom left 
                if (x + xOffset &lt;= lastRail.x + 8
                    &amp;&amp; dir == "left")
                {
                    dir = "up";
                    xspeed = (lastRail.x + 8 - xOffset) - (x);
                }
                if (y + yOffset &gt;= lastRail.y + 8
                    &amp;&amp; dir == "down")
                {
                    dir = "right";
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                }
                if (dir == "fall"
                    &amp;&amp; y + yOffset &gt;= lastRail.y + 8)
                {
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                    if (xspeed &gt;= 0)
                        dir = "right";
                    else
                        dir = "left";
                }
                break;
            case 4: // top right 
                if (x + xOffset &gt;= lastRail.x + 8
                    &amp;&amp; dir == "right")
                {
                    dir = "down";
                    xspeed = (lastRail.x + 8) - (x + xOffset);
                }
                else if (y + yOffset &lt;= lastRail.y + 8
                    &amp;&amp; dir == "up")
                {
                    dir = "left";
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                }
                else if (dir == "fall"
                    &amp;&amp; y + yOffset &gt;= lastRail.y + 8)
                {
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                    if (xspeed &gt; 0)
                        dir = "right";
                    else
                        dir = "left";
                }
                break;
            case 5: // bottom right 
                if (x + xOffset &gt;= lastRail.x + 8
                    &amp;&amp; dir == "right")
                {
                    dir = "up";
                    xspeed = (lastRail.x + 8 - xOffset) - (x);
                }
                if (y + yOffset &gt;= lastRail.y + 8
                    &amp;&amp; dir == "down")
                {
                    dir = "left";
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                }
                if (dir == "fall"
                    &amp;&amp; y + yOffset &gt;= lastRail.y + 8)
                {
                    yspeed = (lastRail.y + 8 - yOffset) - (y);
                    if (xspeed &gt; 0)
                        dir = "right";
                    else
                        dir = "left";
                }
                break;
            case 6: // bumper 
                if (lastRail != prevRail)
                    bumped = true;
                else
                    break;
                if (dir == "fall")
                {
                    x -= xspeed;
                    y -= yspeed;
                    xspeed = -xspeed;
                    yspeed = -yspeed;
                }
                else
                {
                    var _X = x;
                    var _Y = y;
                    
                    if (dir == "left"
                        || dir == "right")
                    {
                        if (x + xOffset &gt;= lastRail.x + 8)
                        {
                            dir = "right";
                        }
                        else
                        {
                            dir = "left";
                        }
                    }
                    else
                    {
                        if (y + yOffset &gt;= lastRail.y + 8)
                        {
                            dir = "down";
                        }
                        else
                        {
                            dir = "up";
                        }
                    }
                }
                break;
        }
    }
    else
        dir = "fall";
    
    
    // direction to move
    switch (dir)
    {
        case "right":
            xspeed += mySpeed;
            
            // yspeed = 0;
            break;
        case "left":
            xspeed += -mySpeed;
            
            // yspeed = 0;
            break;
        case "down": // xspeed = 0; 
            yspeed += mySpeed;
            break;
        case "up": // xspeed = 0; 
            yspeed += -mySpeed;
            break;
        case "fall":
            yspeed += fallMomentum;
            break;
    }
    prevRail = lastRail;
    xprevious = x;
    yprevious = y;
    
    if (blockCollision)
    {
        generalCollision(1);
    }
    else
    {
        x += xspeed;
        y += yspeed;
    }
    
    entityPlatform();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
grav = 0;
dir = startDir;
prevRail = noone;
lastRail = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastRail = noone;

var msk = mask_index;
var rexsc = image_xscale;
var reysc = image_yscale;
mask_index = sprDot;

image_xscale = 1;
image_yscale = 1;

/*
image_yscale=1.0/sprite_get_height(sprite_index);
image_xscale=1.0/sprite_get_width(sprite_index);
*/

with (prtRail)
{
    var quit = false;
    with (other)
    {
        if (place_meeting(round(x + xOffset), round(y + yOffset), other) || place_meeting(round(xprevious + xOffset), round(yprevious + yOffset), other))
        {
            lastRail = other.id;
            quit = true;
        }
    }
    if (quit)
        break;
}

mask_index = msk;
image_xscale = rexsc;
image_yscale = reysc;

if (lastRail == noone)
{
    var left = min(x + xOffset, xprevious + xOffset);
    var right = max(x + xOffset, xprevious + xOffset);
    var top = min(y + yOffset, yprevious + yOffset);
    var bottom = max(y + yOffset, yprevious + yOffset);
    lastRail = collision_rectangle(left, top, right, bottom, prtRail, true, true);
    if (lastRail == noone)
        lastRail = collision_line(x + xOffset, y + yOffset, xprevious + xOffset, yprevious + yOffset, prtRail, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
