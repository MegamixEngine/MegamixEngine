<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMonking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objMonking</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This enemy will fly up until it reaches a platform, after some time or if megaman gets close,
// it will jump on the platform and jump towards megaman
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "nature, primate";

blockCollision = 0;
grav = 0;

facePlayerOnSpawn = true;

// Enemy specific code
hasPopped = false;
onBlock = false;
animTimer = 0;
hangCountdown = 120;

jumpTimer = 0;

despawnRange = 48;

contactStart = contactDamage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(xcoll!=0)
{
    xspeed=xcoll;
}

if (entityCanStep())
{
    // Appears
    if (!hasPopped &amp;&amp; instance_exists(target) &amp;&amp; collision_rectangle(x - 64, y - 224, x + 64, y + 224, target, false, true))
    {
        calibrateDirection();
        hasPopped = true;
        image_index = 0;
        yspeed = -3;
        canDamage = true;
        canHit = true;
    }
    else
    {
        if (!onBlock &amp;&amp; checkSolid(0, -7) /* collision_rectangle(x, y - 8, x, y - 7, objSolid,false, true )*/ &amp;&amp; hangCountdown == 120)
        {
            onBlock = true;
            yspeed = 0;
            sprite_index = sprMonkingSwing;
            image_speed = 0.1;
        }
    }
    
    // Swing on block
    if (onBlock)
    {
        if (hangCountdown)
        {
            hangCountdown -= 1;
        }
        if (hangCountdown &lt;= 0)
        {
            calibrateDirection();
            animTimer = 0;
            sprite_index = sprMonking;
            image_speed = 0;
            image_index = 0;
            onBlock = false;
            grav = 0.25;
            xspeed = image_xscale;
            yspeed = -6;
        }
    }
    
    if (!blockCollision)
    {
        if (hangCountdown &lt;= 0 &amp;&amp; !onBlock &amp;&amp; yspeed &gt; 0)
        {
            blockCollision = 1;
        }
    }
    else
    {
        if (ground)
        {
            if (yspeed == 0)
            {
                xspeed = 0;
                image_index = 1;
            }
            
            
            if (sprite_index != sprMonking)
            {
                sprite_index = sprMonking;
                image_speed = 0;
            }
            
            
            jumpTimer += 1;
            if (jumpTimer &gt;= 60)
            {
                calibrateDirection();
                jumpTimer = 0;
                yspeed = -4;
                xspeed = image_xscale;
            }
        }
        else
        {
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();
hasPopped = false;
onBlock = false;
hangCountdown = 120;
blockCollision = false;
jumpTimer = 0;
animTimer = 0;
grav = 0;
image_index = 0;
sprite_index = sprMonking;
image_speed = 0;
canHit = false;
canDamage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hasPopped)
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
