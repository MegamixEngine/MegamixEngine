<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRingManPlatformIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>objTopSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// To use just stretch the object

event_inherited();

blockCollision = 0;
image_speed = 0.45;
active = false;
startLen = image_xscale;
imgIndex = 0;

//@cc
mySpeed = 2;

//@cc
platformSprite = noone;

if (startLen &gt; 0)
{
    platformSprite = sprRingManPlatformBridge;
}
else
{
    platformSprite = sprRingManPlatformRainbow;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.frozen &amp;&amp; !global.timeStopped)
{
    imgIndex += image_speed;
    
    // if a player lands on the platform, activate
    with (objMegaman)
    {
        if (place_meeting(x, y + gravDir, other)
            &amp;&amp; !place_meeting(x, y, other))
        {
            other.active = true;
        }
    }
    
    // shrink and grow the platform when active
    if (active)
    {
        // decrease size
        if (image_xscale * sign(startLen) &gt; -startLen * sign(startLen))
        {
            image_xscale -= (1 / 16) * mySpeed * sign(startLen);
        }
        
        // swich sides when heading into the negative
        if (sign(image_xscale) != sign(startLen))
        {
            x = xstart + (startLen * 16);
        }
        
        // reset
        if (image_xscale * sign(startLen) &lt;= -startLen * sign(startLen))
        {
            x = xstart;
            active = false;
            image_xscale = startLen;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_xscale != 0)
{
    var posOffset = max(sign(image_xscale), 0);
    var negOffset = min(sign(image_xscale), 0);
    
    // body
    for (var i = -negOffset; i &lt; floor(abs(image_xscale)) - negOffset; i++)
    {
        draw_sprite(platformSprite, floor(imgIndex), floor(x + (i * 16) * sign(image_xscale)), floor(y));
    }
    
    // tail
    var tileOffset = abs(image_xscale mod 1);
    draw_sprite_part(platformSprite, floor(imgIndex), floor((16 * (1 - tileOffset)) * abs(negOffset)), 0, floor(16 * tileOffset), 16, floor(x + floor(image_xscale) * 16 - (16 - tileOffset * 16) * negOffset), floor(y));
    
    // sparkle tail for rainbow roa- bridge
    if (platformSprite == sprRingManPlatformRainbow &amp;&amp; image_xscale != startLen)
    {
        draw_sprite_ext(sprRingManPlatformTrail, floor(imgIndex), floor(x + image_xscale * 16), floor(y), sign(image_xscale), image_yscale, image_angle, image_blend, image_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
