<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFakeMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
contactDamage = 4;

introType = 0;
attackTimer = 0;
walkSpd = 1.8;
highJumpSpd = -6.75;
backJumpSpd = -1.8;
longJumpSpd = 3.75;
turnTimer = 12;
phase = 0;

imgIndex = 8;
imgSpd = 0.1375;

// Healthbar color
manualColors = true;
healthBarPrimaryColor[1] = make_colour_rgb(32, 56, 232);
healthBarSecondaryColor[1] = make_colour_rgb(88, 144, 248);

// Music
music = "MM9/16_Boss.mid";
musicType = "MIDI";
var sf = choose("","_OST");
musicTrackNumber = "MM9/MM9" + sf + ".sf2";
if (sf == "")
{
    musicVolume = .8;
}

// Damage Table
///DAMAGE TABLE - MAGMML3
enemyDamageValue(objBusterShot,1);
enemyDamageValue(objBusterShotHalfCharged,1);
enemyDamageValue(objBusterShotCharged,3);
enemyDamageValue(objBusterShotHalfChargedProto,1);
enemyDamageValue(objBusterShotChargedProto,3);

enemyDamageValue(objSparkChaser,1);
enemyDamageValue(objLaserTrident,1);
enemyDamageValue(objWaterShield,3);
enemyDamageValue(objTornadoBlow,1);
enemyDamageValue(objThunderBeam,1);
enemyDamageValue(objMagneticShockwave,1);
enemyDamageValue(objIceWall,4);
enemyDamageValue(objBreakDash,1);

reflectedDamage = 1;
if (reflectedDamage &gt; -1) 
enemyDamageValue(prtEnemyProjectile,reflectedDamage);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 3);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 3);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 3);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objWaterWave, 1);
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillSpike, 1);
enemyDamageValue(objChillSpikeLanded, 3);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 3);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    if (xcoll != 0)
        xspeed = xcoll;
    if (startIntro)
    {
        y = view_yview - 24;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
        grav = 0.25;
        blockCollision = false;
    }
    else if (isIntro)
    {
        // custom intro:
        if (y &gt; ystart)
        {
            y = ystart;
            blockCollision = true;
            imgIndex = 17;
        }
        else if (ground)
        {
            attackTimer++;
            if (attackTimer &lt; 12 || (attackTimer &gt; 32 &amp;&amp; attackTimer &lt;= 50))
            {
                imgIndex+= 0.5;
                if (imgIndex &lt; 15 || imgIndex &gt;= 18)
                    imgIndex = 15;
            }
            if (attackTimer == 12 || attackTimer == 51)
                imgIndex = 0;
            if (attackTimer == 84 || attackTimer == 92 || attackTimer == 108)
                imgIndex++;
            if (attackTimer == 108)
            {
                canFillHealthBar = true;
                isIntro = false;
                attackTimer = 0;
            }
        }
    }
}
if (entityCanStep())
{   
    if (isFight)
    {
        if (phase &gt; 0)
            attackTimer++;
        if (instance_exists(target))
            tx = target.x;
        switch (phase)
        {
            case 0: // runnin'

                // jut forward from intro pose so it looks normal
                if (imgIndex == 3)
                    x+= 4 * image_xscale;    
                
                //animation
                imgIndex+= imgSpd;
                if (imgIndex &lt; 18 || imgIndex &gt;= 22)
                    imgIndex = 18;

                // running and turning behavior
                if (checkSolid(4 * sign(xspeed), 0)
                &amp;&amp; xspeed != 0)
                {
                    image_xscale *= -1;
                    turnTimer = 32;
                }   
                if (tx &gt; x &amp;&amp; image_xscale &lt; 0 ||
                tx &lt; x &amp;&amp; image_xscale &gt; 0)
                {
                    turnTimer--;
                    if (!turnTimer)
                    {
                        image_xscale *= -1;
                        turnTimer = 12;
                    }
                }
                else if (turnTimer &lt; 12 ||
                (tx &gt;= x &amp;&amp; image_xscale &gt; 0) ||
                (tx &lt;= x &amp;&amp; image_xscale &lt; 0))
                    turnTimer = 12;
                if (ground)
                {
                    xspeed = walkSpd * image_xscale;
                    // next phase if player presses shoot
                    if (instance_exists(target)) &amp;&amp;
                    (global.keyShootPressed[target.playerID])
                    {
                        calibrateDirection();
                        attackTimer = 0;
                        imgIndex = 8;
                        phase = 1;
                        xspeed = backJumpSpd * image_xscale;
                        yspeed = highJumpSpd * image_yscale;
                    }
                }
                else
                {
                    xspeed = 0;
                    imgIndex = 8;
                }
                break;
            case 1: // bullets be like
                if (attackTimer == 48 || attackTimer == 56)
                {
                    playSFX(sfxFakeManShoot);
                    r = instance_create(x + (27 - 8 * (attackTimer == 56)) * image_xscale,
                    y + (8 * (attackTimer == 56)) * image_yscale, objEnemyBullet);
                    r.xspeed = 5 * image_xscale;
                }
                if (attackTimer &gt;= 48)
                {
                    imgIndex+= 0.5;
                    if (imgIndex &lt; 12 || imgIndex &gt;= 15)
                        imgIndex = 12;
                }
                if (sign(ycoll) == sign(image_yscale))
                {
                    attackTimer = 0;
                    imgIndex = 0;
                    phase = 2;
                    xspeed = 0;
                }
                break;
            case 2: // jumpin'
                if (attackTimer == 20)
                    imgIndex = 1;
                if (attackTimer == 32)
                {
                    imgIndex = 8;
                    xspeed = longJumpSpd * image_xscale;
                    yspeed = highJumpSpd * image_yscale;
                }
                if (attackTimer == 40 || attackTimer == 80)
                {
                    var ySpd, xSpd;
                    if (abs(tx - x) &lt;= 40)
                    {
                        ySpd = 4;
                        xSpd = 1;
                    }
                    else
                    {
                        ySpd = 1;
                        xSpd = 4;
                    }
                    playSFX(sfxFakeManShoot);
                    r = instance_create(x + 19 * image_xscale,
                    y + 14 * image_yscale, objEnemyBullet);
                    r.xspeed = xSpd * image_xscale;
                    r.yspeed = ySpd * image_yscale;
                }
                if (attackTimer &gt;= 40)
                {
                    imgIndex+= 0.5;
                    if (imgIndex &lt; 9 || imgIndex &gt;= 12)
                        imgIndex = 9;
                }
                if (attackTimer == 68)
                    image_xscale *= -1;
                if (sign(ycoll) == sign(image_yscale))
                {
                    xspeed = 0;
                    imgIndex = 0;
                    phase = 3;
                    attackTimer = 0;
                }
                break;
            case 3: // shootin'
                if (attackTimer == 20)
                    imgIndex = 1;
                if (attackTimer == 32)
                    yspeed = highJumpSpd;
                if (attackTimer &gt;= 32)
                {
                    imgIndex+= 0.5;
                    if (imgIndex &lt; 12 || imgIndex &gt;= 15)
                        imgIndex = 12;
                }
                if (attackTimer == 32 || attackTimer == 36)
                {
                    playSFX(sfxFakeManShoot);
                    r = instance_create(x + (27 - 8 * (attackTimer == 32)) * image_xscale,
                    y - (30 * attackTimer == 36) * image_yscale, objEnemyBullet);
                    r.xspeed = 5 * image_xscale;
                }
                if (sign(ycoll) == sign(image_yscale))
                {
                    playSFX(sfxFakeManReload);
                    imgIndex = 4;
                    phase = 4;
                    attackTimer = 0;
                }
                break;
            case 4: // RELOAD
                if (attackTimer == 14)
                    imgIndex = 5;
                if (attackTimer &gt;= 22 &amp;&amp; attackTimer &lt; 34)
                {
                    imgIndex+= 0.5;
                    if (imgIndex &lt; 5 || imgIndex &gt;= 8)
                        imgIndex = 5;
                }
                if (attackTimer == 38)
                    imgIndex = 0;
                if (attackTimer == 50)
                {
                    phase = 0;
                    attackTimer = 0;
                }
                break;
        }
        
    }
    image_index = floor(imgIndex);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

stopSFX(sfxFakeManShoot);
stopSFX(sfxFakeManReload);
with (prtEnemyProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
