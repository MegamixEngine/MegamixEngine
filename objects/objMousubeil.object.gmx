<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMousubeil</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// dir = 1/-1 (1 = ground (default); -1 = ceiling)
// col = &lt;number&gt; (0 = orange (default); 1 = grey (Game Gear colours))
// normalSpd = &lt;number&gt; - Sets Mousubeil's speed

event_inherited();

respawn = true;

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 3;
category = "grounded, nature";

facePlayerOnSpawn = true;

// Enemy specific code
calibrated = 0;

dir = 1;
init = 1;

phase = 0;
boost = false;
cooldown = -1;
imgIndex = 0;

col = 0;

normalSpd = 1.75;
boostSpd = 1.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    if (dir == 1)
    {
        image_yscale = 1;
    }
    else
    {
        image_yscale = -1;
        y += 16;
        ystart += 16;
    }
}

event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            calibrateDirection();
            xspeed = normalSpd * image_xscale;
            phase = 1;
            break;
        // stuff (note: I use image_yscale to add/subtract values in a way that changes the value in the right direction depending on if it's on the ground or ceiling)
        case 1:
            if ((xspeed == 0 &amp;&amp; cooldown == -1
                || !checkSolid((sprite_get_width(sprite_index) / 2) * image_xscale, image_yscale * 2, 1)) &amp;&amp; cooldown == -1)
            {
                cooldown = 24;
                xspeed = 0;
            }
            
            if (cooldown &gt; 0)
            {
                cooldown -= 1;
            }
            
            if (cooldown == 0)
            {
                image_xscale = -image_xscale;
                xspeed = normalSpd * image_xscale;
                cooldown = -1;
            }
    }
    
    imgIndex += 0.20;
    if (imgIndex mod 4 == 0)
    {
        imgIndex = 0;
    }
}
else if (dead)
{
    phase = 0;
    cooldown = -1;
    imgIndex = 0;
}
image_index = imgIndex + (4 * col);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objHornetChaser, 3);
specialDamageValue(objJewelSatellite, 3);
specialDamageValue(objGrabBuster, 3);
specialDamageValue(objTripleBlade, 1);
specialDamageValue(objWheelCutter, 2);
specialDamageValue(objSlashClaw, 2);
specialDamageValue(objSakugarne, 2);
specialDamageValue(objSuperArrow, 1);
specialDamageValue(objWireAdapter, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
