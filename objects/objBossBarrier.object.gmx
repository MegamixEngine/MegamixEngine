<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMiniBossBarrier</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This object will start looking for minibosses/bosses after a delay, once it detects none it will destroy itself
// and the solids underneath it

event_inherited();

//@cc is solid?
isSolid = true;

//@cc how long until it starts looking for minibosses/bosses
delay = 32;

active = 1;

faction = 6;

contactDamage = 0;
canHit = false;

respawnRange = -1;
despawnRange = -1;

inWater = -1;

grav = 0;
blockCollision = 0;
dieToSpikes = 0;

fnsolid = 1;
if(place_meeting(x,y,objSpike))
{
    isSolid=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !instance_exists(objSectionSwitcher))
{
    var bossThere = 0;
    
    if (instance_exists(prtBoss) || instance_exists(prtMiniBoss))
    {
        bossThere = 1;
    }
    
    if (active)
    {
        if (bossThere)
        {
            delay = 24;
        }
        else if (insideView())
        {
            delay -= 1;
            if (!delay)
            {
                event_user(0);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; image_xscale; i += 1) // X
{
    for (var j = 0; j &lt; image_yscale; j += 1) // Y
    {
        if (tile_layer_find(1000000, x + i * 16, y + j * 16))
        {
            tile_layer_delete_at(1000000, x + i * 16, y + j * 16);
            instance_create(x + 8 + i * 16, y + 8 + j * 16, objExplosion);
        }
        var sld = collision_rectangle(bbox_left + 8, bbox_top + 8, bbox_right - 8,
            bbox_bottom - 8, objSolid, 1, 1);
        while (sld!=noone) // Now delete it
        {
            with (sld)
            {
                if (image_xscale &gt; 1 || image_yscale &gt; 1)
                {
                    splitSolid();
                }
                else
                {
                    instance_destroy();
                }
            }
            sld = collision_rectangle(bbox_left + 8, bbox_top + 8, bbox_right - 8,
            bbox_bottom - 8, objSolid, 1, 1);
        }
        var bd = collision_rectangle(bbox_left + 8, bbox_top + 8, bbox_right - 8,
            bbox_bottom - 8, prtBossDoor, 1, 1);
        while (bd!=noone) // Now delete the boss door
        {
            with (bd)
            {
                instance_destroy();
            }
            bd = collision_rectangle(bbox_left + 8, bbox_top + 8, bbox_right - 8,
            bbox_bottom - 8, prtBossDoor, 1, 1);
        }
    }
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
