<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChibee</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Little bees that fly towards the player, these are usually dropped by have su bee
event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "cluster, flying, nature";

blockCollision = 0;
grav = 0;

facePlayer = true;

// Enemy specific code
phase = 0;
startWait = 20;
startWaitTimer = startWait;
rotateChange = 3;
spd = 1.15;

image_speed = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // since we're not using xspeed and yspeed, this is just for mirroring the sprite. Becauase I'm lazy  xP
    if (instance_exists(target))
    {
        switch (phase)
        {
            // spawn grace period
            case 0:
                startWaitTimer -= 1;
                if (startWaitTimer &lt;= 0)
                {
                    phase = 1;
                    speed = spd;
                    direction = point_direction(x, y, target.x, target.y);
                }
                break;
            
            // chase megaman
            case 1: /* this is kind of confusing, but basically we're seeing if the player is more or less than a certain angle away from where we're
                currently pointing, and if they are, increase/decrease our angle by that distance */
            /* This is a special kind of error handler that prevents chibee from moving completely straight and unable to fly towards the player
                if the player moves directly straight against the direction chibee is flying */ 
                var pxd = target.x - x;
                var pyd = target.y - y;
                var pangle = 0;
                if (pxd != 0)
                {
                    pangle = point_direction(x, y, target.x, target.y);
                }
                else
                {
                    if (pyd &gt;= 0)
                    {
                        pangle = 270;
                    }
                    if (pyd &lt; 0)
                    {
                        pangle = 90;
                    }
                }
                
                // and now that we have the angle the player is facing, we take the difference of the angles
                var change = direction - pangle;
                
                // loop degree check, so the angle isn't above 360 or below 0
                if (change &gt; 360)
                {
                    change -= 360;
                }
                else if (change &lt; 0)
                {
                    change += 360;
                }
                
                /* this is interesting. So, by subtracting it by 180 it sort of aligns change to be how far away our angle to megaman is from our own angle
                we're pointing at as if our own angle is centered at 0 */
                change -= 180;
                
                /* and now, we just check how off mega man is, and do stuff accordingly (and also I reuse change to become the distance we change the
                angle )*/
                if (change &gt; rotateChange)
                {
                    change = rotateChange;
                }
                if (change &lt; -rotateChange)
                {
                    change = -rotateChange;
                }
                direction += change;
                break;
        }
    }
}
else if (dead)
{
    phase = 0;
    startWaitTimer = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
