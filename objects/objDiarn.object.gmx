<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDiarn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();
respawn = true;
healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;
blockCollision = 0;
grav = 0;
category = "floating";

// Enemy specific code
phase = 0;
phaseTimer = 0;
doShine = true;

// @cc color of the enemy. 0 = green, 1 = pink
col = 0;

imgOffset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
target = objMegaman;

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // move towards player for 1 second 
            if (phaseTimer == 1)
            {
                if (instance_exists(target))
                {
                    var dir = point_direction(x, y, target.x, target.y);
                    xspeed = cos(degtorad(dir)) * 1.5;
                    yspeed = -sin(degtorad(dir)) * 1.5;
                }
            }
            if (phaseTimer &gt; 30)
            {
                xspeed = 0;
                yspeed = 0;
                phase = 1;
                phaseTimer = 0;
                doShine = false;
                imgOffset = 5;
                calibrateDirection();
            }
            break;
        case 1: // animate open for 0.5 seconds
        // image_speed = 10 / 30; 
            if (imgOffset &lt; 9)
                imgOffset += 0.2; //(1 / 3);
            
            if (phaseTimer &gt; 30)
            {
                phase = 2;
                phaseTimer = 0;
            }
            break;
        case 2: // shoot bullet at player 
            imgOffset = 10;
            if (instance_exists(target) &amp;&amp; phaseTimer == 1)
            {
                var bullet = instance_create(x, y + 4, objEnemyBullet);
                playSFX(sfxEnemyShootClassic);
                var dir = point_direction(x, y, target.x, target.y);
                bullet.xspeed = cos(degtorad(dir)) * 2;
                bullet.yspeed = -sin(degtorad(dir)) * 2;
            }
            else
            {
                phase = 3;
                phaseTimer = 0;
            }
            if (phaseTimer &gt; 2)
            {
                phase = 3;
                phaseTimer = 0;
            }
            break;
        case 3: // wait around 0.4 seconds and set animation back from shoot frame 
            if (phaseTimer == 6)
            {
                imgOffset = 9;
            }
            if (phaseTimer &gt; 20)
            {
                phase = 4;
                phaseTimer = 0;
            }
            break;
        case 4: // animate closed 
            if (phaseTimer == 2)
            {
                imgOffset = 5;
            }
            if (phaseTimer == 4)
            {
                imgOffset = 0;
            }
            /*if (phaseTimer == 6)
            {
                imgOffset = 0;
            }*/
            if (phaseTimer &gt; 36)
            {
                phase = 0;
                phaseTimer = 0;
            }
            break;
    }
    if (doShine) // Shine when reflecting shots
    {
        imgOffset += 0.2;
        if (imgOffset &gt;= 5)
        {
            imgOffset = 0;
            doShine = false;
        }
    }
    phaseTimer += 1;
}
else if (dead)
{
    phase = 0;
    phaseTimer = 0;
    imgOffset = 0;
    doShine = false;
}

image_index = imgOffset + (col * 11);

// it's ya boi, MiniMacro/Quack Man(TM)!
// many thanks to NaOH for helping me make my first enemy from scratch
// it was fun and i learned a lot but i couldn't do any of it without her :D
//- MiniMacro, 1:00 AM, 27 March 2018

// QUACK YOU FORGOT THE PINK DIARN COLOR
//- SnoruntPyro, 7:53 PM, 6 July 2018

// You both forgot the shine effect when reflecting shots
//- Spin Attaxx, 8:10 PM BST, 27 October 2021

// The great error has now been corrected in MaGMML3, three years later
//- Spin Attaxx, 5:44 AM GMT, 19 February 2022
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objJewelSatellite, 0); // jewels are immune to jewels yeah

specialDamageValue(objGrabBuster, 2);
specialDamageValue(objTripleBlade, 2);
specialDamageValue(objWheelCutter, 2);
specialDamageValue(objSlashClaw, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (imgOffset &lt;= 4)
{
    other.guardCancel = 1;
    doShine = true; // Trigger reflect shine
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
