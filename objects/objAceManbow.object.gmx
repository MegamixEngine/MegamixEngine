<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAceManbow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A fish that moves in a slow sine wave pattern, periodically shooting bullets in 8 directions.
/// It's effective as a standalone threat, but it also works well in challenges where the focus is more on platforming than combat.
/// Can be used in or out of water.

// Creation code (all optional):
// image_yscale = 1 or -1 //(Use editor for this!!) // if -1, Ace Manbow will go up instead of down at beginning.
// moveDistance = &lt;number&gt; // The distance in which Ace Manbow moves before changing direction. Default is 80 pixels. Should be divisible by spd.
// spd = &lt;number&gt; //How fast Ace Manbow moves. Default is 0.5. Number should be divisible by 0.03125
// cooldownMax = &lt;number&gt; // How quickly Ace Manbow fires its spread. Default is 128.

event_inherited();

respawn = true;
healthpointsStart = 4;
healthpoints = healthpointsStart;
contactDamage = 3;
blockCollision = 0;
category = "aquatic, nature";
bubbleTimer = -1;

grav = 0;
facePlayerOnSpawn = true;

// Enemy specific code
spd = 0.5;
delay = -1;

storeSpd = 0;
storeYScale = image_yscale;

moveTimer = 0;
moveDistance = 80;
yspeed = 0.5;
cooldownTimer = 0;
cooldownMax = 128;
col = 0;

explosionSprite = sprExplosionWonderswan;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    // this animates Ace Manbow, who changes frames at certain times, such as before shooting.
    cooldownTimer += 1;
    if ((cooldownTimer &gt; round(cooldownMax / 2) - 16 &amp;&amp; cooldownTimer &lt; round(cooldownMax / 4) - 16) || (cooldownTimer &gt; round(cooldownMax - 16)))
        image_index = 1;
    else
        image_index = 0;
    
    // fire bullet spread
    if (cooldownTimer == cooldownMax)
    {
        cooldownTimer = 0;
        for (var i = 0; i &lt; 8; i += 1)
        {
            var inst;
            inst = instance_create(x, y, objMM1MetBullet);
            inst.dir = 45 * i;
            inst.xscale = image_xscale;
            inst.sprite_index = sprEnemyBulletMM5;
            playSFX(sfxEnemyShootClassic);
        }
    }
    
    // move Ace Manbow
    yspeed = spd * image_yscale;
    
    // count how far Manbow has moved.
    if (moveTimer &lt; moveDistance)
    {
        moveTimer += abs(yspeed);
        
        // if the user has changed the movespeed, this stores the new speed rather than the default one.
        if (storeSpd == 0)
            storeSpd = abs(spd);
    }
    
    // if Ace Manbow has reached its desired move destination, begin turnaround sequence
    if (moveTimer &gt;= moveDistance)
    {
        // during entire sequence, ace manbow moves forward.
        xspeed = 0.5 * image_xscale;
        
        // if there is no delay, change Ace Manbow's vertical speed.
        if (delay &lt;= 0)
            spd -= 0.03125;
        
        // when Ace Manbow is at speed 0, it only moves forwards, and does this for 4 pixels worth of movement.
        if (spd &lt;= 0 &amp;&amp; delay == -1)
        {
            delay = 8;
            spd = 0;
        }
        if (delay &gt; 0)
            delay -= 1;
        
        // if speed is reverse of store speed, Ace Manbow has successfully done a 180 in its speed, reset its variables and change direction it is moving, so it starts moving afresh.
        if (spd == 0 - storeSpd)
        {
            spd = storeSpd;
            image_yscale *= -1;
            moveTimer = 0;
            xspeed = 0;
            delay = -1;
        }
    }
}
else if (dead)
{
    moveTimer = 0;
    spd = 0.5;
    storeSpd = 0;
    image_yscale = storeYScale;
    cooldownTimer = 0;
    delay = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ysc = image_yscale;
image_yscale = 1;

event_inherited();

image_yscale = ysc;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
