<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSearchy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/*
Flying searchlight enemy. When it catches you, it flips every single conveyer belt it
has access to, which is usually all of them, before flying off.
*/

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "flying";

animTimer = 0;

searchlight = true;
lightTimer = 0;

searchyImage = 0;
lightImage = 0;

phase = 0;

blockCollision = 0;
grav = 0;
init = 1;
hasFired = false;
image_speed = 0;

//creation code
useEvent2 = true; // if false then user event 2 does nothing (where conveyours are flipped by default)
//define noises made by searchy
alarmNoise = sfxSearchyLight;
searchyFind = sfxSearchyFound; //doubles as shot sound if shotObject is defined below.

//define searchy's light sprite;
lightSprite = sprSearchyLight;

//define searchy's detection radius. made from middle of object
searchLeft = -11;
searchRight = 11;
searchTop = 11;
searchBottom = 51;




//by default, searchy does not attack. here you can define a bullet/object to be spawned
shotObject = noone; //object type fired from searchy
shotSprite = noone; //sprite for fired object type.

//x and y offset if needed
shotOffsetX = 0;
shotOffsetY = -9;

//off screen shot - alternative/additional projectile fired when searchy reaches screen edge.

offScreenShot = noone; //object type fired from searchy when near screen edge
offScreenShotSprite = noone; //sprite for above.
offScreenRadius = 24; //how far away from screen edge before firing

//x and y offset if needed
offScreenShotOffsetX = 0;
offScreenShotOffsetY = -9;

offScreenShotSound = noone; //if defined, play sfx when firing

shotSmoke = noone; //if defined, create 'smoke object';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (init)
{
    init = 0;
}

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // start flying forwards 
            calibrateDirection();
            xspeed = 2 * image_xscale;
            phase = 1;
            if (alarmNoise != noone)
                playSFX(alarmNoise);
            break;
        case 1: // if the player passes through Searchy's light, they've been caught 
            if (collision_rectangle(x + searchLeft, y + searchTop, x + searchRight, y + searchBottom, target, false, false))
            {
                phase = 2;
            }
            else
            {
                // play Searchy's audio if it isn't playing
                if (alarmNoise != noone)
                {
                    if (!audio_is_playing(alarmNoise))
                    {
                        playSFX(alarmNoise);
                    }
                }
            }
            // Animate light
            lightTimer += 1;
            if (lightTimer &gt;= 2)
            {
                if (lightImage == 1)
                {
                    lightImage = 0;
                }
                else
                {
                    lightImage = 1;
                }
                lightTimer = 0;
            }
            animTimer += 1;
            if (animTimer &gt;= 6)
            {
                if (searchyImage == 3)
                {
                    searchyImage = 0;
                }
                else
                {
                    searchyImage += 1;
                }
                animTimer = 0;
            }
            break;
        case 2: // stop Searchy's audio and slow to a stop 
            if (xspeed != 0)
            {
                xspeed -= 0.1 * image_xscale;
                if (alarmNoise != noone)
                {
                    if (audio_is_playing(alarmNoise))
                    {
                        stopSFX(alarmNoise);
                    }
                }
                
                // animate light
                animTimer += 1;
                
                if (animTimer &gt;= 6)
                {
                    if (searchyImage == 3)
                    {
                        searchyImage = 0;
                    }
                    else
                    {
                        searchyImage += 1;
                    }
                    animTimer = 0;
                }
            }
            else // When stopped...
            {
                animTimer += 1;
                
                if (animTimer &gt;= 3)
                {
                    if (searchyImage == 4)
                    {
                        searchyImage = 5;
                        phase = 3;
                    }
                    else
                    {
                        searchyImage = 4;
                        if (searchyFind != noone)
                            playSFX(searchyFind);
                        if (shotObject != noone)
                        {
                            with (instance_create(x + shotOffsetX,y + shotOffsetY,shotObject))
                            {
                                if (other.shotSprite != noone)
                                    sprite_index = other.shotSprite;
                                depth = other.depth - 3;
                            }   
                        }
                        if (shotSmoke != noone)
                        {
                            with (instance_create(x + shotOffsetX,y + shotOffsetY,shotSmoke))
                            {
                                depth = other.depth - 4;
                            }
                        }
                    }
                    animTimer = 0;
                }
            }
            break;
        case 3: // if any conveyer belts exist, flip them backwards 
                if (useEvent2)
                    event_user(2);
                phase = 4;
            break;
        case 4: // speed up and fly off screen 
            if (xspeed != 3 || xspeed != -3)
            {
                xspeed += 0.1 * image_xscale;
            }
            
            animTimer += 1; // animation
            if (animTimer &gt;= 6)
            {
                if (searchyImage == 8)
                {
                    searchyImage = 5;
                }
                else
                {
                    searchyImage += 1;
                }
                animTimer = 0;
            }
            
            if (offScreenShot != noone &amp;&amp; !hasFired)
            {
                if (x &gt;= screenRight(-offScreenRadius) || x &lt;= screenLeft(offScreenRadius))
                {

                    if (offScreenShotSound != noone)
                        playSFX(offScreenShotSound);
                    with (instance_create(x + offScreenShotOffsetX,y + offScreenShotOffsetY,offScreenShot))
                    {
                        if (other.offScreenShotSprite != noone)
                            sprite_index = other.offScreenShotSprite;
                        depth = other.depth - 3;
                    }   
                    hasFired = true;
                    
                
                    if (shotSmoke != noone)
                    {
                        with (instance_create(x + shotOffsetX,y + shotOffsetY,shotSmoke))
                        {
                            depth = other.depth - 4;
                        }
                    }
                }
            }
            break;
    }
}
else if (dead)
{
    animTimer = 0;
    searchyImage = 0;
    phase = 0;
    hasFired = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Searchy Trigger
 if (instance_exists(objMM2Conveyor))
        with (objMM2Conveyor)
            dir = -dir;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead || beenOutsideView)
{
    exit;
}

// This code draws Searchy and its light

draw_sprite(sprite_index, searchyImage, x, y);
if (phase == 1)
    draw_sprite(lightSprite, lightImage, x, y + 11);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
