<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCompoundParallax</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000100</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
an advanced parallax object for advanced parallaxers like me B)

changes from devkit objParallax, in descending importance:
- handles multiple layers in one object, allowing easier modification and relocation
    of parallax backgroudns that have many layers
- the ability to disable infinite wrapping of a layer's image on one or both axes,
    allowing significantly reduced empty space in the layer images
- new cc variables to allow the layers to automatically align to the section
    thay're set to encompass, allowing easier relocation of complex backgrounds
- doesn't draw at all if it's completely out of view, saving significantly 
    on performance in levels with many backgrounds in different sections
- cc variables for offsets applied to all layers
- built-in relative offsets for adjustment based on the layer's scroll speed
- removed weird, largely vestigial 'align to grid' feature
*/
event_inherited();

    //creation code variables

//@cc array that contains all layer-specific information
//don't edit this directly: use the script parallaxObjectAddLayer to add a layer instead
layers[0, 0] = undefined;

/*
argument definitions for parallaxObjectAddLayer, copied from that script itself:
bgfile: 
    the resource index of the file you want the layer to use 
    (e.g. bgStarFieldBackground, sprPooker)

parallaxX, parallaxY: 
    how fast the layer moves horizontally compared to the foreground. 
    1 is the same as the foreground, 1/2 is half the speed of the foreground, 
    2 is twice the speed of the foreground

xspd, yspd: 
    how fast the layer moves horizontally per frame, independent of the parallax motion.

wrapX, wrapY: 
    if set to true, the provided resource wil be repeated infinitely along this axis
    otherwise, it will only be drawn once

offXAbs, offYAbs:
    moves the position of the resource by this amount
    absolute offset means it is unaffected by the parallax value.

offXRel, offYRel:
    moves the position of the resource by this amount
    relative offset means this value is affected by the parallax value, 
    so a relative offset of 10 and a parallax of 0.5 would be 5 pixels of offset
    
animspd:
    the image_speed applied to the provided resource
    only works if the layer's resourceType is a sprite

bgL, bgT, bgW, bgH:
    allows you to specify that only part of the provided resource file be used for the layer
    if not set, defaults to the full frame of the resource

bgResourceType:
    the type of resource the provided resource index belongs to.
    1 = background, 2 = sprite, 3 = surface.
    usually automatically determined, but you can set it yourself if you want
*/

//@cc an extra absolute offset that's applied to the entire background at once
offsetXAbsAll = 0;
offsetYAbsAll = 0;

//@cc an extra relative offset that's applied to the entire background at once
offsetXRelAll = 0;
offsetYRelAll = 0;

//@cc the depth that this object is drawn at. higher is further away.
//default gms variable, but you may want to change it in cc here
depth = 1000100;

//@cc define a custom area; for each value unused, the retrospective border
// of the current section where the object is placed is used as the default
areaLeft = undefined;
//@cc
areaRight = undefined;
//@cc
areaTop = undefined;
//@cc
areaBottom = undefined;

//@cc which side of the area to align itself against. 1 = right, -1 = left, 0 = center, undefined = don't
//note that objects appear at the top left of the screen they're 'aligned' to unless you offset them
alignX = undefined;
//@cc which side of the area to align itself against. 1 = bottom, -1 = top, 0 = center, undefined = don't
alignY = 1;


    //don't edit these:
//xoff = 0;
//yoff = 0;
init = false;
//xshift = 0;
//yshift = 0;
layersIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// run once on initialization
if (!init)
{
    //if no backgrounds were provided, die
    if (layers[0, 0] == undefined)
    {
        instance_destroy();
        exit;
    }
    
    //define area if no area was defined
    setSection(x, y, false);
    if (areaLeft == undefined)
        areaLeft = sectionLeft;
    if (areaRight == undefined)
        areaRight = sectionRight;
    if (areaTop == undefined)
        areaTop = sectionTop;
    if (areaBottom == undefined)
        areaBottom = sectionBottom;
    
    //determine absolute position to align to
    var xadj = 0;
    switch(alignX)  //horizontal
    {
        case -1:    //left
            xadj = areaLeft;
            break;
        case 0:     //center
            xadj = areaLeft + (((areaRight - global.screenWidth) - areaLeft) / 2);
            break;
        case 1:     //right
            xadj = areaRight - global.screenWidth;
            break;
    }
    var yadj = 0;
    switch(alignY)  //vertical
    {
        case -1:    //top
            yadj = areaTop;
            break;
        case 0:     //center
            yadj = areaTop + (((areaBottom - global.screenHeight) - areaTop) / 2);
            break;
        case 1:     //bottom
            yadj = areaBottom - global.screenHeight;
            break;
    }
    
    //for each background...
    var bgs = array_height_2d(layers);
    for (var s = 0; s &lt; bgs; s++)
    {
        //align layers with section
        layers[s, 7] += xadj * layers[s, 1];
        layers[s, 8] += yadj * layers[s, 2];
    
        //add global offsets to each layer
        layers[s, 7] += offsetXAbsAll;
        layers[s, 8] += offsetYAbsAll;
        layers[s, 7] += offsetXRelAll * layers[s, 1];
        layers[s, 8] += offsetYRelAll * layers[s, 2];
    }
    
    init = true;
}

// per-step adjustments
if (!global.frozen || instance_exists(objSectionSwitcher))
{
    //for each background...
    var bgs = array_height_2d(layers);
    for (var i = 0; i &lt; bgs; i++)
    {
        //animate sprite bgs
        layers[i, 15] += layers[i, 9];
        //move scrolling bgs
        layers[i, 7] += layers[i, 3];
        layers[i, 8] += layers[i, 4];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if camera and draw area don't intersect anywhere,
//cancel entire draw event
if !(view_xview + view_wview &gt; areaLeft &amp;&amp; view_xview &lt; areaRight)
    || !(view_yview &lt; areaBottom &amp;&amp; view_yview + view_hview &gt; areaTop) || (!init)
    exit;

clearDrawState();

//for each layer...
var bgs = array_height_2d(layers);
for (var s = 0; s &lt; bgs; s++)
{
    var bgL = layers[s, 10];
    var bgT = layers[s, 11];
    var bgW = layers[s, 12];
    var bgH = layers[s, 13];
    
    //determine position
    //horizontal position
    if layers[s, 5]
    {   //if set to wrap, draw at first multiple of bgW that is before screen edge
        var xshift = modf(-view_xview[0] * (layers[s, 1] - 1), bgW);
        var xDrawBase = view_xview[0] + modf(xshift - view_xview[0] + layers[s, 7], bgW);
    }   //otherwise, draw at origin
    else
        var xDrawBase = (-view_xview[0] * (layers[s, 1] - 1)) + layers[s, 7] + bgW;
    xDrawBase = floor(xDrawBase);
    
    //vertical position, same as above so no comments
    if layers[s, 6]  
    {
        var yshift = modf(-view_yview[0] * (layers[s, 2] - 1), bgH);
        var yDrawBase = view_yview[0] + modf(yshift - view_yview[0] + layers[s, 8], bgH);
    }
    else
        var yDrawBase = (-view_yview[0] * (layers[s, 2] - 1)) + layers[s, 8] + bgH;
    yDrawBase = floor(yDrawBase);
    
    
    //draw the background
    for (var i = -1; !(i &gt;= ceil(view_wview[0] / bgW) + 1 || (!layers[s, 5] &amp;&amp; i == 0)); i += 1)    //draw once if set not to wrap, or until offscreen if set to wrap
    {
        for (var j = -1; !(j &gt;= ceil(view_hview[0] / bgH) + 1 || (!layers[s, 6] &amp;&amp; j == 0)); j += 1)
        {
            // determine offset of this background chunk
            var xDraw = i * bgW + xDrawBase;
            var yDraw = j * bgH + yDrawBase;
            
            //if chunk is completely out of area, don't draw
            if (xDraw + bgW &lt;= areaLeft) || (xDraw &gt;= areaRight)
                || (yDraw + bgH &lt;= areaTop) || (yDraw &gt;= areaBottom)
                continue;
            
            //if chunk is partially out of area, only draw part of it
            var addX = 0;
            var addY = 0;
            var partX = bgL;
            var partY = bgT;
            var partW = bgW;
            var partH = bgH;
            if (xDraw &lt;= areaLeft)
            {
                partX = max(bgL, areaLeft - xDraw + bgL);
                partW -= partX - bgL;
                addX += partX - bgL;
            }
            if (xDraw + bgW &gt;= areaRight)
                partW = min(partW, areaRight - xDraw);
            
            if (yDraw &lt;= areaTop)
            {
                partY = max(bgT, areaTop - yDraw + bgT);
                partH -= partY - bgT;
                addY += partY - bgT;
            }
            if (yDraw + bgH &gt;= areaBottom)
                partH = min(partH, areaBottom - yDraw);
            
            if (partW &lt; 0 || partH &lt; 0) //if the part is invisibly small, don't draw
                continue;
            
            xDraw += addX;
            yDraw += addY;
            
            //draw chunk
            switch (layers[s, 14])
            {
                case 1:
                    draw_background_part(layers[s, 0], partX, partY, partW, partH, xDraw, yDraw);
                    break;
                case 2:
                    draw_sprite_part(layers[s, 0], layers[s, 15], partX, partY, partW, partH, xDraw, yDraw);
                    break;
                case 3:
                    draw_surface_part(layers[s, 0], partX, partY, partW, partH, xDraw, yDraw);
                    break;
            }
        }
    }
}

//debug: draw a dot at the origin of each layer
/*
for (var s = 0; s &lt; bgs; s++)
    draw_sprite(sprWilyCastleDots, 0, 
        layers[s, 7] + (-view_xview[0] * (layers[s, 1] - 1)) + (layers[s, 12] / 2), 
        layers[s, 8] + (-view_yview[0] * (layers[s, 2] - 1)) + (layers[s, 13] / 2));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
