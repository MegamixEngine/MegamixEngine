<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSniperJoeMechGameGear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Experimental variant of the Sniper Mech from MM2. Allows ANY entity to pilot the sniper armour (default GG Sniper Joe). Refer to the creation code for details.
/// Hops toward the player and then pauses before repeating. If it lands at the same height as the player, it shoots 5 bullets diagonally downward at different angles.
/// Once destroyed, it drops whichever enemy you specified. Ensure your challenge is designed around both the mech and its rider!

event_inherited();

healthpointsStart = 12;
healthpoints = healthpointsStart;
contactDamage = 7;
killOverride = false;

category = "big eye, bulky, joes";

// Enemy specific code
shoot = false;
moveTimer = 20;
attackTimer = 20;

jumpTrigger = false;
sniperBaseSprite = -1;

shotsFired = 0;
child = noone;



//creation code
firesOnGround = true; //fires when grounded
shotMax = 5;
shotPattern = 0; //if 0, then fires in predetermined spread (mega man 2), if 1, fires with random offsets (game gear).
//^ this can be ignored if the bullet object is set to something else

childObject = objGGSniperJoe; //if objGGSniperJoe, then display default graphics, otherwise something else rides the armour and the rest of the values need changing
emptySprite = sprSniperJoeMechEmptyGameGear;
childHealth = 0;  //if 0, use then use object default
childImg = 0;
childOffsetX = 0;
childOffsetY = -16;
childSprite = -1; //if not -1, then set the enemy drop sprite here.

bulletObject = -1; //if not -1, spawn specific projectile, otherwise basic projectile
// in order for bullets to work it will need code in the bullet based off its x and y image scales.
bulletSprite = sprGGEnemyBullet2; // enemy bullet sprite;
bulletDamage = 4; // if -1 then the base object shoots bullet damage, otherwise set to this.
bulletMask = -1; //if not -1 then change mask


//for each frame of animation, change the position of the x &amp; y of the child sprite to match the armour's positioning with this array.
frameOffsetX[0] = 0;
frameOffsetY[0] = 0;
frameOffsetX[1] = -1;
frameOffsetY[1] = 3;
frameOffsetX[2] = 8;
frameOffsetY[2] = -10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead)
{
    if (instance_exists(child))
    {
        
        beenOutsideView = false;
    }
   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(xcoll!=0)
{
    xspeed=xcoll;
}

if (entityCanStep())
{
    if (ground) // If on ground...
    {
        moveTimer += 1; // Increase move timer.
        if (moveTimer == 10)
        {
            image_index = 0; // Set sprite to normal.
        }
        if (moveTimer == 1)
        {
            if (ycoll &gt; 0) // If landing after a jump...
            {
                playSFX(sfxTimeStopper);
            }
            if (image_index &gt; 1) // If sprite is set to jumping...
            {
                image_index = 1; // Set sprite to crouch/land.
            }
            
            calibrateDirection();
            xspeed = 0;
            yspeed = 0;
        }
        
        if (moveTimer == 30)
        {
            if (!jumpTrigger) // If not doing anything...
            {
                moveTimer = 0;
                jumpTrigger = true;
                shoot = true;
                if (instance_exists(target))
                {
                    if (target.bbox_bottom != bbox_bottom)
                    {
                        shoot = false;
                    }
                }
            }
        }
        if (jumpTrigger)
        {
            if (!shoot)
            {
                if (moveTimer == 30)
                {
                    image_index = 1;
                }
                else if (moveTimer == 40)
                {
                    yspeed = -5;
                    xspeed = image_xscale * 1.5;
                    ground = 0;
                    image_index = 2;
                    
                    moveTimer = 0;
                    jumpTrigger = false;
                }
                
            }
            else
            {
                if (moveTimer &gt; 75) // If timer exceeds 60...
                {
                    moveTimer = 0;
                    shoot = false;
                    attackTimer = 0;
                    shotsFired = 0;
                }
            }
                
                
        }
       
    }
    
     if (shoot &amp;&amp; firesOnGround || yspeed &lt; 0 &amp;&amp; !firesOnGround)
     {
            attackTimer ++;
            //shooting pattern
            if (attackTimer == floor(attackTimer / 15) * 15 &amp;&amp; attackTimer &gt; 0 &amp;&amp; shotsFired &lt; shotMax)
            {
                shotsFired ++;
                if (bulletObject == -1)
                {
                    i = instance_create(x + 16 * image_xscale, y,
                    objEnemyBullet);
                    if (shotPattern == 0)
                    {
                        i.xspeed = image_xscale * 6;
                        i.yspeed = (6 - (attackTimer/15)) * image_yscale;
                    }
                    else
                    {
                        i.xspeed = random_range(3,6) * image_xscale;
                        i.yspeed = random_range(3,6 - (attackTimer/20)) * image_yscale;
                    }
                    i.sprite_index = bulletSprite;
                    if (bulletMask != -1)
                        i.mask_index = bulletMask;
                    else
                        i.mask_index = bulletSprite;
                    playSFX(sfxEnemyShootClassic);
                    
                    if (bulletDamage != -1)
                    {
                        i.contactDamage = bulletDamage;
                    }
                }
                else
                {
                    i = instance_create(x + 16 * image_xscale, y - 9, bulletObject);
                    i.image_xscale = image_xscale;
                    i.image_yscale = image_yscale;
                    if (bulletSprite != -1)
                    {
                        i.sprite_index = bulletSprite;
                        if (bulletMask != -1)
                            i.mask_index = bulletMask;
                        else
                            i.mask_index = bulletSprite;
                    }
                    
                    if (bulletDamage != -1)
                    {
                        i.contactDamage = bulletDamage;
                    }
                }
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();
moveTimer = 0;
attackTimer = 0;
jumpTrigger = false;
shoot = false;
image_index = 0;
if (childObject == objGGSniperJoe || childObject == objMM2SniperJoe)
    sprite_index = sniperBaseSprite;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (healthpoints - global.damage &lt;= 0)
    sprite_index = emptySprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>child = instance_create(x + childOffsetX, y + childOffsetY, childObject);
with (child)
{
    yspeed = -3;
    respawn = false;
    shootTimer = 0;
    shootAmount = 0;
    shooting = false;
    grav = other.grav;
    image_xscale = other.image_xscale;
    image_yscale = other.image_yscale;
    if (other.childHealth != 0)
    {
        healthpointsStart = other.childHealth;
        healthpoints = healthpointsStart;
    }
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw event
drawEXT(emptySprite, image_index,round(x),round(y),image_xscale,image_yscale);
var sprX = object_get_sprite(childObject);
if (childSprite != -1)
    sprX = childSprite;
    
var xOff = frameOffsetX[image_index] * image_xscale;
var yOff = frameOffsetY[image_index] * image_yscale;


drawEXT(sprX,childImg,round(x + childOffsetX + xOff),round(y + childOffsetY + yOff),image_xscale,image_yscale);
drawEXT(emptySprite, image_index + 3,round(x),round(y),image_xscale,image_yscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (childObject == objGGSniperJoe || childObject == objMM2SniperJoe)
{
    sniperBaseSprite = sprite_index; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (childObject == objGGSniperJoe || childObject == objMM2SniperJoe)
{
    event_inherited();
}
else
{
    drawUser(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
