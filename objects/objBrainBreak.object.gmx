<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBrainBreak</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 4;
category = "grounded, semi bulky";

facePlayerOnSpawn = true;

// Enemy specific code
phase = 1;
smokeTimer = 0;
explodeTimer = 0;

xSpd = 1.2;
jumpXSpd = 0;
ySpd = 5;

imgSpd = 0.1;
imgIndex = 0;
animBack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    xSpeedTurnaround();
    
    switch (phase)
    {
        // Walk around casually
        case 1: // Animation 
            if (!animBack)
            {
                imgIndex += imgSpd;
                if (imgIndex &gt;= 3)
                {
                    imgIndex = 2 - imgIndex mod 3;
                    animBack = true;
                }
            }
            else
            {
                imgIndex -= imgSpd;
                if (imgIndex &lt;= 0)
                {
                    imgIndex = 1 - imgIndex;
                    animBack = false;
                }
            }
            
            // Turn around
            if (ground)
            {
                if (xspeed == 0 || checkFall(16 * image_xscale, 0)) //! positionCollision(x + sprite_width * 0.4 + xspeed, bbox_bottom + 1))
                {
                    image_xscale *= -1;
                    xspeed *= -1;
                }
            }
            break;
        
        // ATTACK THE SHIT OUTA MEGA MEONG BWOBWOBWOBWOBWOBWO
        case 2: // Animation 
            if (!animBack)
            {
                imgIndex += imgSpd * 2;
                if (imgIndex &gt;= 6)
                {
                    imgIndex = 5 - imgIndex mod 6;
                    animBack = true;
                }
            }
            else
            {
                imgIndex -= imgSpd * 2;
                if (imgIndex &lt;= 3)
                {
                    imgIndex = 4; // Not sure how to carry over the extra value. Oh well.
                    animBack = false;
                }
            }
            
            // Give off smoke
            smokeTimer += 1;
            if (smokeTimer &gt;= 8) // &lt;-- Smoke spawn time here
            {
                smokeTimer = 0;
                instance_create(x - sprite_width * 0.4, bbox_top + 8, objBrainBreakSmoke);
            }
            
            // Turn around stuff
            if (ground &amp;&amp; instance_exists(target))
            {
                if (xspeed == 0 || !positionCollision(x + sprite_width * 0.375 + xspeed, bbox_bottom + 1))
                {
                    if ((image_xscale &gt; 0 &amp;&amp; target.x &lt; x)
                        || (image_xscale &lt; 0 &amp;&amp; target.x &gt; x))
                    {
                        image_xscale *= -1;
                    }
                    else
                    {
                        yspeed = -ySpd;
                        xspeed = xSpeedAim(x, y, target.x, target.y, yspeed, grav, xSpd);
                        ground = false;
                        
                        jumpXSpd = xspeed;
                    }
                }
            }
            
            // Set speed
            if (ground)
            {
                xspeed = xSpd * 2 * image_xscale;
            }
            else
            {
                xspeed = jumpXSpd; // So he can't be completely unable to jump over walls and stuff
            }
            
            // Explode
            explodeTimer += 1;
            if (explodeTimer &gt;= 800) // &lt;-- time until exploding here
            {
                dead = true;
                instance_create(bboxGetXCenter(), bboxGetYCenter(), objHarmfulExplosion);
				playSFX(sfxExplosion2);
            }
            break;
    }
}
else if (dead)
{
    phase = 1;
    
    smokeTimer = 0;
    explodeTimer = 0;
    imgIndex = 0;
    animBack = false;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    xspeed = xSpd * image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if phase != 2
{
    phase = 2;
    imgIndex = 3;
    animBack = false;

    calibrateDirection();

    with (instance_create(x, y, objBrainBreakGlasses))
    {
        image_xscale = other.image_xscale;
        xspeed = -other.image_xscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
