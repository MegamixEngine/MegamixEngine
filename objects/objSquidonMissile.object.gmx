<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSquidonMissleJet2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = false; // can totally use this just by itself seperate from have su bee

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 2;
grav = 0;
blockCollision = 0;

despawnRange = 0;

dir = 1;

// Enemy specific code
phase = 0;
waitTimer = 0;
rotateSpd = 2;
totalChange = 0;

spd = 1.4;
speed = 0;
xspeed = 0;
yspeed = 0;

jetTimer = 0;
imgIndex = 0;
image_speed = 0;
image_index = 0;
startWaitTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    speed = spd;
    
    if (instance_exists(target))
    {
        switch (phase)
        {
            // setup initial direction
            case 0:
                phase = 1;
                
                if (dir == -1)
                {
                    direction = 135;
                }
                else
                {
                    direction = 45;
                }
                
                break;
            
            // chase megaman
            case 1: // spawn grace period before aiming towards the player 
                if (waitTimer &lt; 30)
                {
                    waitTimer += 1;
                    break;
                }
                
                // stop aiming after the missle turns enough
                if (totalChange &gt;= 450)
                {
                    break;
                }
                
                var preDirection = direction;
                
                correctDirection(point_direction(x, y, target.x, target.y), rotateSpd);
                
                // this is basically so it doesn't add way too much when crossing from 0 degrees to 360 degrees
                var c = abs(direction - preDirection);
                if (c &gt; rotateSpd)
                {
                    c = rotateSpd;
                }
                
                totalChange += c;
                
                break;
        }
        
        // animaion
        jetTimer += 1;
        if (jetTimer &gt;= 3)
        {
            // &lt;-- jet animation speed here
            if (sprite_index == sprSquidonMissleJet1)
            {
                sprite_index = sprSquidonMissleJet2;
            }
            else
            {
                sprite_index = sprSquidonMissleJet1;
            }
            
            jetTimer = 0;
        }
        
        imgIndex = round((direction) / 45);
    }
}
else
{
    speed = 0;
    
    if (dead)
    {
        phase = 0;
        startWaitTimer = 20;
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
