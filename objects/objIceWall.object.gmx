<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIceWall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>sprIceWall</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 24;
healthpoints = healthpointsStart;
contactDamage = 2;

bulletLimitCost = 1;

pierces = 2;

isSolid = 0;
blockCollision = 0;
grav = 0;
doesTransition = false;

pushed = 0;
timer = 0;

forming = 1;
isFree = 0;

canHit = -1;

dir = 0;

attackDelay = 24;

multPal[0] = $FCBC3C;
multPal[1] = $A45520;

// wow! a two in one combo
playSFX(sfxClamp);
playSFX(sfxIceWall);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead)
{
    if(!isFree)
    {
        isFree = !checkSolid(0,0,1,1);
    }
    
    if (!isFree)
    {
        blockCollision = false;
        x = xprevious;
        y = yprevious;
        xspeed = 0;
        yspeed = 0;
        grav = 0;
    }
    
    if (!forming)
    {
        if (isFree)
        {
            if (collision_rectangle(bbox_left, y - 8 * sign(grav), bbox_right, bbox_top, objWater, false, false))
            {
                grav = 0;
                yspeed *= 1 - (1 / 8);
                shiftObject(0, -0.75, blockCollision);
                
                xspeed = 0;
            }
            else if (!place_meeting(x, y, objWater))
            {
                grav = 0.25 * image_yscale;
                inWater = 0;
            }
            
            if (xcoll != 0)
            {
                xspeed = -xcoll;
                dir = -dir;
            }
            
            if (ground)
            {
                if (pushed &gt; 8)
                {
                    if (abs(xspeed) &lt; 2 &amp;&amp; !inWater)
                    {
                        xspeed += 0.04 * dir;
                    }
                    
                }
                else
                {
                    var ispushed = pushed;
                    
                    with (objMegaman)
                    {
                        if (xDir != 0 )
                        {       
                            if (!place_meeting(x,y,other)&amp;&amp;place_meeting(x + sign(xDir), y, other))
                            {
                                other.pushed += 1;
                                other.dir = sign(xDir);
                          
                            }
                        }
                    }
                    
                    if (pushed == ispushed)
                    {
                        pushed = 0;
                    }
                }
            }
        }
        else
        {
            healthpoints = 0;
        }
        
        // gradually die
        healthpoints -= (healthpointsStart / 256) * (1 - (xspeed != 0) * 0.25);
        
        // update image index to be cracked and stuff
        event_user(1);

        if (healthpoints &lt;= 0)
        {
            event_user(EV_DEATH);
        }
        
        timer++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (performShoot)
{
    var ammoCost = 3 - (1 * (global.energySaver &gt; 0));
    
    var i = fireWeapon(22, -3 + (-46 * checkCheats(cheatEnums.hugeWeapons)), objIceWall, 1, ammoCost, 1, 0, 2.2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
specialDamageValue("fire", 5);
specialDamageValue("flying", 4);
specialDamageValue("aquatic", 3);
specialDamageValue("nature", 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("ICE WALL", make_colour_rgb(60, 188, 252), make_color_rgb(164, 228, 252), sprWeaponIconsIceWall);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var iX = sign(image_xscale);
var iY = sign(image_yscale);
dead = 1;
with (instance_create(x, y, objSlideDust))
{
    sprite_index = sprIceWallBreak;
    useShader =  (global.multiplayerColors &amp;&amp; global.playerCount &gt; 1);
    replaceColor[0] = other.multPal[0];
    newColor[0] = global.multiplayerPalette[other.playerID,global.weapon[other.playerID]];
    replaceColor[1] = $D7D7D7;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpoints -= other.contactDamage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>healthpoints -= healthpointsStart / 64;

if (!audio_is_playing(sfxReflect) || !(timer mod 4))
{
    playSFX(sfxReflect);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cracked ice
var FXi = clamp(6 - floor((healthpoints / healthpointsStart) * 3),4,6);
image_index = max(4, FXi)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.multiplayerColors &amp;&amp; global.playerCount &gt; 1)
{
    
    shaderSetColorreplace(
            multPal[0], global.multiplayerPalette[playerID,global.weapon[playerID]]
        );
}
if (forming)
{
    var shardTime = 20;
    
    if (timer &lt; shardTime)
    {
        
        shards = sprite_get_number(sprIceWallShard) - 1;
        shImg = shards - min(shards, floor(timer) / 3);
    
        for (var i = 0; i &lt; 4; i += 1)
        {
            for (var z = shards; z &gt;= shImg; z -= 1)
            {
                draw_sprite_ext(sprIceWallShard, z,
                    round(x + (min(8, shardTime - (timer - z)) * (3 * (1 - (i mod 2 == 0) * 2)))),
                    round(y + (min(8, shardTime - (timer - z)) * (3 * (1 - (i mod 3 == 0) * 2)))),
                    image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            }
        }
        
    }
    else
    {
        image_index = floor((timer - shardTime) / 3);
        
        drawSelf();
        
        if (image_index &gt;= 4)
        {
            forming = 0;
            if(isFree)
            {
                isSolid = 1;
                
                blockCollision = 1;
                grav = 0.25 * image_yscale;
            }
        }
    }
    
    timer+=2;
}
else
{
    drawSelf();
}
if (global.multiplayerColors &amp;&amp; global.playerCount &gt; 1)
{
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
