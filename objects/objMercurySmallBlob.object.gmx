<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMercuryBlob</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
stopOnFlash = false;
contactDamage = 4;
blobMove = noone; // Movement set in Mercury's Step
attackTimer = 0;
phase = 0;
big = false; // For use when Mercury is using his bouncing pattern
blobID = 0; // Used to establish "dominant" blob when bouncing
image_speed = 0.2;//5;
trigBlob = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Slide
    if (blobMove == 0)
    {
        if (objMercury.xspeed == 0)
        {
            attackTimer++;
            if (attackTimer &gt;= 60)
            {
                xspeed = 2 * image_xscale;
                
                // Destroy if touching Mercury
                if (place_meeting(x, y, objMercury))
                {
                    instance_destroy();
                }
            }
        }
    } // Bounce
    else
    {
        // Jumping
        if (phase == 0)
        {
            if ((ground) &amp;&amp; (xcoll == 0))
            {
                yspeed = -4;
                xspeed = 1.5 * image_xscale;
                playSFX(sfxNumetallShoot);
            }
            else if (xcoll != 0)
            {
                xspeed = 0;
                phase = 1;
            }
            if (x &lt;= view_xview + 128 &amp;&amp; image_xscale == -1 || x &gt;= view_xview + 128 &amp;&amp; image_xscale == 1 || xcoll != 0)
            {
                trigBlob = true;
            }
        } // Standing still
        else
        {
            if (place_meeting(x, y, objMercurySmallBlob))
            {
                with (objMercurySmallBlob)
                {
                    if (blobID == 0)
                    {
                        instance_destroy();
                    }
                }
                sprite_index = sprMercuryBigBlob;
                big = true;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>iFrames = 0;
with (other)
{
    if ((penetrate &lt; 2) &amp;&amp; (pierces &lt; 2))
    {
        event_user(EV_DEATH);
    }
}
other.guardCancel = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
