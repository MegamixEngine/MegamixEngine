<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTileAnimator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000005</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Default animated background effect
event_inherited();

sq[(view_wview + view_hview) / 8] = 0;

timer = 0;
sp = 8;

timerMax = 8;
sizeX = 16;
sizeY = 16;
childSprite = sprDot;
myCol = global.nesPalette[$C];
innerCol = background_color;
inSection = false;
open = noone;
canKill = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i = 0;
if (!global.frozen || instance_exists(objSectionSwitcher))
{
    if (inSection &amp;&amp; insideView() || !inSection)
    {
        timer += 1;
        
        open = mm_ds_list_create();
        canKill = true;
        for (i = 0; i &lt; array_length_1d(sq); i += 1)
        {
            if (sq[i] &gt; 0)
            {
                sq[i] += sp;
                if (sq[i] &gt;= view_wview + 32)
                {
                    sq[i] = 0;
                }
            }
            else
            {
                ds_list_add(open, i);
            }
        }
        
        if (timer == timerMax)
        {
            timer = 0;
            if (!ds_list_empty(open))
            {
                sq[ds_list_find_value(open, irandom(ds_list_size(open)))] = sp;
            }
        }
        canKill = false;
        mm_ds_list_destroy(open);

        
        dir = 1;
        sw = view_wview / 8;
        for (i = 0; i &lt; array_length_1d(sq); i += 1)
        {
            if (sq[i])
            {
                if (i &lt; sw)
                {
                    xs = i * 16 mod view_wview;
                    if (xs == 0)
                    {
                        dir *= -1;
                    }
                    ys = sq[i] * dir;
                    if (dir == 1)
                    {
                        ys -= 16;
                    }
                    else
                    {
                        ys += view_hview;
                    }
                    xa = 0;
                    ya = 1;
                }
                else
                {
                    ys = (i - sw) * 16 mod view_hview;
                    if (ys == 0)
                    {
                        dir *= -1;
                    }
                    xs = sq[i] * dir;
                    if (dir == 1)
                    {
                        xs -= 16;
                    }
                    else
                    {
                        xs += view_wview;
                    }
                    xa = 1;
                    ya = 0;
                }
                draw_sprite_ext(childSprite, 0, view_xview + xs, view_yview + ys, sizeX, sizeY,
                    image_angle, myCol, image_alpha);
                draw_sprite_ext(childSprite, 0, view_xview + xs + 1, view_yview + ys + 1,
                    sizeX-2, sizeY-2, image_angle, innerCol, image_alpha);
                
                // draw_sprite_ext(sprDot,0,view_xview+xs+(-2+(dir=-1)*19)*xa,view_yview+ys+(-2+(dir=-1)*19)*ya,max(ya*16,1),max(xa*16,1),image_angle,global.nesPalette[12],image_alpha);
                // draw_sprite_ext(sprDot,0,view_xview+xs+(-5+(dir=-1)*25)*xa,view_yview+ys+(-5+(dir=-1)*25)*ya,max(ya*16,1),max(xa*16,1),image_angle,global.nesPalette[12],image_alpha);
            }
            
            dir *= -1;
        }
    }
    else
    {
        if (canKill)
        {
            mm_ds_list_destroy(open);
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
