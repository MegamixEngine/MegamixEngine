<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFireTotemBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire Totem
// Creation code: size -&gt; how tall the totem is

// Initialize
event_inherited();

blockCollision = false;
grav = 0;
contactDamage = 4;
healthpointsStart = 4;
healthpoints = 4;

category = "fire";

// @cc - size -&gt; how tall Fire Totem is
size = 2;

// @cc - col -&gt; Fire Totem color: 0 (default) = red, 1 = green;
col = 0;

sz = 0;
phase = 0;
timer = -1;
animFrameBase = 0;
animFrameMiddle = 0;
animFrameHead = 0;
animFrame = 0;
headSprite = sprFireTotemHead;
middleSprite = sprFireTotemMiddle;
shootCooldown = 0;
shotIndex = 0;

init = 1;
image_index = 0;
mask = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free the custom collision mask
if (!instance_exists(self))
{
    print("fire totem doesn't exists");
    exit;
}
if (mask != noone &amp;&amp; mask_index == mask)
{
    var delete = true;
    with (objFireTotem)
    {
        if (id != other &amp;&amp; mask == other.mask)
        {
            delete = false;
            break;
        }
    }
    if (delete)
    {
        sprite_delete(mask);
        mask = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make a new collision mask
event_inherited();
if (init)
{
    init = 0;
    if (size &lt;= 0)
        size = 1;
    if (size &gt; 16)
        size = 16;
    
    var surf;
    surf = surface_create(256, 224);
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    draw_set_color(c_red);
    draw_rectangle(0, 0, 16, 28 + size * 8, false);
    mask = sprite_create_from_surface(surf, 0, 0, 16, 28 + size * 8, false, false, 8, 27 + size * 8);
    sprite_collision_mask(mask, false, 0, 0, 0, 0, 0, 1, 255);
    mask_index = mask;
    
    surface_reset_target();
    surface_free(surf);
    
    //Change sprite colour
    switch (col)
    {
        case 1:
            headSprite = sprFireTotemHeadGreen;
            middleSprite = sprFireTotemMiddleGreen;
            sprite_index = sprFireTotemBaseGreen;
            break;
        default:
            headSprite = sprFireTotemHead;
            middleSprite = sprFireTotemMiddle;
            sprite_index = sprFireTotemBase;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI
event_inherited();

if (entityCanStep())
{
    animFrameMiddle += 0.15;
    if (floor(animFrameMiddle) &gt; 2)
        animFrameMiddle = 0;
    switch (phase)
    {
        case 0: // Hidden 
            if (timer == -1)
            {
                image_index = 0;
                animFrameBase = 0;
                sz = 0;
                timer = 0;
                animFrameHead = -1;
            }
            else
            {
                animFrameBase += 0.15;
                if (animFrameBase &gt; 3)
                    animFrameBase = 0;
                image_index = floor(animFrameBase);
                
                if (instance_exists(target))
                {
                    if (abs(target.x - x) &lt; 16 * 6)
                    {
                        timer = -1;
                        phase = 1;
                        calibrateDirection();
                    }
                }
            }
            break;
        case 1: // Appear 
            if (timer == -1)
            {
                animFrameBase = 4;
                animFrameHead = 0;
                image_index = 4;
                timer = 0.99;
            }
            else
            {
                animFrameBase += size / 8;
                if (floor(animFrameBase) &gt; 7)
                    animFrameBase = 7;
                image_index = floor(animFrameBase);
                if (image_index &gt;= 6)
                    timer += size / 8;
                if (timer &gt; 1 &amp;&amp; sz &lt; size)
                {
                    sz += 1;
                    timer = 0;
                }
                else if (sz == size)
                {
                    phase = 3;
                    timer = -1;
                    sz = size;
                    animFrameBase = 7;
                }
            }
            break;
        case 2: // Disapear 
            if (timer == -1)
            {
                animFrameBase = 7;
                animFrameHead = 0;
                image_index = 7;
                timer = 0;
            }
            else
            {
                timer += size / 8;
                
                if (sz == 0)
                {
                    animFrameBase -= size / 8;
                    if (floor(animFrameBase) &lt; 0)
                        animFrameBase = 0;
                }
                
                image_index = floor(animFrameBase);
                if (timer &gt; 1 &amp;&amp; sz &gt; 0)
                {
                    sz -= 1;
                    timer = 0;
                }
                
                if (sz == 0 &amp;&amp; image_index == 0)
                {
                    phase = 0;
                    timer = -1;
                }
            }
            break;
        case 3: // wait and Shoot 
            if (timer == -1)
            {
                timer = 0;
                animFrameHead = 1;
                animFrame = 1;
                shootCooldown = 0;
            }
            else
            {
                calibrateDirection();
                var timerEnd = 30 * 4;
                timer += 1;
                if (timer == 1)
                    shotIndex = irandom(3);
                animFrame += 0.15;
                if (floor(animFrame) &gt; 6)
                    animFrame = 1;
                
                
                
                if (timer == timerEnd - 30 * 3 || timer == timerEnd - 30 * 2 || timer == timerEnd - 30 || timer == timerEnd)
                {
                    shootCooldown = 10;
                    shotIndex += 1;
                    if (shotIndex &gt; 3)
                        shotIndex = 0;
                    event_user(0);
                }
                if (timer &gt; 180)
                    timer = 0;
                var shooting = 0;
                if (shootCooldown &gt; 0)
                {
                    shootCooldown -= 1;
                    shooting = 1;
                }
                
                animFrameHead = animFrame + shooting * 6;
                
                if (timer &lt; timerEnd - 30 * 3 &amp;&amp; timer &gt; 10 &amp;&amp; instance_exists(target) &amp;&amp; abs(x - target.x &gt;= 16 * 6))
                {
                    timer = -1;
                    phase = 2;
                }
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset
event_inherited();
sz = 0;
phase = 0;
timer = -1;
animFrameBase = 0;
animFrameMiddle = 0;
animFrameHead = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.bbox_top &gt; y - 18 - sz * 8 &amp;&amp; phase == 3)
{
    other.guardCancel = 1;
    if (other.penetrate &gt;= 2)
    {
        global.damage = 0;
        other.guardCancel = 2;
    }
}
else if (phase != 3)
{
    global.damage = 0;
    if (other.bbox_top &lt;= y - 18 - sz * 8)
        other.guardCancel = 2;
    else
        other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_DEATH: death

dead = 1;
var dropY = (y -12 - 6) - sz*8;
var _ex = instance_create(bboxGetXCenter(), dropY, objExplosion);

if (itemDrop == objKey)
{
    _ex = instance_create(bboxGetXCenter() - 8, dropY - 8, objKey);
    _ex.yspeed = -4;
    _ex.homingTimer = 90;
    playSFX(sfxKeySpawn);
}
else
{
    _ex.myItem = itemDrop;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
var i = instance_create(x, bbox_top + 4, objEnemyBullet);
i.blockCollision = 0;
i.yspeed = -3;
i.grav = 0.16;
if (col == 1)
{
    i.sprite_index = sprFireTotemFlameGreen;
}
else
{
    i.sprite_index = sprFireTotemFlame;
}
i.image_speed = 0.15;
i.x = x;
i.y = bbox_top;
playSFX(sfxFireTotemFire);
switch (shotIndex)
{
    case 0:
        i.xspeed = -1.6;
        break;
    case 1:
        i.xspeed = -0.8;
        break;
    case 2:
        i.xspeed = 0.8;
        break;
    case 3:
        i.xspeed = 1.6;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free the custom collision mask
if (!instance_exists(self))
{
    print("fire totem doesn't exists");
    exit;
}
if (mask != noone)
{
    sprite_delete(mask);
    mask = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

if (!dead)
{
    var i = 1;
    var color = image_blend;
    var yo = 0;
    var img = image_index;
    if (floor(animFrameHead) &gt; 7 || animFrameHead == 0)
    {
        yo = 1;
        if (phase == 3)
            image_index = 6;
    }
    if(sz==1)
        yo+=1;
    event_inherited();
    image_index = img;
    if ((ceil(iFrames / 2) mod 2) || (iceTimer &gt; 0&amp;&amp;iceGraphicStyle==0))
    {
        color = c_white;
        if (iceTimer &gt; 0&amp;&amp;iceGraphicStyle==0)
            color = make_color_rgb(0, 120, 255);
        d3d_set_fog(true, color, 0, 0);
    }
    for (i = 0; i &lt; sz; i++)
        draw_sprite_ext(middleSprite, floor(animFrameMiddle), x, y - 12 + yo - i * 8, image_xscale, image_yscale, 0, color, image_alpha);
    
    if (image_index &gt;= 6)
        draw_sprite_ext(headSprite, floor(animFrameHead), x, y - 12 + yo - ((i) * 8), image_xscale, image_yscale, 0, color, image_alpha);
    d3d_set_fog(false, 0, 0, 0);
    if (iceTimer &gt; 0 &amp;&amp; iceGraphicStyle==0)
    {
        draw_set_blend_mode(bm_add);
        for (i = 0; i &lt; sz; i++)
            draw_sprite_ext(middleSprite, floor(animFrameMiddle), x, y - 12 + yo - i * 8, image_xscale, image_yscale, 0, c_white, image_alpha);
        
        if (image_index &gt;= 6)
            draw_sprite_ext(headSprite, floor(animFrameHead), x, y - 12 + yo - ((i) * 8), image_xscale, image_yscale, 0, c_white, image_alpha);
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
