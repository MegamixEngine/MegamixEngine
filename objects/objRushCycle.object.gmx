<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRushCycle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 0;

blockCollision = 1;
grav = 0.25;
bubbleTimer = 0;
if (global.characterSelected[playerID] == CHAR_PROTOMAN)
    bubbleTimer = -1;
despawnRange = -1;

canHit = -1;

timer = 4 * 60;
rider = -1;

active = false;

animTimer = 0;
animAdd = 0;
currentImg = 0;
shootTimer = 0;

turning = 0;

decreaseAmmoTimer = 0;
decreaseAmmoTimerMax = 60 * ((0.25 * (global.energySaver &gt; 0)) + 1);

// vehicle vars
weaponsAllowed = true;
shootYOffset = 9;
riderPhysicsAllowed = false;
physicsLock = false;


dustTimer = 0;
trailTimer = 0;

autoFireSet = 32;

col[1] = -1;
col[2] = -1;
col[3] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(rider))
{
    rider.vehicle = noone;
    rider.dieToSpikes = 1;
    lockPoolRelease(physicsLock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}

var hasAmmo = (ammoCanAfford(playerID));
var i = playerID;

if (!global.frozen)
{
    // Mount Wario- I mean Mount Ru- I MEAN, GET ON THE RUSH CYCLE
    if (!active &amp;&amp; instance_exists(parent))
    {
        if (!parent.isSlide &amp;&amp; !parent.climbing)
        {
            if (position_meeting(x, y - 4 * image_yscale, parent) &amp;&amp; !active)
            {
                rider = parent.id;
                active = true;
                
                // NOTE FROM PMB: Changed to prevent lock pool bug issues with maze warp.
                shiftVisible = 3;//2;
                timer = -1;
                
                grav = 0;
                
                playSFX(getGenericSFX(SFX_RUSHBIKE_START));
                
                // lock controls + give spike immunity
                rider.dieToSpikes = 0;
                physicsLock = lockPoolLock(
                    rider.localPlayerLock[PL_LOCK_MOVE],
                    rider.localPlayerLock[PL_LOCK_TURN],
                    rider.localPlayerLock[PL_LOCK_JUMP],
                    rider.localPlayerLock[PL_LOCK_SLIDE],
                    rider.localPlayerLock[PL_LOCK_CLIMB]);
            }
        }
    }
    
    // Set this as a variable for ease of access
    var isGlobalLocked = (isLocked(global.playerLock[PL_LOCK_MOVE]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_JUMP]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_TURN]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_SHOOT]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_SLIDE]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_CLIMB])) || (isLocked(global.playerFrozen));
    
    // Make sure to set
    if (isGlobalLocked)
    {
        xspeed = 0;
        rider.xspeed = 0;
    }
    
    // Riding this bad boy
    if (active &amp;&amp; !isGlobalLocked)
    {
        // Drain energy
        if (hasAmmo &amp;&amp; instance_exists(rider))
        {
            // turning failsafe thingy (you suck flashman &gt;:C)
            if (turning &amp;&amp; rider.xDir == 0)
            {
                image_xscale = -image_xscale;
                xspeed *= 1.25;
                turning = 0;
            }
            
            //toggle between dash and no dash, if accessibility options are enabled.
            if (instance_exists(rider))
            {
                if (global.keySlidePressed[rider.playerID] &amp;&amp; global.holdToggle)
                {
                    rider.fireHeld = !rider.fireHeld;
                }
            }
            
            decreaseAmmoTimer ++;
            
            // Take away ammo
            if (decreaseAmmoTimer &gt;= decreaseAmmoTimerMax)
            {
                ammoDecrease(playerID, 1);
                
                decreaseAmmoTimer = 0;
            }
            
            turning = 0;
            
            // Set up ice multiplier
            var iceMultiplier = 1;
            
            if (place_meeting(x, y + rider.gravDir, objIce)
                || place_meeting(x, y + rider.gravDir, objOil)
                || place_meeting(x, y + rider.gravDir, objPUOil)
                || (instance_exists(parent.statusObject) &amp;&amp; parent.statusObject.statusOnIce))
            {
                iceMultiplier = .4;
            }
            
            // slow down if not holding any buttons (or turning)
            if (rider.xDir == 0)
            {
                xspeed -= min(abs(xspeed), 0.25) * sign(xspeed) * iceMultiplier;
            } // regular driving
            else
            {
                if (xspeed == 0 &amp;&amp; xcoll == 0)
                {
                    if (rider.xDir == image_xscale &amp;&amp; rider.ground)
                    {
                        var i = instance_create(x - 14 * image_xscale, y, objSlideDust);
                        i.image_xscale = image_xscale;
                        i.image_yscale = image_yscale;
                        playSFX(getGenericSFX(SFX_RUSHBIKE_JUMP));
                    }
                }
                
                // Check for boost inputs
                var boosting = (global.keySlide[rider.playerID] &amp;&amp; !global.holdToggle || 
                    (global.keyDown[rider.playerID] &amp;&amp; rider.image_yscale &gt; 0) || 
                    (global.keyUp[rider.playerID] &amp;&amp; rider.image_yscale &lt; 0) || 
                    rider.fireHeld);
                
                
                // set speed, including the boosts
                var spd = 3.15 + (2 * boosting);
                
                xspeed = clamp(xspeed + (0.125 * iceMultiplier) * rider.xDir, -spd, spd);
                
                if (xspeed != 0)
                {
                    image_xscale = sign(xspeed);
                }
                
                // spawn trail effects if boosting
                if (boosting)
                {
                    trailTimer++;
                    
                    if (trailTimer mod 3 == 0 &amp;&amp; abs(xspeed) &gt; 1.5)
                    {
                        a = instance_create(rider.x, rider.y, objTrailEffect);
                        a.drawingPlayer = true;
                        a.parent = rider;
                        a.spriteX = 10 + currentImg;
                        a.spriteY = 12;
                        a.image_xscale = rider.image_xscale;
                        a.image_yscale = rider.image_yscale;
                    }
                }
                
                // detect turning
                if (rider.xDir == -image_xscale &amp;&amp; rider.ground)
                {
                    if (!audio_is_playing(getGenericSFX(SFX_RUSHBIKE_SKID)))
                    {
                        playSFX(getGenericSFX(SFX_RUSHBIKE_SKID));
                    }
                    turning = 1;
                }
            }
            
            // Rider updating
            with (rider)
            {
                xspeed = other.xspeed;
                image_xscale = other.image_xscale;
                
                if (!iFrames)
                {
                    if (ground)
                    {
                        if (place_meeting(x, y + image_yscale * 2, objSpike))
                        {
                            if (global.infiniteEnergy[global.weaponID[? objRushCycle]] || (checkCheats(cheatEnums.infiniteWeapons)))
                            { 
                                global.playerHealth[playerID] = max(0, global.playerHealth[playerID] - 1);
                            }
                            else
                            {
                                ammoDecrease(playerID, 1);
                            }
                            
                            playSFX(getGenericSFX(SFX_HURT));
                            
                            
                            iFrames = 8;
                        }
                    }
                }
                
                if (!other.turning) // jumping:
                {
                    if (global.keyJumpPressed[playerID]/* checkSolid(0, gravDir * 2 )*/ )
                    {
                        if (ground)
                        {
                            playSFX(getGenericSFX(SFX_RUSHBIKE_JUMP));
                            yspeed = -4 * gravDir;
                        }
                        else
                        {
                            if (checkCheats(cheatEnums.VVVVV))
                            {
                                yspeed /= 2;
                                y = y-5*-image_yscale;
                                //shiftObject(0, -5*-image_yscale, 1);
                                image_yscale *= -1;
                                while (checkSolid(0, sign(image_yscale)) &amp;&amp; !ground)
                                    y -= sign(image_yscale);
                                    
                                //y += sprite_get_yoffset(mask_index);
                                
                                playSFX(sfxGravityFlip);
                                gravDir *= -1;
                            }
                        }
                    }
                }
            }
            
            shootTimer -= 1;
        }
        else
        {
            timer = 1;
        }
    }
    
    // Animation update
    animTimer += 1;
    if (animTimer &gt;= 9 - (abs(xspeed) * 1.5))
    {
        animTimer = 0;
        animAdd = !animAdd;
    }
    
    currentImg = animAdd + (active * 2) + ((shootTimer &gt; 0) * 2);
    
    dustTimer *= turning;
    
    // visual effects
    if (active &amp;&amp; !isGlobalLocked)
    {
        if (!rider.ground)
        {
            currentImg = 6;
            animTimer = 0;
        }
        else
        {
            // effects if turning
            if (turning)
            {
                currentImg = 7;
                animTimer = 0;
                if (!(dustTimer mod 8))
                {
                    var i = instance_create(x + 16 * image_xscale, y - 1 * image_yscale, objSlideDust);
                    i.image_xscale = image_xscale;
                    i.image_yscale = image_yscale;
                    i.hspeed = xspeed * 1.5;
                    i.vspeed = image_yscale * -0.25;
                }
                dustTimer += 1;
            }
        }
    }
    
    // teleport away if its inactive
    if (timer)
    {
        timer -= 1;
        if (!timer)
        {
            if (global.characterSelected[playerID] == CHAR_PROTOMAN)
            {
                instance_create(x, bboxGetYCenter(), objExplosion);
            }
            else
            {
                // Teleport away
                i = instance_create(x, y, objRushTeleport); // y - 12
                i.upordown = 'up';
                i.parent = parent;
                i.image_xscale = image_xscale;
                i.image_yscale = image_yscale;
                i.col = col;
                
                // Added by PMB to have Rush Bike teleport properly after gravity is flipped. 
                if (instance_exists(rider))
                {
                    i.image_yscale = rider.image_yscale;
                }
            }
            
            instance_destroy();
        }
    }
}

// sprite setting
if (active)
{
    if (hasAmmo &amp;&amp; instance_exists(rider))
    {
        with (rider)
        {
            vehicle = other.id;
            playerHandleSprites("Cycle");
        }
        
        x = rider.x;
        y = rider.y + 15 * rider.image_yscale;
        
        blockCollision = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (performShoot)
{
    var canSpawn = true;
    
    if (instance_exists(objRushCycle) || instance_exists(objRushTeleport)) // check if rush exists 
    {
        with (prtPlayerProjectile)
        {
            if (playerID == other.playerID)
            {
                canSpawn = false;
            }
        }
    }
    
    if (canSpawn &amp;&amp; ammoCanAfford(playerID))
    {
        i = fireWeapon(26, 0, objRushTeleport, 4, 0, 0, 0);
        
        with (i)
        {
            type = 'cycle';
            y = view_yview;
            
            if (image_yscale[0] &lt; 0)
            {
                y += view_hview[0];
            }
        }
    }
    else // else player can fire
    {
        if (instance_exists(vehicle))
        {
            if (vehicle.object_index != objRushCycle)
                exit;
                
            if (!vehicle.turning)
            {
                with (vehicle)
                {
                    shootTimer = 20;
                    if (currentImg &lt; 4 &amp;&amp; ground)
                    {
                        currentImg += 2;
                    }
                }
                
                i = fireWeapon(13, 4, objBusterShot, 3 + (12 * (global.shotUpgrade &gt; 0)), 0, 1, 0);
                
                if (i)
                {
                    i.xspeed = image_xscale * 6.5;
                }
            }
        }
        else
        {
            with (fireWeapon(16, 0, objBusterShot, 4 + (12 * (global.shotUpgrade &gt; 0)), 0, 1, 0))
            {
                xspeed = (other.image_xscale * 5);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.characterSelected[0] == CHAR_BASS)
    weaponSetup("TREBLE CHASER", -5, -5, sprWeaponIconsTrebleCycle);
else if (global.characterSelected[0] == CHAR_PROTOMAN)
    weaponSetup("PROTO BIKE", -5, -5, sprWeaponIconsProtoCycle);
else
    weaponSetup("RUSH BIKE", -5, -5, sprWeaponIconsRushCycle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!active)
{
    drawPlayer(playerID, costumeID, 10 + currentImg, 12, x, y - 16 * image_yscale, image_xscale, image_yscale);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
