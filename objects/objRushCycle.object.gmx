<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRushCycle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 0;

blockCollision = 1;
grav = 0.25;
bubbleTimer = 0;

canHit = -1;

timer = 4 * 60;
rider = -1;

active = false;

animTimer = 0;
animAdd = 0;
currentImg = 0;
shootTimer = 0;

turning = 0;

// vehicle vars
weaponsAllowed = true;
shootYOffset = 9;
riderPhysicsAllowed = false;
physicsLock = false;


dustTimer = 0;
trailTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(rider))
{
    rider.vehicle = noone;
    rider.dieToSpikes = 1;
    lockPoolRelease(physicsLock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if (!global.frozen)
{
    // Mount Wario- I mean Mount Ru- I MEAN, GET ON THE RUSH CYCLE
    if (!active &amp;&amp; instance_exists(parent))
    {
        if (!parent.isSlide &amp;&amp; !parent.climbing)
        {
            if (position_meeting(x, y - 4 * image_yscale, parent) &amp;&amp; !active)
            {
                rider = parent.id;
                active = true;
                
                shiftVisible = 2;
                timer = -1;
                
                grav = 0;
                
                playSFX(sfxLargeClamp);
                
                // lock controls + give spike immunity
                rider.dieToSpikes = 0;
                physicsLock = lockPoolLock(
                    rider.localPlayerLock[PL_LOCK_MOVE],
                    rider.localPlayerLock[PL_LOCK_TURN],
                    rider.localPlayerLock[PL_LOCK_JUMP],
                    rider.localPlayerLock[PL_LOCK_SLIDE],
                    rider.localPlayerLock[PL_LOCK_CLIMB]);
            }
        }
    }
    
    // Set this as a variable for ease of access
    var isGlobalLocked = (isLocked(global.playerLock[PL_LOCK_MOVE]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_JUMP]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_TURN]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_SHOOT]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_SLIDE]) &amp;&amp;
        isLocked(global.playerLock[PL_LOCK_CLIMB])) || (isLocked(global.playerFrozen));
    
    // Make sure to set
    if (isGlobalLocked)
    {
        xspeed = 0;
        rider.xspeed = 0;
    }
    
    // Riding this bad boy
    if (active &amp;&amp; !isGlobalLocked)
    {
        // Drain energy
        if (global.ammo[playerID, global.weapon[playerID]] &gt; 0 &amp;&amp; instance_exists(rider))
        {
            // turning failsafe thingy (you suck flashman &amp;gt;:C)
            if (turning &amp;&amp; rider.xDir == 0)
            {
                image_xscale = -image_xscale;
                xspeed *= 1.25;
                turning = 0;
            }
            
            // Take away ammo
            global.ammo[playerID, global.weapon[playerID]] = max(0,
                global.ammo[playerID, global.weapon[playerID]]
                - ((1 / 60) / (global.energySaver + 1)));
            
            turning = 0;
            
            // Set up ice multiplier
            var iceMultiplier = 1;
            
            if (place_meeting(x, y + rider.gravDir, objIce)
                || place_meeting(x, y + rider.gravDir, objOil)
                || place_meeting(x, y + rider.gravDir, objPUOil)
                || (instance_exists(parent.statusObject) &amp;&amp; parent.statusObject.statusOnIce))
            {
                iceMultiplier = .4;
            }
            
            // slow down if not holding any buttons (or turning)
            if (rider.xDir == 0)
            {
                xspeed -= min(abs(xspeed), 0.25) * sign(xspeed) * iceMultiplier;
            } // regular driving
            else
            {
                if (xspeed == 0 &amp;&amp; xcoll == 0)
                {
                    if (rider.xDir == image_xscale &amp;&amp; rider.ground)
                    {
                        var i = instance_create(x - 14 * image_xscale, y, objSlideDust);
                        i.image_xscale = image_xscale;
                        i.image_yscale = image_yscale;
                        playSFX(sfxRushCycle1);
                    }
                }
                
                // Check for boost inputs
                var boosting = (global.keySlide[rider.playerID] || global.keyDown[rider.playerID]);
                
                // set speed, including the boosts
                var spd = 3.15 + (2 * boosting);
                
                xspeed = clamp(xspeed + (0.125 * iceMultiplier) * rider.xDir, -spd, spd);
                
                if (xspeed != 0)
                {
                    image_xscale = sign(xspeed);
                }
                
                // spawn trail effects if boosting
                if (boosting)
                {
                    trailTimer++;
                    
                    if (trailTimer mod 3 == 0 &amp;&amp; abs(xspeed) &gt; 1.5)
                    {
                        var a = instance_create(rider.x, rider.y, objTrailEffect);
                        a.drawingPlayer = true;
                        a.parent = rider;
                        a.spriteX = 10 + currentImg;
                        a.spriteY = 11;
                        a.image_xscale = image_xscale;
                        a.image_yscale = rider.image_yscale;
                    }
                }
                
                // detect turning
                if (rider.xDir == -image_xscale &amp;&amp; rider.ground)
                {
                    if (!audio_is_playing(sfxRushCycle2))
                    {
                        playSFX(sfxRushCycle2);
                    }
                    turning = 1;
                }
            }
            
            // Rider updating
            with (rider)
            {
                xspeed = other.xspeed;
                image_xscale = other.image_xscale;
                
                if (!iFrames)
                {
                    if (ground)
                    {
                        if (place_meeting(x, y + image_yscale * 2, objSpike))
                        {
                            if global.infiniteEnergy[global.weaponID[? objRushCycle]]
                            { 
                                global.playerHealth[playerID] = max(0, global.playerHealth[playerID] - 1);
                            }
                            else
                            {
                                global.ammo[playerID, global.weapon[playerID]] = max(0, global.ammo[playerID, global.weapon[playerID]] - 1);
                            }
                            playSFX(sfxHit);
                            iFrames = 8;
                        }
                    }
                }
                
                if (!other.turning) // jumping:
                {
                    if (global.keyJumpPressed[playerID] &amp;&amp; ground /* checkSolid(0, gravDir * 2 )*/ )
                    {
                        playSFX(sfxRushCycle1);
                        yspeed = -4 * gravDir;
                    }
                }
            }
            
            shootTimer -= 1;
        }
        else
        {
            timer = 1;
        }
    }
    
    // Animation update
    animTimer += 1;
    if (animTimer &gt;= 9 - (abs(xspeed) * 1.5))
    {
        animTimer = 0;
        animAdd = !animAdd;
    }
    
    currentImg = animAdd + (active * 2) + ((shootTimer &gt; 0) * 2);
    
    dustTimer *= turning;
    
    // visual effects
    if (active &amp;&amp; !isGlobalLocked)
    {
        if (!rider.ground)
        {
            currentImg = 6;
            animTimer = 0;
        }
        else
        {
            // effects if turning
            if (turning)
            {
                currentImg = 7;
                animTimer = 0;
                if (!(dustTimer mod 8))
                {
                    var i = instance_create(x + 16 * image_xscale, y - 1 * image_yscale, objSlideDust);
                    i.image_xscale = image_xscale;
                    i.image_yscale = image_yscale;
                    i.hspeed = xspeed * 1.5;
                    i.vspeed = image_yscale * -0.25;
                }
                dustTimer += 1;
            }
        }
    }
    
    // teleport away if its inactive
    if (timer)
    {
        timer -= 1;
        if (!timer)
        {
            // Teleport away
            i = instance_create(x, y - 12, objRushTeleport);
            i.upordown = 'up';
            i.parent = parent;
            i.image_yscale = image_yscale;
            
            instance_destroy();
        }
    }
}

// sprite setting
if (active)
{
    if (global.ammo[playerID, global.weapon[playerID]] &gt; 0 &amp;&amp; instance_exists(rider))
    {
        with (rider)
        {
            vehicle = other.id;
            playerHandleSprites("Cycle");
        }
        x = rider.x;
        y = rider.y + 15 * rider.image_yscale;
        blockCollision = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    if (!instance_exists(objRushCycle) &amp;&amp; !instance_exists(objRushTeleport)
    &amp;&amp; global.ammo[playerID, global.weapon[playerID]] &gt; 0)
    {
        i = fireWeapon(26, 0, objRushTeleport, 1, 0, 0, 0);
        with (i)
        {
            type = 'cycle';
            y = view_yview;
            if (image_yscale &lt; 0)
            {
                y += view_hview;
            }
        }
    } // buster shot if cycle is on
    else if (instance_exists(vehicle))
    {
        if (!vehicle.turning)
        {
            with (vehicle)
            {
                shootTimer = 20;
                if (currentImg &lt; 4 &amp;&amp; ground)
                {
                    currentImg += 2;
                }
            }
            
            i = fireWeapon(13, 4, objBusterShot, 3, 0, 1, 0);
            if (instance_exists(i))
            {
                i.xspeed = objRushCycle.image_xscale * 6.5;
            }
        }
    }
    else
    {
        with (fireWeapon(16, 0, objBusterShot, 4, 0, 1, 0))
        {
            xspeed = other.image_xscale * 5;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("RUSH BIKE", -2, -2, sprWeaponIconsRushCycle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!active)
{
    drawPlayer(0, costumeID, 10 + currentImg, 11, x, y - 16 * image_yscale, image_xscale, image_yscale);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
