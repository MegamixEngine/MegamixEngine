<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFirePillar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

grav = 0;
blockCollision = 0;
bubbleTimer = -1;
isTargetable = false;

init = 1;
image_speed = 0.25;
y += sprite_height;

alarmRise = 0;
rise = true;
init = true;

freezeTimer = 0;
preImgSpeed = 0.25;
spriteWidth = 0;
spriteHeight = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// initial setup
if (init)
{
    init = false;
    y += sprite_height;
    spriteWidth = sprite_get_width(sprite_index);
    spriteHeight = sprite_get_height(sprite_index);
}

// actual step code
if (entityCanStep())
{
    healthpoints = 1;
    
    if (freezeTimer &gt; 0)
    {
        // freeze control
        freezeTimer -= 1;
        
        if (freezeTimer == 1)
        {
            isSolid = 0;
            if sprite_index == sprFirePillarFrozen
            {
                sprite_index = sprFirePillar;
                image_speed = 0.25;
            }
        }
    }
    else
    {
        // actual bobbing up and down
        alarmRise += 1;
        if (alarmRise &gt;= 40)
        {
            if (rise)
            {
                y -= 2;
                if (y &lt;= ystart)
                {
                    rise = !rise;
                    alarmRise = 0;
                    y = ystart;
                }
            }
            else
            {
                y += 2;
                if (y &gt;= ystart + spriteHeight &amp;&amp; !rise)
                {
                    rise = !rise;
                    alarmRise = 0;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top + (sprite_height + (ystart - y)), other.id, false, false))
{
    // freeze pillar
    if (other.object_index == objIceWall || other.object_index == objIceSlasher)
    {
        freezeTimer = 240;
        isSolid = 1;
        image_speed = 0;
                
        if (sprite_index == sprFirePillar)
        {
            sprite_index = sprFirePillarFrozen;
        }
        
        playSFX(sfxEnemyHit);
    }
    
    with (other)
    {
        if (pierces == 0 || pierces == 1)
        {
            if (object_index != objSuperArmBlockProjectile) &amp;&amp; (object_index != objSuperArmDebris)
            {
                event_user(EV_DEATH);
            }
            playSFX(sfxEnemyHit);
        }
    }
    
    iFrames = 0;
}

// only Rain Flush can stop fire....even if it's invisible......
if (other.object_index != objRainFlush)
{
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    draw_sprite_part(sprite_index, image_index, 0, 0, sprite_get_width(sprite_index), max(0, sprite_get_height(sprite_index) + (ystart - y)), x, y);
    image_yscale = 1/spriteHeight;
    image_yscale *= max(0, sprite_get_height(sprite_index) + (ystart - y));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
