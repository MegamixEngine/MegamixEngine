<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRotatingSpikePlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

canDrop = true;
phase = 0;
timer = 0;
timeri = 0;

respawnRange = -1;
despawnRange = -1;
blockCollision = 0;
grav = 0;
bubbleTimer = -1;

initImageIndex = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if initImageIndex == -1
{
    initImageIndex = image_index;
}

event_inherited();

if (entityCanStep() &amp;&amp; insideSection(x, y))
{
    var ys;
    if (image_index == 0)
    {
        ys = -1;
    }
    else
    {
        ys = 1;
    }
    
    switch (phase)
    {
        case 0: // Idle 
            if (place_meeting(x, y + ys, target))
            {
                phase = 4;
                timer = 0;
            }
            break;
        case 1: // Preparing to rotate 
            timer += 1;
            if (timer &gt;= 30)
            {
                timer = 0;
                if (image_index == 0)
                {
                    phase = 2;
                }
                else
                {
                    phase = 3;
                }
            }
            break;
        case 2: // First rotation 
            timer += 1;
            if (timer == 4)
            {
                image_index += 1;
                if (image_index == 4)
                {
                    phase = 0;
                }
                timer = 0;
            }
            break;
        case 3: // Second Rotation 
            timer += 1;
            if (timer == 4)
            {
                image_index += 1;
                if (image_index &gt;= image_number)
                {
                    image_index = 0;
                }
                if (image_index == 0)
                {
                    phase = 0;
                }
                timer = 0;
            }
            break;
        case 4: // Mega man check
        /* if (!place_meeting(x, y + ys, target))
            {*/ 
            phase = 1;
            
            //}
            break;
    }
    
    if ((place_meeting(x, y + 1, target) &amp;&amp; image_index == 0)
        || (place_meeting(x, y - 1, target) &amp;&amp; image_index == 4))
    {
        if (target.canHit &amp;&amp; target.iFrames == 0)
        {
            with (target)
            {
                with (other)
                {
                    entityEntityCollision(2);
                }
            }
        }
    }
    
    isSolid = (image_index == 0 || image_index == 4);
}
else if (!insideSection(x,y))
{
    phase = 0;
    timer = 0;
    image_index = initImageIndex;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
