<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTKhamen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
doesIntro = false;

healthpointsStart = 15;
contactDamage = 0;
isSolid = true;

blockCollision = false;
grav = 0;

category = "bulky, rocky";

// Enemy specific variables
// @cc - Does T. Khamen explode on death or not?
explodeOnDeath = false;

imgIndex = 0;
imgSpd = 0.2;
moveTimer = 60;
phase = 0;
animBack = false;
animLoop = 0;
rock = noone; // T. Khamen's chest rock
lastDrop = 0;
myLock = 0;
dropTime = 4;
selectTime = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            if (instance_exists(target))
            {
                if (myLock == 0)
                {
                    myLock = lockPoolLock(global.playerLock[PL_LOCK_SHOOT],
                        global.playerLock[PL_LOCK_CLIMB],
                        global.playerLock[PL_LOCK_SLIDE],
                        global.playerLock[PL_LOCK_JUMP],
                        global.playerLock[PL_LOCK_TURN],
                        global.playerLock[PL_LOCK_MOVE]);
                    target.xspeed = 0;
                }
                if (target.ground)
                {
                    moveTimer--;
                    if (moveTimer &lt;= 30)
                    {
                        imgIndex = 1;
                        
                        if (moveTimer == 0)
                        {
                            phase = 1;
                            moveTimer = 30;
                            myLock = lockPoolRelease(myLock);
                        }
                    }
                }
            }
            break;
        case 1:
            if (!instance_exists(rock))
            {
                moveTimer--;
                
                // Shoot rocks
                if (moveTimer &lt;= 0)
                {
                    if (animBack == false)
                    {
                        imgIndex += imgSpd;
                        
                        if (imgIndex == 5)
                        {
                            if (animLoop == 0)
                            {
                                imgIndex = 3;
                                animBack = true;
                            }
                            else
                            {
                                imgIndex = 1;
                                var i = instance_create(x + 34 * image_xscale, y + 26, objTKhamenRock);
                                i.image_xscale = image_xscale;
                                i.parent = id;
                                rock = i.id;
                                moveTimer = 120;
                                animLoop = 0;
                            }
                        }
                    }
                    else
                    {
                        imgIndex -= imgSpd;
                        
                        if (imgIndex &lt; 2)
                        {
                            imgIndex = 3;
                            animBack = false;
                            animLoop = 1;
                        }
                    }
                }
            }
            
            // Drop rocks
            selectTime--;
            if (selectTime &gt; 0)
            {
                dropTime--;
                
                if (dropTime == 0)
                {
                    if (instance_exists(objTKhamenRockDropper))
                    {
                        var gridX = floor(bbox_left / view_wview) * view_wview;
                        var gridY = floor(bbox_top / view_hview) * view_hview;
                        var i = 0;
                        var rockDrop;
                        rockDrop[0] = 0;
                        
                        with (objTKhamenRockDropper)
                        {
                            var _x = floor(x / view_wview) * view_wview;
                            var _y = floor(y / view_hview) * view_hview;
                            if ((_x == gridX) &amp;&amp; (_y == gridY))
                            {
                                rockDrop[i] = id;
                                i++;
                                active = false;
                            }
                        }
                        var rn = irandom_range(0, i - 1);
                        if (rockDrop[rn] &gt; 0)
                        {
                            lastDrop = rockDrop[rn];
                            lastDrop.active = true;
                        }
                    }
                    dropTime = 4;
                }
            }
            break;
    }
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collision_rectangle(x + 20 * image_xscale, y - 23, x + 40 * image_xscale, y - 13, other.id, false, false))
{
    other.guardCancel = 0;
}
else
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

imgIndex = 5;

if (explodeOnDeath == false)
{
    //instance_create (x + 20 * image_xscale, y - 18, objBigExplosion);
    i = instance_create(x, y, objTKhamenDead);
    i.image_xscale = image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
