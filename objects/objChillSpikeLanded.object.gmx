<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChillSpikeFloor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 0;

contactDamage = 5;

penetrate = 0;
pierces = 0;

dir = 1; // 0: ceiling, 1: ground, 2: left wall, 3: right wall
firstFrame = true;

timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (firstFrame)
{
    firstFrame = false;
    
    // find correct orientation / position
    if (dir &gt;= 2)
    {
        sprite_index = sprChillSpikeWall;
    }
    if (dir == 0)
    {
        image_yscale = -1;
    }
    if (dir == 3)
    {
        image_xscale = -1;
    }
    
    y = floor(y);
    x = floor(x);
    
    // sink to ground
    
    var normal = 1;
    if (dir == 1 || dir == 3)
    {
        normal = -1;
    }
    
    var settle_dist = 1;
    
    if (dir == 0)
    {
        settle_dist = 0;
    }
    if (dir == 3)
    {
        settle_dist = 2;
    }
    
    if (dir &lt;= 1)
    {
        var n_tries = 16;
        
        // move horizontally to avoid wall:
        var sg = 1;
        var r = 0;
        
        while (place_meeting(x + sg * r, y + normal * settle_dist, objSolid) &amp;&amp; n_tries &gt; 0)
        {
            sg *= -1;
            if (sg == 1)
                r += 1;
            n_tries -= 1;
        }
        x += sg * r;
        n_tries = 12;
        
        // sink to ground:
        while (!place_meeting(x, y + normal * settle_dist, objSolid) &amp;&amp; n_tries &gt; 0)
        {
            y -= normal;
            n_tries -= 1;
        }
        
        if (n_tries &lt;= 0)
        {
            event_user(EV_DEATH);
        }
    }
    else
    {
        n_tries = 16;
        
        // move vertically to avoid floor/ceiling:
        var sg = 1;
        var r = 0;
        
        while (place_meeting(x + normal * settle_dist, y + sg * r, objSolid) &amp;&amp; n_tries &gt; 0)
        {
            sg *= -1;
            if (sg == 1)
                r += 1;
            n_tries -= 1;
        }
        
        y += sg * r;
        n_tries = 12;
        
        // shift over to wall:
        while (!place_meeting(x + normal * settle_dist, y, objSolid) &amp;&amp; n_tries &gt; 0)
        {
            x -= normal;
            n_tries -= 1;
        }
        
        if (n_tries &lt;= 0)
        {
            event_user(EV_DEATH);
        }
    }
}

if (!global.frozen)
{
    timer += 1;
}

if (timer &gt;= 2)
{
    image_index = 1;
}

if (timer &gt;= 60 * 3)
{
    event_user(EV_DEATH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!instance_exists(objSectionSwitcher))
{
    sound_stop(sfxReflect);
    playSFX(sfxChillSpikeShatter);
    
    // code swiped from whoever made chill man. thank you! &lt;3
    for (var i = 0; i &lt; 3; i += 1)
    {
        var a = instance_create(bboxGetXCenter() + random(8) - random(8), bboxGetYCenter(), objChillDebris);
        a.xspeed = -choose(0.25, 0.5);
        if (i == 1)
        {
            a.xspeed *= -1;
        }
        a.image_xscale = choose(-1, 1);
        a.yspeed = -0.25 * irandom(12);
    }
    healthpoints = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
