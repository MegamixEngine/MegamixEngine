<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprStegorusMissile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = false;
healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;
blockCollision = 0;
canHit = true;
grav = 0;
despawnRange = 0;

// Enemy specific code
timer = 0;
newAngle = 0;
deathTimer = 60 * 5;
angle = 0;
spd = 1.35;
col = 0;
animFrame = 0;
canAim = false;
parent = noone;
timescale = 1;
canTurn = true;
aimTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (!canAim)
    {
        aimTimer += 1 * timescale;
        if (aimTimer &gt;= 30)
            canAim = true;
    }
    if (instance_exists(target) &amp;&amp; canAim) // Aiming
    {
        newAngle = point_direction(x, y, target.x, target.y);
        newAngle = wrapAngle(round(newAngle / 45) * 45);
    }
    timer += 1 * timescale;
    if (timer &gt; 20 &amp;&amp; canTurn)
    {
        timer = 0;
        if (angle != newAngle)
        {
            var rotDir = 1;
            var pdist = 0;
            var delta = 360 - angle;
            var nangl = (newAngle + delta) % 360;
            if (nangl &gt;= 180)
                rotDir = -1;
            angle = wrapAngle(angle + 45 * rotDir);
        }
    }
    xspeed = cos(degtorad(angle)) * spd * timescale;
    yspeed = -sin(degtorad(angle)) * spd * timescale;
    animFrame += 0.25 * timescale;
    if (floor(animFrame) &gt; 1)
        animFrame = 0;
    image_index = col * 16 + floor(animFrame) * 8 + round(angle / 45);
    
    // Timeout
    deathTimer -= 1 * timescale;
    if (deathTimer &lt;= 0)
        canTurn = false;
    var hasParent = instance_exists(parent);
    if (!hasParent || (hasParent &amp;&amp; parent.dead))
        event_user(EV_DEATH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (place_meeting(x,y,prtPlayerProjectile))
{
    playSFX(sfxEnemyHit);
}
else
{
    stopSFX(sfxEnemyHit);
}
instance_create(x, y, objExplosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
event_user(EV_DEATH);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
event_user(EV_DEATH);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
