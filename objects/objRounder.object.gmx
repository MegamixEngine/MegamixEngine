<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRounder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// loops = [how many times it circles before leaving, -1 will be infinite]

event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 2;

category = "cluster, floating";

// Enemy specific code
aim = 1;
shooting = false;
animTimer = 0;
attackTimer = 0;
bulletID = -10;
image_speed = 0.2;

angle = 0;
circle = false;

loops = 5;

blockCollision = 0;
grav = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        if (round(x) != round(target.x + cos(((angle + 90) / 180) * pi) * 32)
            || round(y)
            != round(target.y - sin(((angle + 90) / 180) * pi) * 32))
        {
            if (!circle)
            {
                xspeed = max(-2,
                    min((target.x + cos(((angle + 90) / 180) * pi) * 32)
                    - x, 2));
                yspeed = max(-2,
                    min((target.y - sin(((angle + 90) / 180) * pi) * 32)
                    - y, 2));
            }
        }
        else
        {
            circle = true;
        }
        
        if (circle)
        {
            if (angle &lt; 360 * loops || loops == -1)
            {
                xspeed = 0;
                yspeed = 0;
                
                x = target.x + cos(((angle + 90) / 180) * pi) * 32;
                y = target.y - sin(((angle + 90) / 180) * pi) * 32;
                
                angle += 360 / 120;
                if (instance_place(x, y, objRounder))
                {
                    var rounder = instance_place(x, y, objRounder);
                    if (rounder.id &gt; id)
                    {
                        angle -= (360 / 120) * 2;
                    }
                }
            }
            else
            {
                xspeed = -2;
            }
        }
    }
}
else if (dead || global.timeStopped)
{
    circle = false;
    angle = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
