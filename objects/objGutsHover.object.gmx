<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGutsHover</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A flying platform based on Guts Man's head. It sinks when entities ride it, and it dies to spikes.
event_inherited();

image_speed = 0;
canHit = false;
isSolid = 2;
grav = 0;
blockCollision = true;
rotorTimer = 0;
activateTimer = 0;
phase = 0; // 0: inactive. 1: moving

// @cc - What direction it moves in. (-1: left. 1: right.)
dir = 1;

// @cc - Can I move in any direction based on the xscale of my rider?
freeMove = false;

// @cc - How fast can I move horizontally?
myXSpeed = 0.5;

// @cc - How fast can I move vertically?
myYSpeed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    var pressed = false;
    visible = true;
    with (prtEntity)
        if (ground &amp;&amp; place_meeting(x, y + 2*sign(grav), other) &amp;&amp; !dead)
        {
            pressed = true;
            if (other.phase == 0) &amp;&amp; (other.freeMove)
                other.dir += image_xscale * (0.0001 + (object_index == objMegaman));
        }
    
    dir = sign(dir);
    
    xspeed = 0;
    yspeed = 0;
    if (phase == 0)
    {
        // inactive -- rise up unless pressed.
        if (pressed)
        {
            activateTimer++;
            rotorTimer--;
            if (activateTimer &gt; 10)
                phase = 1;
        }
        else
        {
            if ((y - ystart) * image_yscale &gt; 0)
                yspeed = -image_yscale;
            activateTimer = 0;
        }
        image_index = 4;
        if ((y - ystart) * image_yscale &gt; 0)
            image_index = 0;
    }
    else
    {
        // move diagonally downward.
        xspeed = myXSpeed * dir;
        yspeed = myYSpeed * image_yscale;
        image_index = 8;
        if (rotorTimer mod 5 == 0)
            rotorTimer++;
        if (!pressed)
            phase = 0;
        
        // die to spikes
        if (place_meeting(x, y + image_yscale, objSpike))
        {
            with (prtEntity)
                if (ground &amp;&amp; place_meeting(x, y + 2*sign(grav) , other) &amp;&amp; canHit &amp;&amp; object_index != objMegaman)
                {
                    event_user(EV_DEATH);
                }
            event_user(EV_DEATH);
        }
    }
    
    rotorTimer = (rotorTimer + 1) mod 20;
    image_index += rotorTimer div 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

rotorTimer = 0;
activateTimer = 0;
phase = 0; // 0: inactive. 1: moving
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
