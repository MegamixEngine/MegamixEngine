<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSharkSubmarineBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtSharkSubmarine</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

yLowOffset = 8;
canHit = false;

hatch1 = noone;

/* hatch1Index = 0;
hatch1IFrames = 0;
hatch1Health = 14 ;*/

hatch2 = noone;

/* hatch2Index = 0;
hatch2IFrames = 0;
hatch2Health = 14 ;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Creating hatches at the start of the fight.
if (!global.frozen)
{
    if (isIntro)
    {
        if (!instance_exists(hatch1))
        {
            hatch1 = instance_create(x + 18 * image_xscale, y + 49 * image_yscale,
                objSharkSubmarineBodyHatch);
            hatch1.bodyShark = id;
            hatch1.healthpointsStart = healthpoints / 2;
            hatch1.healthpoints = hatch1.healthpointsStart;
            hatch1.respawn = false;
            
            /* hatch1.xOffset = 18;
            hatch1.yOffset = 49 ;*/
        }
        if (!instance_exists(hatch2))
        {
            hatch2 = instance_create(x + 208 * image_xscale, y + 49 * image_yscale,
                objSharkSubmarineBodyHatch);
            hatch2.bodyShark = id;
            hatch2.healthpointsStart = healthpoints / 2;
            hatch2.healthpoints = hatch2.healthpointsStart;
            hatch2.respawn = false;
            
            /* hatch2.xOffset = 208;
            hatch2.yOffset = 49 ;*/
        }
    }
    if (isDying)
    {
        if (finalDeath)
        {
            slowdeathTimer++;
            if (slowdeathTimer &lt; 155)
            {
                if (slowdeathTimer mod 20 == 0)
                {
                    instance_create(random_range(x,x+170*image_xscale),random_range(y-110,y+40),objBigExplosion);
                    playSFX(sfxMM9Explosion);
                }
            }
            if (slowdeathTimer == 160)
                with(prtSharkSubmarine)
                    event_user(EV_DEATH);
        }
        else
        {
            event_user(EV_DEATH);
        }
    }
}

if (isFight &amp;&amp; !killed) // Keeping track of health.
{
    healthpoints = 0;
    if (instance_exists(hatch1))
    {
        healthpoints += hatch1.healthpoints;
    }
    if (instance_exists(hatch2))
    {
        healthpoints += hatch2.healthpoints;
    }
}

// Attack pattern.
if (entityCanStep() &amp;&amp; !killed &amp;&amp; !stop)
{
    if (isFight)
    {
        if (healthpoints &lt;= 0)
        {
            event_user(EV_DEATH);
        }
        
        attackTimer++;
        if (attackTimer &gt;= 90) // Gives the signal to launch a dolphin.
        {
            attackTimer = 0;
            if (instance_exists(hatch1))
            {
                if (instance_exists(hatch2))
                {
                    if (irandom(1) == 0)
                    {
                        hatch1.timer = 0;
                    }
                    else
                    {
                        hatch2.timer = 0;
                    }
                }
                else
                {
                    hatch1.timer = 0;
                }
            }
            else
            {
                if (instance_exists(hatch2))
                {
                    hatch2.timer = 0;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objSharkSubmarineDolphin)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
if (!isDying)
{
    isDying = true;
}
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (introTimer &lt;= 0)
{
    if (!killed)
    {
        draw_sprite_ext(sprSharkSubmarineTailJet, jetIndex,
            x + 49 * image_xscale, round(y) - 45 * image_yscale, image_xscale,
            image_yscale, image_angle, image_blend, image_alpha);
        draw_sprite_ext(sprSharkSubmarineWingJet, jetIndex,
            x - 10 * image_xscale, round(y) + 61 * image_yscale, image_xscale,
            image_yscale, image_angle, image_blend, image_alpha);
        draw_sprite_ext(sprSharkSubmarineWingJet, jetIndex,
            x - 18 * image_xscale, round(y) + 45 * image_yscale, image_xscale,
            image_yscale, image_angle, image_blend, image_alpha);
        draw_sprite_ext(sprSharkSubmarineUpperJet, jetIndex,
            x + 77 * image_xscale, round(y) - 78 * image_yscale, image_xscale,
            image_yscale, image_angle, image_blend, image_alpha);
        draw_sprite_ext(sprSharkSubmarineUpperJet, jetIndex,
            x + 85 * image_xscale, round(y) - 101 * image_yscale, image_xscale,
            image_yscale, image_angle, image_blend, image_alpha);
    }
    if (isFight || killed)
    {
        if (!instance_exists(hatch1))
        {
            draw_sprite_ext(sprSharkSubmarineBodyHatch, 3,
                x + 18 * image_xscale, round(y) + 49 * image_yscale,
                image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        }
        if (!instance_exists(hatch2))
        {
            draw_sprite_ext(sprSharkSubmarineBodyHatch, 3,
                x + 208 * image_xscale, round(y) + 49 * image_yscale,
                image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        }
    }
    else if (!isFight)
    {
        if (!instance_exists(hatch1))
        {
            draw_sprite_ext(sprSharkSubmarineBodyHatch, 0,
                x + 18 * image_xscale, round(y) + 49 * image_yscale,
                image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        }
        if (!instance_exists(hatch2))
        {
            draw_sprite_ext(sprSharkSubmarineBodyHatch, 0,
                x + 208 * image_xscale, round(y) + 49 * image_yscale,
                image_xscale, image_yscale, image_angle, image_blend, image_alpha);
        }
    }
}
else
{
    draw_sprite_ext(sprSharkSubmarineTailJet, jetIndex,
        x + 49 * image_xscale, round(y) - 45 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend,
        1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
    draw_sprite_ext(sprSharkSubmarineWingJet, jetIndex,
        x - 10 * image_xscale, round(y) + 61 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend,
        1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
    draw_sprite_ext(sprSharkSubmarineWingJet, jetIndex,
        x - 18 * image_xscale, round(y) + 45 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend,
        1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
    draw_sprite_ext(sprSharkSubmarineUpperJet, jetIndex,
        x + 77 * image_xscale, round(y) - 78 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend,
        1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
    draw_sprite_ext(sprSharkSubmarineUpperJet, jetIndex,
        x + 85 * image_xscale, round(y) - 101 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend,
        1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
