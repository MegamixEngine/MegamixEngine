<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFireManLava</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>110</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A simple lava pit object.
//First 1/3 of frames = one block high, 2/3 = lava top, 3/3 onwards = rest of lava
event_inherited();
canHit = false;



grav = 0;
blockCollision = 0;

respawnRange = -1;
despawnRange = -1;

shiftVisible = 1;
faction = 5;

imgalarm = 0;
img = 1;

type = 0;
image_speed = 0;

storeDmg = -1; // don't edit this
child = noone;



imgX = 16;
imgY = 16;

deathTimer = -1;


//------------------------PREDETERMINED LAVA SPRITES --------------------------

type[0] = sprFireManLava; // mm1 - fire man NES lava
type[1] = sprFireManGBLava; //DWR- fire man GameBoy lava.
type[2] = sprPharaohFirePit; // mm4 'custom' firepit based on pharoah man
type[3] = sprMagmaManLava; //mm9 - magma man lava
type[4] = sprSolarManFire; // mm10 - solar man's fire
//sprHeatManLava &amp; sprShadowManLava require very different hitboxes and therefore are seperate objects for editor reasons.


//creation code
contactDamage = 28;
isSolid = 1;
draining = false; // if true, drain ala quickman laser, only works with non solid lava pools
drainCooldown = 4; //cooldown of drain hit

//speed of animation
dividerSpeed = 8;
//how many images make up a animation
imageSplit = 3;

//if true, the lower part of lava is assigned randomly or in sequence
randomSplit = false; 
storeRNG = -1; // if not -1, use this seed when determining randomized splits

// if true,draw top of sprite above the hitbox, i.e, for Magma Man's lava.
smallTop = false; 

//select lava type from array above.
lavaType = 0; 
// use -1 for custom lava sprites. see room start code for examples.

//provide slight adjustments to Y positioning for certain graphic types;
childYAddition = 0; 
// if not 0, when object is destroyed by EV_DEATH, create a repeating explosion
destroyTime = 64; 
//plays when the object is destroyed by EV_DEATH
deathSFX = sfxFireManFireStorm; 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (child)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    var xMult = imgX / 16;
    var yMult = imgY / 16;
    if (deathTimer == -1)
    {
        if (storeDmg &gt; 0)
        {
            if (!instance_exists(child) &amp;&amp; storeDmg &gt; 0)
            {
                child = instance_create(x,y,objDamageSpike);
                child.image_xscale = image_xscale * xMult;
                child.image_yscale = image_yscale * yMult;
                child.contactDamage = storeDmg;
            }
            else if (storeDmg &gt; 0)
            {
                child.x = x;
                child.y = y + childYAddition;
                child.image_xscale = image_xscale * xMult;
                child.image_yscale = image_yscale * yMult;
                child.contactDamage = storeDmg;
            }
        }
    }
    else
    {
        deathTimer --;
        if (deathTimer == 0)
            instance_destroy();
    }

    
    img = (global.roomTimer / dividerSpeed) mod imageSplit;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (destroyTime == 0)
{
    with (child)
        instance_destroy();
    instance_destroy();
    playSFX(deathSFX);
}
else
{
    with (child)
    {
        
        instance_destroy();
        
    }
    
    
    repeatExplosion(0 + sprite_width/2,0 + (sprite_height/2) - 8,64,8,-1,sprite_width + 16,sprite_height + 8,objExplosion,noone,noone,other.deathSFX,sprExplosion);    
    deathTimer = destroyTime;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_ATTACK (Health draining)

event_inherited();
var cD = contactDamage;

if (draining == 1)
{
    with (other)
    {
        if (object_index == objMegaman)
        {
            healthpoints = global.playerHealth[playerID];
            global.playerHealth[playerID] -= 1;
        }
        
        healthpoints -= cD;
        if (healthpoints &lt;= 0)
        {
            event_user(EV_DEATH);
        }
        else
        {
            iFrames = other.drainCooldown;
            playSFX(getGenericSFX(SFX_HURT));
        }
    }
    
    global.damage = 0; // Overriding normal damage collision so there's no knockback
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var signX = sign(image_xscale);
var signY = sign(image_yscale);

if (randomSplit)
{
    var oldRNG = random_get_seed_safe();
    random_set_seed_safe(storeRNG);
    
}

var sT = (smallTop * imgY) * signY;
if (image_yscale &lt; 0)
    sT += imgY;
var curX = x + ((signX == -1) * imgX);
var iS = imageSplit - 1; 
for (var i = 0; i &lt; abs(image_xscale); i++)
{
    for (var j = 0; j &lt; abs(image_yscale) + smallTop; j++)
    {
            var signedI = i * signX;
            var signedJ = j * signY;
            var add = 0;
            if (image_yscale &gt; 1 || image_yscale &lt; -1)
                add = imageSplit;
            if (j == 0)
            {
                
                draw_sprite_ext(sprite_index,img + add,round(curX + (signedI * imgX)),
                    round(y - sT),
                    signX,signY,image_angle,image_blend,image_alpha);  
                
            }
            else
            {
                var jTrue = j;
                if (randomSplit)
                {
                    jTrue = irandom_range(2,image_number -1 / imageSplit);
                }
                
                var minI = wrapNumber(imageSplit * (2 + (jTrue-1)),imageSplit * 2,image_number -1);
                
                draw_sprite_ext(sprite_index,minI + img,round(curX + (signedI * imgX)),
                    round((y - sT) + (signedJ * imgY)),
                    signX,signY,image_angle,image_blend,image_alpha); 
                
            }
    }
}

if (randomSplit)
{
    random_set_seed_safe(oldRNG);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///for debugging purposes, setting lava here
if (lavaType == -1)
    exit;
childYAddition = 0;
switch (lavaType)
{
    default:
        dividerSpeed = 8;
        imageSplit = 3;
        randomSplit = false;
        smallTop = false; 
    break;
    case 0: //fire man lava has a slight y offset
        dividerSpeed = 10;
        imageSplit = 3;
        randomSplit = false;
        smallTop = false; 
        if (abs(image_yscale) &gt; 1)
            childYAddition = 3 * sign(image_yscale);
    break;
    case 3: case 4: //magma man and solar man lava have a offset top
        dividerSpeed = 9;
        imageSplit = 3;
        randomSplit = false;
        smallTop = true;     
    break;
    
}

sprite_index = type[lavaType];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>storeDmg = contactDamage;
contactDamage = 0;

if (isSolid)
{
    draining = false;
}

if (storeDmg &gt; 0 &amp;&amp; isSolid == 1)
{
    isSolid = 0;
    if (!instance_exists(child) &amp;&amp; storeDmg &gt; 0)
    {
        child = instance_create(x,y,objDamageSpike);
        child.image_xscale = image_xscale;
        child.image_yscale = image_yscale;
        child.contactDamage = storeDmg;
    }
}
else if (storeDmg &gt; 0 &amp;&amp; isSolid == 0)
{
    contactDamage = storeDmg;
    storeDmg *= -1;
    
}
event_user(1);

if (randomSplit)
{
    var oldRNG = random_get_seed_safe();
    if (storeRNG == -1)
    {
        randomize();
        storeRNG = random_get_seed_safe();
    }
    random_set_seed_safe(oldRNG);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (deathTimer == -1 || (deathTimer mod 3 == 0 || deathTimer mod 3 == 2))
drawUser(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (!DEBUG_ENABLED)
//    exit;
//event_user(EV_DEATH);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (!DEBUG_ENABLED)
    exit;
lavaType ++;
if (lavaType &gt;= array_length_1d(type))
{
    lavaType = 0;
}

sprite_index = type[lavaType];
event_user(1);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
