<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHoneyPuddle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = false;
contactDamage = 0;
caughtXScalePrev = 0;

canHit = false;
itemDrop = -1;

respawnRange = -1;
despawnRange = -1;

shiftVisible = 1;
blockCollision = 0;
grav = 0;

stopOnFlash = false;

caughtPlayer = noone;
despawnTimer = 0;
caughtTimer = 0;
honeyLock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

honeyLock = lockPoolRelease(honeyLock);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead &amp;&amp; !global.frozen &amp;&amp; !global.timeStopped)
{
    if (instance_exists(caughtPlayer))
    {
        with (caughtPlayer)
        {
            spriteX = 13;
            playerPalette(); // Reset colors
            
            // player wiggle
            if (image_xscale != other.caughtXScalePrev)
            {
                other.caughtTimer++;
            }
            other.caughtXScalePrev = image_xscale;
            if(isLocked(other.honeyLock))
            {
                lockPoolRelease(other.honeyLock);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!dead &amp;&amp; !global.frozen &amp;&amp; !global.timeStopped)
{
    if (!instance_exists(caughtPlayer))
    {
        with (objMegaman)
        {
            with (other)
            {
                if (place_meeting(x, y, other) &amp;&amp; other.ground /*&amp;&amp; other.bbox_bottom &lt;= bbox_bottom */ )
                {
                    caughtPlayer = other.id;
                    caughtXScalePrev = other.image_xscale;
                    other.xspeed = 0;
                    other.isSlide = 0;
                    honeyLock = lockPoolLock(
                        other.localPlayerLock[PL_LOCK_MOVE],
                        other.localPlayerLock[PL_LOCK_SLIDE],
                        other.localPlayerLock[PL_LOCK_GRAVITY],
                        other.localPlayerLock[PL_LOCK_SHOOT],
                        other.localPlayerLock[PL_LOCK_CLIMB]);
                }
            }
        }
    }
    else
    {
        // trap player
        with (caughtPlayer)
        {
            climbing = false;
            isShoot = 0;
            isSlide = false;
            mask_index = mskMegaman;
            xspeed = 0;
        }
        caughtPlayer.x = x;
        caughtPlayer.y = y - (caughtPlayer.bbox_bottom - caughtPlayer.y) + 1;
        
        // time player is caught
        if (caughtTimer &gt;= 8 + ((global.difficulty == DIFF_HARD) * 2))
        {
            honeyLock = lockPoolRelease(honeyLock);
            instance_create(x, y, objExplosion);
            instance_destroy();
            exit;
        }
    }
    
    // despawn timer
    despawnTimer += 1;
    if (despawnTimer &gt;= 370)
    {
        honeyLock = lockPoolRelease(honeyLock);
        instance_destroy();
        exit;
    }
    else if (despawnTimer &gt;= 300)
    {
        if (despawnTimer mod 2)
        {
            visible = !visible;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
