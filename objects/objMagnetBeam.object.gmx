<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagnetBeam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 0;
inWater = -1;

isSolid = 2;

// magnet beam never hits enemies
canHit = false;

despawnRange = -1;

// magnet beam specific:
extendSpeed = 4;
extended = 0;

// timers
timer = 0;
deathTimer = 0;

// is currently extending
growing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    timer += 1;
    
    if (growing)
    {
        growing = false;
        if (instance_exists(parent))
        {
            with (parent)
            {
                if (global.keyShoot[playerID] &amp;&amp; global.ammo[playerID, global.weapon[playerID]] &gt; 0)
                {
                    if (!playerIsLocked(PL_LOCK_SHOOT))
                    {
                        // drain ammo
                        global.ammo[playerID, global.weapon[playerID]] = max(0, global.ammo[playerID, global.weapon[playerID]] - 1 / 30 / (global.energySaver + 1));
                        
                        // Shoot a dummy bullet to get Mega Man's shoot coordinates
                        i = fireWeapon(20, -3, prtPlayerProjectile, 0, 0, 0, 0);
                        other.x = i.x;
                        other.y = i.y;
                        with (i)
                        {
                            instance_destroy();
                        }
                        
                        other.image_xscale = image_xscale;
                        other.image_yscale = image_yscale;
                        
                        other.growing = true;
                        shootTimer = 0;
                        isShoot = 1;
                    }
                }
            }
        }
        
        extended += extendSpeed;
        deathTimer = extended / 4 + (2.5 * room_speed);
    }
    else
    {
        deathTimer--;
        if (!deathTimer)
        {
            event_user(EV_DEATH);
        }
    }
    
    image_xscale = floor(max(16, extended) / sprite_get_width(sprite_index)) * sign(image_xscale);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// EV_WEAPON_CONTROL

if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    i = fireWeapon(20, -3 * image_yscale, objMagnetBeam, 3, 1, 1, 0);
    if (instance_exists(i))
    {
        playSFX(sfxBlockZap);
        i.xst = i.x - x;
        i.yst = i.y - y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("MAGNET BEAM", -1, -1, sprWeaponIconsMagnetBeam);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    // flicker before disappearing:
    if (growing || deathTimer &gt;= 48 || (deathTimer mod 12 &gt;= 6))
    {
        var length = abs(floor(sprite_width));
        var sLength = length;
        var img = sprite_get_width(sprite_index) - ((timer / 2) mod sprite_get_width(sprite_index));
        
        while (length &gt; 0)
        {
            var draw = min(sprite_get_width(sprite_index) - img, length);
            
            draw_sprite_part_ext(sprite_index, 0, img, 0, draw, sprite_height * image_yscale, round(x) + ((sLength - length) * sign(image_xscale)), round(y), sign(image_xscale), image_yscale, global.primaryCol[playerID], 1);
            draw_sprite_part_ext(sprite_index, 1, img, 0, draw, sprite_height * image_yscale, round(x) + ((sLength - length) * sign(image_xscale)), round(y), sign(image_xscale), image_yscale, global.secondaryCol[playerID], 1);
            
            length -= draw;
            img = 0;
        }
        
        for (var i = 0; i &lt; 2; i++)
        {
            var xs = 0;
            
            if (i == 0)
            {
                var xs = sLength * sign(image_xscale);
            }
            else if (growing)
            {
                continue;
            }
            
            draw_sprite_ext(sprMagnetBeamEnd, floor(timer / 4), x + xs, round(y), 1, image_yscale, image_angle, global.primaryCol[playerID], image_alpha);
            draw_sprite_ext(sprMagnetBeamEnd, floor(timer / 4) + 1, x + xs, round(y), 1, image_yscale, image_angle, global.secondaryCol[playerID], image_alpha);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
