<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHologran</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// It can obscure the terrain by creating a hologram that causes the whole screen to go black
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

blockCollision = 0;
grav = 0;

// Enemy specific code
phaseTimer = 0;
phase = 0;
attackTimer = 0;
dir = 1;
delay = 32;
calibrateDirection();


//creation code
spd = 0.5; //how fast the hologran moves
radius = 96; //detection radius of target

//creation code speed of backgound
fadeSpeed = 1 /15; //how quickly the effect fades in and out
bgSFX = noone; //if set, play sound when creating background
col = c_black; //color of background
var i = 0;
starbg[i] = bgStarFieldBackground;
starshift[i] = 0; //starting shift of background layer 
starspeed[i] = 1; //how fast the layer moves. set to negative to move left instead of right.
i++;
starbg[i] = bgStarFieldMiddleground; //if these are set to 'noone' then do not display this layer.
starshift[i] = 24;
starspeed[i] = 0.5; 
i++;
starbg[i] = bgStarFieldForeground;
starshift[i] = 32;
starspeed[i] = 0.25; 
i++;
//you can add addittional layers, but all variables need to be set per layer.
//copy the code between /* */ for a new layer and edit variables as needed.
/*

starbg[i] = bgStarFieldBackground;
starshift[i] = 24;
starspeed[i] = 0.75; 
i++;

*/

//projectiles
//by default hologran has no attacks but you can create one using these variables.
childObject = noone; //if set, also create this when starting background

childSprite = noone; //if set, override child object sprite to this sprite
childImageSpeed = noone; //if set, override child object image speed to this.
childSFX = noone; //if set, play this sound when shooting
attackTimerDelay = 32; //how long before it attacks
attackTimerMax = 32; //how long between 'attacks' before shooting again. set to -1 to attack once.
childSmoke = objExplosion; //if set, also create this alongside the child object
childSmokeSprite = sprExplosion;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        if (phase == 0)
        {
            facePlayer = true;
            xspeed = image_xscale * spd;
            image_xscale = 1;
            if (abs(target.x - x) &lt;= radius)
            {
                facePlayer = false;
                phase = 1;
                dir = sign(xspeed);
                xspeed = 0;
            }
        }
    }
    
     if (instance_exists(objHologranVoid)) //create projectiles/OBJECTS  if set
    {
        if (childObject != noone) //skip this entire thing if no childobject set. which is the default.
        {
            if (delay &gt; 0)
            {
                delay --;
            }
            else
            {
                if (attackTimer != -1)
                    attackTimer ++;
                
            }
            
            if (attackTimerMax != -1 &amp;&amp; attackTimer &gt;= attackTimerMax || attackTimer &gt; -1 &amp;&amp; attackTimerMax == -1)
            {
                if (attackTimerMax == -1)
                    attackTimer = -1;
                else
                    attackTimer = 0;
                    
                if (childSFX != noone)
                    playSFX(childSFX);
            
                    with (instance_create(x,bbox_bottom -2,childObject))
                    {
                        if (other.childSprite != noone)
                            sprite_index = other.childSprite;
                        if (other.childImageSpeed  != noone)
                            image_speed = other.childImageSpeed;
                        image_xscale = other.image_xscale;
                        respawn = false;
                        if (other.childSmoke != noone)
                        {
                            var cs = other.childSmokeSprite;
                            with (instance_create(spriteGetXCenter(),spriteGetYCenter(),other.childSmoke))
                            {
                                if (cs != noone)
                                {
                                    sprite_index = cs;
                                }
                            }
                        }
                            
                    }
            }
        }
    }
    
    if (phase)
    {
        phaseTimer += 1;
       
        
        if (phase == 1)
        {
            if (phaseTimer == 5)
            {
                phase += 1;
                phaseTimer = 0;
                image_index = 1;
                if (!instance_exists(objHologranVoid))
                {
                    if (bgSFX != noone)
                        playSFX(bgSFX);
                    var hv = instance_create(x, y, objHologranVoid);
                    for (var i = 0; i &lt; array_length_1d(starbg); i++)
                    {
                        hv.starbg[i] = starbg[i];
                        hv.starshift[i] = starshift[i];
                        hv.starspeed[i] = starspeed[i];
                        hv.parent = id;
                        hv.parentObject = object_index;
                        hv.col = col;
                        hv.fadeSpeed = fadeSpeed;

                    }
                }
            }
        }
        else if (phase == 2)
        {
            if (phaseTimer == 5)
            {
                phase += 1;
                phaseTimer = 0;
                image_index = 2;
            }
        }
        else if (phase == 3)
        {
            if (phaseTimer == 5)
            {
                phase += 1;
                phaseTimer = 0;
                image_index = 0;
            }
        }
        else if (phase == 4)
        {
            if (phaseTimer == 50)
            {
                phase = -1;
                phaseTimer = 0;
            }
        }
    }
    if (phase == -1)
    {
        xspeed = dir * (spd*0.5);
    }
}
else if (dead)
{
    phase = 0;
    phaseTimer = 0;
    delay = attackTimerDelay;
    attackTimer = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
