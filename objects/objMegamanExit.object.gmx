<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMegamanTeleport</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>prtEffect</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

despawn = false;

type = 1;

timer = 0;
drawMe = 1;

pid = 0;
cid = 0;

myRoom = -1;
X = -1;
Y = -1;
dir = 1;
newStage = false;
returnToHub = true;
isExternal = false;

// not necessary -- can just set myRoom if it's in a typical level location (Levels/, Entries/, SubLevels/)
externalRoomFilename = "";

teleportLock = -1;

warpOutSFX = getGenericSFX(SFX_TELEOUT);

didEvent = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objCoOpWarpStar)
{
    event_user(EV_DEATH);
}

if (type != 1)
{
    instance_destroy();
}

//Get our room
if (!isExternal) //Internal
{
    if (is_string(myRoom) &amp;&amp; myRoom != "")
    {
        // 'isExternal' is not always set reliably -- this is just for safety.
        myRoom = getRoom(myRoom);
    }
}
else //External
{
    if (externalRoomFilename != "")
    {
        myRoom = externalRoomFilename;
        //roomExternalClear(externalRoomFilename);
        /*MaGMML3-&gt;Megamix 1.9 bug: Above seems to crash on ShowcaseHUB teleporters, potentially due to trying to clear and reload while anotherERL object is already avtive.
        */
        myRoom = roomExternalLoad(externalRoomFilename);
    }
}

if (returnToHub) // Back to the hub
{
    returnFromLevel(true, true);
}
else if (myRoom &gt;= 0) // Go to another room 
{
    global.hasTeleported = 1;
    global.teleportX     = X;
    global.teleportY     = Y;
    global.teleportDir   = dir;
    
    global.usedDoor = (type == 3);
    
    if (!global.usedDoor &amp;&amp; global.respawnAnimation == 4)
    {
        global.respawnAnimation = 0;
    }
    
    if (newStage) // Begin new a stage
    {
        goToLevel(myRoom, true);
    }
    else // Just go to the room
    {
        global.nextRoom = myRoom;
    }
}
else //Just go to another position in the room
{

    global.frozen = false;
    var txt = "";
    var add = 0;
    
    var firstID = 0;

    with (objMegaman)
    {
        x = other.X;
        y = other.Y;
        txt += string(x) + "x / " + string(y) + "y #";
        image_xscale = other.dir;
        //add ++;
        if (firstID == 0)
            firstID = id;
        
        xspeed = 0;
        yspeed = 0;
        
        iFrames = 0;
        isSlide = false;
        mask_index = mskMegaman;
        slideTimer = 0;
        isShoot = false;
        dieToPit = false;
        if (global.playerHealth[playerID] &gt; 0)
        {
            visible = 1;
            dead = false;
        }
        
        var myPlayer = 0;
        if (playerID == other.pid)
        {
            myPlayer = playerID;
        }
        
    }
    with (objMegaman)
    {
        //if (add == global.playerCount)
        if (firstID == id)
        {
            setSection(other.X, other.Y, 1);
            playerCamera(1);
            reAndDeactivateObjects(1, 1);
        }
        if (global.playerHealth[playerID] &gt; 0)
        {
            visible = 1;
            dead = false;
        }
    }
    with (objMegaman)
    {
        if (other.type &lt; 3 &amp;&amp; global.playerHealth[playerID] &gt; 0)
        {
            teleporting = 1;
            teleportTimer = 0;
            landy = y;
            
            teleportLock = lockPoolLock(
                localPlayerLock[PL_LOCK_MOVE],
                localPlayerLock[PL_LOCK_PHYSICS],
                localPlayerLock[PL_LOCK_SHOOT],
                localPlayerLock[PL_LOCK_CLIMB],
                localPlayerLock[PL_LOCK_CHARGE],
                localPlayerLock[PL_LOCK_PAUSE],
                localPlayerLock[PL_LOCK_TURN],
                localPlayerLock[PL_LOCK_GRAVITY],
                localPlayerLock[PL_LOCK_SLIDE],
                );
        }
        dieToPit = true;
        
        
    }
            
    
   // clipboard_set_text(txt);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer ++;

var t = floor(timer * 0.3);

if (type &lt; 3)
{
    var ximg = 10;
    var yimg = 8;
    
    switch (floor(t))
    {
        case 0:
            ximg += 2;
            break;
        case 1:
            ximg += 0;
            if (!audio_is_playing(warpOutSFX))
            {
                playSFX(warpOutSFX);
            }
            break;
        case 2:
            ximg += 1;
            break;
        case 4:
            if (type == 1)
            {
                vspeed = -8;
            }
            else
            {
                drawMe = 0;
            }
            break;
    }
}
else
{
    var ximg = 3;//0 + min(4, t);
    var yimg = 6;//11;
    
    if (type == 4)
    {
        ximg = 0;
        yimg = 0;
    }
    
    if (t == 0)
    {
        if (!audio_is_playing(sfxDoorEnter))
        {
            playSFX(sfxDoorEnter);
        }
    }
}

if (!didEvent)
{
    if (t == 9)
    {
        if (audio_is_playing(warpOutSFX) &amp;&amp; (myRoom != -1))
        {
            timer --;
        }
        else
        {
            event_user(0);
            didEvent = 1;
        }
    }
}

if (drawMe)
{
    drawPlayer(pid, cid, ximg, yimg, x, y, image_xscale, image_yscale);
}

// stop moving pls
with (objMegaman)
{
    xspeed = 0;
    yspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
