<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// FMOD Init
LoadFMOD();
FMODInit(5, false); // If you somehow have over 200 pieces of music, increase this number
global.tempSongData = -1;
global.songMemory = -1;

// GME Init

// It seems that when sending a pointer to a dll, only one argument can be defined,
// any other arguments won't work.

// Instance variables
snd_queue = noone;
buffer_gme = noone;
buffer_gme_address = 0;
buffer_gme_size = 0;
playing = false;
endReached = true;
track_number = -1;
forceReset = false;

// Buffer size in the dll is 2048 16-bit values (2 bytes per value)
// so the gms buffers need to be 4096 bytes big.
buffer_size = 1520; // 16384;

// The number of audio buffers (five buffers will be a total of 5*2048B = 10240B ~ 10KB
buffer_count = 7; // 3;

// Buffer index is used to keep track of current buffer to fill / add to queue
buffer_index = 0;

// Sample rate is hardcoded to 44100 in the dll
sample_rate = 44100;

// Create the audio buffers
for (var i = 0; i &lt; buffer_count; i++)
{
    buf[i] = buffer_create(buffer_size, buffer_fixed, 2);
    bufPointer[i] = string(buffer_get_address(buf[i]));
    buffer_fill(buf[i], 0, buffer_u8, 0, buffer_size);
}

sound_index = noone;
trackNumber = -1;

// misc
global.levelSong = "";
global.levelSongType = "OGG";
global.levelTrackNumber = 0;

global.levelLoopStart = 0;
global.levelLoopEnd = 1;

global.levelLoop = 1;
global.levelVolume = 1;
global.songMemory = -1;

// (ike voice) prepare yourself
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Music volume
audio_sound_gain(sound_index, global.levelVolume * (global.musicvolume * 0.01), 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FMOD update
FMODUpdate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GME step

// The following is a check to refill audio buffers
// if playing has stopped unexpectedly from moving window etc.
if (playing &amp;&amp; !endReached &amp;&amp; !audio_is_playing(snd_queue))
{
    // Fill all the audio buffers with song data and add to queue
    for (var i = 0; i &lt; buffer_count; i++)
    {
        endReached = !GameMusicEmu_Read(bufPointer[i]);
        audio_queue_sound(snd_queue, buf[i], 0, buffer_size);
        if (endReached)
        {
            break;
        }
    }
    
    // Play the queue
    audio_play_sound(snd_queue, 10, false);
    buffer_index = 0;
    
    // the GME extension got a glitch in a Game Maker Studio update that made
    // songs start a bit into the track instead of at the beginning. This is
    // a workaround for that
    if (forceReset)
    {
        // unmute after being muted in playMusic()
        for (var v = 0; v &lt;= song_voices; v++)
        {
            GME_MuteVoice(v, false);
        }
        
        GME_SetPosition(0);
        
        forceReset = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fill an audio buffer and add it to the queue

if (playing &amp;&amp; !endReached)
{
    // Fill the buffer with audio data
    endReached = !GameMusicEmu_Read(bufPointer[buffer_index]);
    
    // Add the buffer to the queue
    audio_queue_sound(snd_queue, buf[buffer_index], 0, buffer_size);
    
    // Increase the buffer index and wrap to zero if last buffer has been queued
    buffer_index++;
    if (buffer_index &gt;= buffer_count)
    {
        buffer_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all audio
audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unload possible file
if (buffer_gme != noone)
{
    GameMusicEmu_Free();
    buffer_delete(buffer_gme);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
