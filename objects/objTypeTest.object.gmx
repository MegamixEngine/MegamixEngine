<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
keyboard_string = ""; //clear keyboard_string before starting
tempKeyboardString = "";

bottomText = "FONT/TEXTBOX TYPE TESTER - Press left/right to change font, up to spawn a dialog box with the current text, CTRL+V to paste from clipboard. WARNING: Text will clear when unfocused!"
bottomTextPos = -256;

//should be future-proof if any new fonts are added
currentFont = 0;
fonts[0] = global.font;
fonts[1] = global.font2;
fonts[2] = global.fontSmall;
fonts[3] = global.fontSmall2;
fonts[4] = global.fontTiny;
fonts[5] = global.fontElementMan;

compressDaku = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(objDialogueBox)
{
    currentFont += (keyboard_check_pressed(vk_left)*-1) + (keyboard_check_pressed(vk_right)*1);
    currentFont = clamp(currentFont, 0, array_length_1d(fonts)-1);
    
    //Enter adds line breaks
    if keyboard_check_pressed(vk_enter)
    {
        keyboard_string += "#";
    }

    //Add escape characters to typed #'s
    if (keyboard_lastchar == "#")
    {
        keyboard_string = string_insert("\",keyboard_string,string_length(keyboard_string));
        keyboard_lastchar = "";
    }

    if keyboard_check_direct(vk_lcontrol) and keyboard_check_pressed(ord("V"))
    {
        keyboard_string += clipboard_get_text();
    }

    if keyboard_check_pressed(vk_up)
    {
        tempKeyboardString = keyboard_string;
        spawnTextBoxSingleString(0,-1,"Textbox Test",-1,stringFormat(keyboard_string),currentFont);
    }

    if bottomTextPos &gt; (string_length(bottomTextPos)+1600)
    {
        bottomTextPos = -256;
    }
    else
    {
        bottomTextPos++
    }
}
else
{
    keyboard_string = tempKeyboardString; //prevent keyboard_string from adding more text when textbox exists
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clearDrawState();
draw_set_font(fonts[currentFont]);
if (currentFont = 4)
{
    draw_text_ext(x+1,y+1,stringFormat(keyboard_string),-1,256);
    d3d_set_fog(true, c_white, 0, 0);
    draw_text_ext(x,y,keyboard_string,-1,256);
    d3d_set_fog(false, 0, 0, 0);
}
else
{
    draw_text_ext(x,y,stringFormat(keyboard_string),-1,256);
}

draw_set_font(global.font);

draw_background(bgStarFieldBackground,x,y+216)
draw_text(0,y+216-8,"FONT ID: " + string(currentFont));
draw_set_font(global.fontTiny);
draw_text(x-roundTo(bottomTextPos,8),y+216,bottomText);
draw_set_font(global.font);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
