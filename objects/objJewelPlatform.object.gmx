<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJewelPlatformPlace</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

isSolid = true;

blockCollision = false;
doesTransition = false;
bubbleTimer = -1;

// this can be adjusted
radius = 83;
hingeX = x;
hingeY = y + 6;
tetherSpacing = 22.5;
fric = 0.993;
walkAccel = 0.06;
initStepBoost = 0.7; // a bit of boost from first step
grav = 0;
trueGrav = 0.25;
respawnRange = -1; // set to -1 to make infinite
despawnRange = -1; // set to -1 to make infinite

// don't edit these
initStepBoostDir = 0;
playedSFX = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (sprite_index == sprJewelPlatformPlace)
{
    y += 83 + 6;
    ystart += 83 + 6;
    sprite_index = sprJewelPlatform;
}

if (!global.frozen)
{
    var sinY = abs((y - hingeY) / radius);
    var cosX = abs((x - hingeX) / radius);
    isSolid = true;
    if (dead)
        beenOutsideView = true;
    
    // mega man gives boost:
    var accel = false
        ;
    with (objMegaman)
    {
        if (ground &amp;&amp; place_meeting(x, y + 2*gravDir, other))
        {
            var xDir = global.keyRight[playerID] - global.keyLeft[playerID];
            if ((stepTimer &gt;= stepFrames &amp;&amp; !playerIsLocked(PL_LOCK_MOVE) &amp;&amp; ground &amp;&amp; (xDir == image_xscale)) || isSlide)
            {
                // walking
                other.xspeed += image_xscale * other.walkAccel * sinY * sinY;
                accel = true;
                if (sign(other.xspeed) != other.initStepBoostDir &amp;&amp; image_xscale != sign(-other.xspeed))
                {
                    other.xspeed += image_xscale * other.initStepBoost * abs(sinY);
                    other.initStepBoostDir = image_xscale;
                }
                
                // play sfx
                if (!other.playedSFX)
                {
                    playSFX(sfxJewelPlatform);
                    other.playedSFX = 1;
                }
            }
        }
        else
        {
            other.playedSFX = 0;
        }
    }
    
    // friction
    xspeed *= fric;
    yspeed *= fric;
    
    // extra friction for end
    if (abs(x - hingeX) &lt; 2 &amp;&amp; abs(xspeed) &lt; initStepBoost &amp;&amp; !accel)
        xspeed *= 0.91;
    if (abs(x - hingeX) &lt; 7 &amp;&amp; abs(xspeed) &lt; 1.5 &amp;&amp; !accel)
        xspeed *= 0.99;
    if (!insideView())
        xspeed *= 0.90;
    
    // circular motion logic
    yspeed += trueGrav;
    
    var dotx = (x - hingeX);
    var doty = (y - hingeY);
    var dotrad = max(1, point_distance(0, 0, dotx, doty));
    dotx /= dotrad;
    doty /= dotrad;
    var tanspeed = dot_product(xspeed, yspeed, doty, -dotx);
    
    xspeed = doty * tanspeed;
    yspeed = -dotx * tanspeed;
    var nextX = x + xspeed;
    var nextY = y + yspeed;
    var _rad_actual = point_distance(hingeX, hingeY, nextX, nextY);
    nextX = hingeX + (nextX - hingeX) * radius / _rad_actual;
    nextY = hingeY + (nextY - hingeY) * radius / _rad_actual;
    
    xspeed = (nextX - x);
    yspeed = (nextY - y);
    
    if (sign(xspeed) != initStepBoostDir)
        initStepBoostDir = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hingeX + 16 &lt; view_xview[0] || hingeX - 16 &gt; view_xview[0] + view_wview[0])
{
    exit;
}

// tether
for (var i = 0; i &lt; (radius - 9) / tetherSpacing; i++)
{
    var p = i * tetherSpacing / radius;
    var imgIndex = 0;
    
    // special frame for top hinge:
    if (positionCollision(hingeX - x, (hingeY - 2) - y) &amp;&amp; i == 0)
        imgIndex = 1;
    draw_sprite(sprJewelPlatformTether, imgIndex,
        round(hingeX * (1 - p) + x * p), floor(hingeY * (1 - p) + y * p));
}

drawSelf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
