<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWaterPump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canHit = false;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

shiftVisible = 1;
xs = 0;
ys = 0;
that = 0;

if (image_angle == 90)
{
    dir = "left";
    image_angle = 0;
    y -= 16;
    ystart -= 16;
}
else if (image_angle == 180)
{
    dir = "down";
    image_angle = 0;
    y -= 16;
    x -= 16;
    xstart -= 16;
    ystart -= 16;
}
else if (image_angle == 270)
{
    dir = "right";
    image_angle = 0;
    x -= 16;
    xstart -= 16;
}
else
{
    dir = "up";
}

//@cc
startTimer = 60;

//@cc
activeTimer = 120;

//@cc 0: only pushes players, 1 pushes all entities with gravity and collision detection
mode = 0;

length = 0;
timer = 0;

// variables
plat = noone;

isSolid = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    timer += 1;
    if (timer &gt; startTimer &amp;&amp; length &lt; 64)
    {
        length += 2;
    }
    
    if (timer &gt; startTimer &amp;&amp; dir == "up")
    {
        if (!instance_exists(plat))
        {
            plat = instance_create(x, y + 4, objStandSolid);
        }
        else
        {
            plat.y = y + 4 - length;
            plat.image_yscale = (length / 64) * 4;
        }
    }
    else
    {
        if (instance_exists(plat))
        {
            with (plat)
            {
                instance_destroy();
            }
        }
    }
    
    if (timer &gt;= startTimer + activeTimer)
    {
        timer = 0;
        length = 0;
    }
    
    that = 0;
    var obj = objMegaman;
    if(mode)
    {
        obj = prtEntity;
    }
    with (obj)
    {
        if(dead || !blockCollision || grav == 0)
        {
            continue;
        }
        with (other)
        {
            that = other.id;
            if (dir == "left" &amp;&amp; collision_rectangle(x + 4, y, x - length + 4,
                y + 16 - 3, that, 0, 0))
            {
                xs = -2;
                ys = 0;
                event_user(0);
            }
            if (dir == "right" &amp;&amp; collision_rectangle(x + 16 - 4, y,
                x + 16 + length - 4, y + 16 - 3, that, 0, 0))
            {
                xs = 2;
                ys = 0;
                event_user(0);
            }
            if (dir == "down" &amp;&amp; collision_rectangle(x, y + 16 - 4, x + 16 - 3,
                y + 16 + length - 4, that, 0, 0))
            {
                xs = 0;
                ys = 2;
                event_user(0);
                if (!that.ground)
                {
                    that.yspeed += 0.1;
                }
            }
            if (dir == "up" &amp;&amp; collision_rectangle(x, y + 4, x + 16 - 3,
                y - length + 4, that, 0, 0))
            {
                xs = 0;
                ys = -2;
                event_user(0);
            }
        }
    }
}
else if (dead || instance_exists(objSectionSwitcher))
{
    length = 0;
    timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (that)
{
    shiftObject(other.xs, other.ys, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var X = 0;
var Y = 0;
var xDir = 1;
var yDir = 1;
var angle = 0;

if (dir == "up")
{
    draw_sprite_part_ext(sprWaterPillar, timer / 4, 0, 0, 16, length,
        round(x) + 8 - sprite_get_xoffset(sprWaterPillar),
        round(y) - length - sprite_get_yoffset(sprWaterPillar),
        image_xscale, image_yscale, image_blend, image_alpha);
}
if (dir == "down")
{
    X = 0;
    Y = 16;
    xDir = -1;
    angle = 180;
    draw_sprite_part_ext(sprWaterPillar, timer / 4, 0, 0, 16, length,
        round(x) + 8 - sprite_get_xoffset(sprWaterPillar),
        round(y) + 16 + length, image_xscale, -image_yscale, image_blend,
        image_alpha);
}
if (dir == "left")
{
    X = 0;
    Y = 0;
    xDir = -1;
    angle = 90;
    draw_sprite_part_ext(sprWaterPillarH, timer / 4, 0, 0, length, 16,
        round(x) + 8 - length - sprite_get_xoffset(sprWaterPillar),
        round(y), image_xscale, image_yscale, image_blend, image_alpha);
}
if (dir == "right")
{
    X = 16;
    Y = 0;
    angle = 270;
    draw_sprite_part_ext(sprWaterPillarH, timer / 4, 0, 0, length, 16,
        round(x) + 16 + length, round(y), -image_xscale, image_yscale,
        image_blend, image_alpha);
}

draw_sprite_ext(sprWaterPump, timer / 4, round(x) + X, round(y) + Y,
    image_xscale * xDir, image_yscale * yDir, angle, image_blend,
    image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
