<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBrightPlatformDrop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A moving platform that moves in an arc, the distance and its direction an be customized
// note: if you want the platform to not fall, put the next line in the creation code
// sprite_index = sprBrightPlatform
// or
// sprite_index = sprBrightPlatformGreen

// wait = ;
// dir = ; (1 = start on left, -1 start on right)

event_inherited();
canHit = false;

grav = 0;
blockCollision = 0;
bubbleTimer = -1;

isSolid = 2;

respawn = true;

image_speed = 0.2;
offset = 0;

//@cc
wait = 5;

//@cc
distance = 16 * 3;

//@cc
dir = 1;

//@cc
init = 1;

phase = 0;
waitMemory = wait;
startDistance = distance;
startDirection = dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    
    waitMemory = wait;
    startDistance = distance;
    startDirection = direction;
    
    x = x + (cos(((offset * 360) / 180) * pi) * distance);
    y = (y - 8) - (sin(((offset * 360) / 180) * pi) * distance);
    
    if (sprite_index != sprBrightPlatformDrop)
    {
        respawnRange = -1;
        despawnRange = -1;
    }
}

event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (phase == 0)
    {
        with (target)
        {
            if (place_meeting(x, y + 1, other.id) &amp;&amp; ground)
            {
                if (!place_meeting(x, y, other.id))
                {
                    other.phase = 1;
                }
            }
        }
    }
    if (phase != 0)
    {
        if (phase == 1)
        {
            if (offset &lt; 0.5)
                offset += 0.5 / (20 + sin(offset * pi * 2) * 80);
            else
                phase = 2;
        }
        if (phase == 2)
        {
            if (sprite_index == sprBrightPlatformDrop)
            {
                if (yspeed &lt; 0)
                    yspeed = 0;
                yspeed += 0.3;
                xspeed = 0;
            }
            else
            {
                yspeed = 0;
                if (wait &gt; 0)
                    wait -= 1;
                else
                {
                    wait = waitMemory;
                    if (offset &gt; 0)
                        phase = 3;
                    else
                        phase = 1;
                }
            }
        }
        if (phase == 3)
        {
            if (offset &gt; 0)
                offset -= 0.5 / (20 + sin(offset * pi * 2) * 80);
            else
                phase = 2;
        }
    }
    if (phase != 2)
    {
        xspeed = (((xstart + distance * dir)
            + cos((((offset - 0.5) * 360) / 180) * pi)
            * dir * distance)) - x;
        yspeed = ((ystart - 8)
            + abs(sin((((offset - 0.5) * 360) / 180) * pi) * distance)) - y;
    }
}
else if (dead)
{
    phase = 0;
    offset = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
