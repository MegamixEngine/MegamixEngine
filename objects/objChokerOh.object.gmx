<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChockerOh</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;


category = "semi bulky";

facePlayer = true;

// Enemy specific code
phase = 0;
shootWait = 60;
shots = 0;
shootTimer = 0;

sinCounter = 0;

imgSpd = 0.05;
imgIndex = 0;

image_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(xcoll!=0)
{
    xspeed=xcoll;
}


if (entityCanStep())
{
    switch (phase)
    {
        case 0: // idle
        // animation 
            imgIndex = (imgIndex + imgSpd) mod 2;
            
            // detect when a player projectile is approaching
            with (prtEntity)
            {
                if (!dead)
                {
                    if (contactDamage)
                    {
                        if (global.factionStance[faction, other.faction])
                        {
                            if (abs(other.x - x) &lt; 40)
                            {
                                if (bbox_bottom &gt;= other.bbox_top &amp;&amp; bbox_top &lt;= other.bbox_bottom
                                    &amp;&amp; (sign(xspeed + hspeed) == sign(other.x - x)))
                                {
                                    with (other)
                                    {
                                        phase = 2;
                                        shootTimer = 0;
                                        imgIndex = 2;
                                        xspeed = 2 * image_xscale;
                                        yspeed = -3.2; // &lt;-- jump speed here
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // wait to shoot
            shootTimer += 1;
            if (shots &lt; 3)
            {
                if (shootTimer &gt;= shootWait)
                {
                    phase = 1;
                    imgIndex = 3;
                    shootTimer = 0;
                }
            }
            else
            {
                if (shootTimer &gt;= 130)
                {
                    shots = 0;
                    shootTimer = 0;
                }
            }
            
            break;
        case 1: // shoot
        // animation 
            imgIndex = min(4, imgIndex + (imgSpd * 6));
            
            if (instance_exists(target))
            {
                shootTimer += 1;
            }
            
            if (shootTimer &gt;= 30)
            {
                phase = 0;
                shootTimer = 0;
                imgIndex = 0;
                shots += 1;
                
                var projectileX = x + sprite_width * 0.3;
                var projectileY = y - 14;
                var projectileDirection = point_direction(projectileX, projectileY, target.x, target.y);
                
                var directionMax = 75; // &lt;-- projectile angle limits here
                
                if (abs(((image_xscale &lt; 0) * 180) - abs(projectileDirection - (projectileDirection &gt; 180) * 360)) &lt;= directionMax)
                {
                    var projectile = instance_create(projectileX, projectileY, objEnemyBullet);
                    projectile.xspeed = 0;
                    projectile.yspeed = 0;
                    
                    projectile.spd = 2; // &lt;-- speed here
                    projectile.dir = projectileDirection;
                    
                    projectile.sprite_index = sprEnemyBulletMM6;
                    
                    playSFX(sfxEnemyShoot);
                }
            }
            break;
        case 2: // jump 
            if (ground)
            {
                phase = 0;
                imgIndex = 0;
                xspeed = 0;
            }
            break;
    }
    
    facePlayer = (phase != 2);
}
else if (dead)
{
    phase = 0;
    shootTimer = 0;
    shots = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
