<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSkullElevator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// X = ;
// Y = ;
// myroom = ;
// exitType = ; (0 = none (default), 1 = shrink, 2 = rise)

event_inherited();
canHit = false;

image_speed = 0;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

despawnRange = -1;
respawnRange = -1;

travel = 4; // in blocks
myFlag = 0;
y = ystart + (travel * 16);
active = false;
exitTimer = 60;

// Creation Code variables
myRoom = room;
X = -1;
Y = -1;
exitType = 0;

//@cc 0 = teleport land, 1 = teleport in, 2 = fall in, 3 = Jump in, 4 = stand there (set showDuringReady to true), 8 = Skull elevator
respawnAnimation = 8;

mask = instance_create(x, ystart + (travel * 16) - 4, objSkullElevatorMask);

with (mask)
{
    parent = other.id;
    image_xscale = other.image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if ((!global.frozen || active) &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (!(active &amp;&amp; exitType == 2))
    {
        y = ystart + ((travel * 16) * (1 - global.flag[myFlag]));
        
        if (y != ystart + ((travel * 16) * round(1 - global.flag[myFlag])))
        {
            if (!instance_exists(objSplash))
            {
                instance_create(x + 16, ystart + 2, objSplash);
                instance_create(x - 16, ystart + 2, objSplash);
                instance_create(x, ystart + 2, objSplash);
                
                with (objSplash)
                {
                    blockCollision = 0;
                    active = true;
                }
            }
        }
    }
    
    if (place_meeting(x, y, objMegaman) &amp;&amp; global.flag[myFlag] == 1)
    {
        var player = instance_place(x, y, objMegaman);
        if (((player.x &gt;= x &amp;&amp; image_xscale == 1 &amp;&amp; player.x &lt; x + sprite_width - 2)
            || (player.x &lt;= x &amp;&amp; image_xscale == -1 &amp;&amp; player.x &gt; x + sprite_width - 2))
            &amp;&amp; (player.y &gt; y - 28))
        {
            global.flagParent[myFlag].active = false;
            active = true;
            queuePause();
            player.visible = false;
        }
    }
    
    if (active)
    {
        if (global.flag[myFlag] &gt; 0 &amp;&amp; exitType == 1)
        {
            global.flag[myFlag] -= 1 / 120;
        }
        else if (exitType == 2 &amp;&amp; y &gt; view_yview)
        {
            y--;
        }
        else if (exitTimer &gt; 0)
        {
            exitTimer--;
        }
        else
        {
            global.hasTeleported = 1;
            global.teleportX = X;
            global.teleportY = Y;
            global.nextRoom = myRoom;
            global.respawnAnimation = respawnAnimation;
        }
    }
}
else if (dead)
{
    yspeed = 0;
    x = xstart;
    y = ystart + ((travel * 16) * (1 - global.flag[myFlag]));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_part_ext(sprite_index, 0, 0, 0, 52,
    sprite_height * global.flag[myFlag],
    round(x) - sprite_xoffset, round(y) - sprite_yoffset - (3 * global.flag[myFlag] &lt;= .93), image_xscale, image_yscale, image_blend, image_alpha);

// Draw the shaft rising upwards
if (y &lt; ystart)
{
    draw_sprite_part(sprSkullElevatorShaft, 0, 0, 0, 48, (ystart - y) mod 16, x - 28, ystart - ((ystart - y) mod 16));
    
    if ((ystart - y) &gt;= 16)
    {
        for (var i = 0; i &lt; floor((ystart - y) / 16); i++)
        {
            draw_sprite(sprSkullElevatorShaft, 0, x - 4, y + i * 16);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
