<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSwimBall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// An aquatic enemy that launches itself horizontally and slightly vertically toward the player. It moves quickly and then drifts to a stop.
/// It will often overshoot its target, so it tends to change directions frequently. Solid objects block its movement.
/// Can be used in or out of water.

event_inherited();

healthpointsStart = 2;
contactDamage = 3;
grav = 0;
bubbleTimer = -1;

category = "aquatic";
facePlayerOnSpawn = true;

imgIndex = 0;
imgSpd = 0.2;
phase = 0;

xs = 0;
targY = 0;
decel = 0.05; // By how much does Swim Ball slow down?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            if (xspeed != 0)
            {
                xspeed -= decel * image_xscale;
            }
            else
            {
                phase = 1;
                calibrateDirection();
                if (image_xscale == 1)
                {
                    xs = bbox_right + 1;
                }
                else
                {
                    xs = bbox_left - 1;
                }
            }
            break;
        case 1:
            if (instance_exists(target))
            {
                targY = target.y;
            }
            
            if (yspeed &lt; 0)
            {
                yspeed += decel;
            }
            else
            {
                yspeed = 0.3;
            }
            
            if (!positionCollision(xs, y))
            {
                imgIndex += imgSpd;
                if (imgIndex &gt; 7)
                {
                    phase = 0;
                    imgIndex = 0;
                    xspeed = 3 * image_xscale;
                    
                    // Set yspeed
                    if (targY &gt; y)
                    {
                        yspeed = 0.5;
                    }
                    else
                    {
                        yspeed = -0.5;
                    }
                }
            }
            else
            {
                phase = 0;
            }
            break;
    }
    
    if (ycoll != 0)
    {
        yspeed *= -ycoll;
    }
}
else if (dead)
{
    healthpoints = healthpointsStart;
    imgIndex = 0.1;
    targY = 0;
    xs = 0;
    phase = 0;
    xspeed = 3 * image_xscale;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
    xspeed = 3 * image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
