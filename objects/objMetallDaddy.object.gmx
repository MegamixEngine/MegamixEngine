<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMetallDaddy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

xOff = 0;
contactDamage = 5;
customPose = true;

ground = false;

attackTimer = 0;
hasTriggeredFall = false;
spreadYspeed = -2;

introType = 0;

bossTriggered = true;
phase = 0;
hasFired = false;
grav = 0.15;

child[0] = noone;
child[1] = noone;
child[2] = noone;
child[3] = noone;

myHat = noone;

hatOffset = 40;
eyeOffset = 0;
eyeTimer = 0;
freeMegaman = 0;
hatFrame = 3;
directX = 1;

// Death anmation variables
isDying = false;
explodeTimer = 0;

// met falling patterns
met1[0] = 48;
met2[0] = 112;
met3[0] = 144;
met4[0] = 208;
met1[1] = 56;
met2[1] = 104;
met3[1] = 152;
met4[1] = 200;
met1[2] = 80;
met2[2] = 112;
met3[2] = 144;
met4[2] = 176;

// Health Bar
healthBarPrimaryColor[1] = 33;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_4.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 2);
enemyDamageValue(objMagneticShockwave, 0);
enemyDamageValue(objIceWall, 2);

// MaGMML2
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 4);
enemyDamageValue(objSakugarne, 0);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objSolarBlaze, 2);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 4);

// MaG48HMML
enemyDamageValue(objFlameMixer, 2);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 2);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 4);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 5);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBrickWeapon, 0);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// leave this. this is needed.
event_inherited();

// all of metall daddy's events trigger when the game isn't frozen.
if (entityCanStep())
{
    // metall daddy's custom intro
    if (startIntro)
    {
        canFillHealthBar = false;
        image_index = 1;
        startIntro = false;
        isIntro = true;
        visible = true;
        y=ystart;
        calibrateDirection();
        yspeed=0;
        grav=0;
    }
    else if (isIntro)
    {
        // custom intro:
        if(y&gt;=ystart)
        {
            image_speed = 0;
            attackTimer += 1;
            if (attackTimer mod 8 == 7 &amp;&amp; hatFrame &lt; 6)
                hatFrame++;
            if (attackTimer == 50)
            {
                myHat = instance_create(x, y + hatOffset, objMetallDaddyHelmet);
                myHat.parent = id;
                canFillHealthBar = true;
                isIntro = false;
                attackTimer = 0;
                hasFired = false;
                grav = gravStart;
                blockCollision = blockCollisionStart;
                with (objMegaman)
                {
                    stunLock = noone;
                }
            }
        }
    }
}
if (entityCanStep())
{
    if (isFight == true)
    {
        myHat.x = x;
        myHat.y = y + hatOffset;
        
        // eye shake animation
        if (eyeTimer &gt; 0)
        {
            eyeTimer--;
        }
        
        switch (eyeTimer)
        {
            case 0:
            case 16:
            case 12:
            case 8:
            case 6:
                eyeOffset = 0;
                break;
            case 40:
            case 32:
            case 24:
                eyeOffset = 4;
                break;
            case 36:
            case 28:
            case 20:
                eyeOffset = -4;
                break;
            case 14:
                eyeOffset = -2;
                break;
            case 15:
            case 13:
            case 7:
                eyeOffset = -1;
                break;
            case 10:
                eyeOffset = 2;
                break;
            case 11:
            case 9:
            case 5:
                eyeOffset = 1;
                break;
        }
        
        attackTimer++;
        switch (phase)
        {
            case 0: // prepare phase! 
                xspeed = 0;
                if (attackTimer == 4 &amp;&amp; hatOffset &gt; 0)
                {
                    hatOffset -= 8;
                    attackTimer = 0;
                }
                if (attackTimer == 80 - ((global.difficulty == DIFF_HARD) * 40))
                {
                    var inst = instance_create(x, y + 19, objExplosion);
                    inst.sprite_index = sprMetallDaddyJump;
                    yspeed = -3.5 - choose(0, 1, 1.5);
                    if (instance_exists(target))
                    {
                        xspeed = xSpeedAim(x, y, target.x, y, yspeed, grav);
                    }
                    if (abs(xspeed) &gt; 1.5)
                    {
                        xspeed = sign(xspeed) * 1.5;
                    }
                    phase = 1;
                    attackTimer = 0;
                }
                break;
            case 1: // jump 
                if (!ground)
                {
                    attackTimer = 0;
                }
                else
                {
                    xspeed = 0;
                    if (!hasFired)
                    {
                        with (objMegaman)
                        {
                            if (ground)
                            {
                                xspeed = 0;
                                yspeed = 0;
                                stunLockP = lockPoolLock(localPlayerLock[PL_LOCK_MOVE],
                                    localPlayerLock[PL_LOCK_TURN],
                                    localPlayerLock[PL_LOCK_SLIDE],
                                    localPlayerLock[PL_LOCK_SHOOT],
                                    localPlayerLock[PL_LOCK_CLIMB],
                                    localPlayerLock[PL_LOCK_SPRITECHANGE],
                                    localPlayerLock[PL_LOCK_GRAVITY],
                                    localPlayerLock[PL_LOCK_JUMP]);
                                stunLock = stunLockP;
                            }
                        }
                        screenShake(72, 2, 2);
                        playSFX(sfxGutsQuake);
                        eyeTimer = 41;
                        hasFired = true;
                    }
                }
                if (attackTimer == 72)
                {
                    for (var i = 0; i &lt; 4; i++)
                    {
                        var offsetMet = 0;
                        var xDirt = -1;
                        var rnd = choose(0, 1, 2);
                        var storeMetVal = 0;
                        switch (i)
                        {
                            case 0:
                                storeMetVal = met1[rnd];
                                break;
                            case 1:
                                storeMetVal = met2[rnd];
                                offsetMet = -32;
                                break;
                            case 2:
                                storeMetVal = met3[rnd];
                                offsetMet = -32;
                                xDirt = 1;
                                break;
                            case 3:
                                storeMetVal = met4[rnd];
                                xDirt = 1;
                                break;
                        }
                        var inst = instance_create(view_xview + storeMetVal, view_yview - 16 + offsetMet, objMetallDaddyChild);
                        inst.parent = id;
                        child[i] = inst.id;
                        inst.image_xscale = xDirt;
                        inst.itemDrop = -1;
                    }
                }
                
                // release player after a certain point
                with (objMegaman)
                {
                    if (other.attackTimer == 88 || isHit)
                    {
                        stunLock = lockPoolRelease(stunLock);
                    }
                }
                
                // hat goes down
                if (attackTimer &gt; 128 &amp;&amp; attackTimer mod 4 == 0 &amp;&amp; hatOffset &lt; 40)
                {
                    hatOffset += 8;
                }
                if (attackTimer &gt;= 164 &amp;&amp; !instance_exists(child[0]) &amp;&amp; !instance_exists(child[1]) &amp;&amp; !instance_exists(child[2]) &amp;&amp; !instance_exists(child[3]))
                {
                    attackTimer = 0;
                    phase = ((global.difficulty == DIFF_HARD) * 2);
                    hasFired = false;
                }
                break;
            case 2: // Hard Mode exclusive bullet spread 
                if (attackTimer == 54 &amp;&amp; hatOffset &gt; 0)
                {
                    hatOffset -= 8;
                    attackTimer = 50;
                }
                if (attackTimer == 75 &amp;&amp; spreadYspeed &lt; 2)
                {
                    playSFX(sfxEnemyShoot);
                    
                    with (instance_create(x, y + 20, objEnemyBullet))
                    {
                        sprite_index = sprMetallCannonBall;
                        depth = other.depth - 1;
                        
                        if (instance_exists(target))
                        {
                            if (target.x &lt; x)
                            {
                                xspeed = -2;
                            }
                            else
                            {
                                xspeed = 2;
                            }
                        }
                        
                        yspeed = other.spreadYspeed;
                    }
                    
                    spreadYspeed += 0.6;
                    attackTimer = 67;
                }
                if (attackTimer == 95)
                {
                    spreadYspeed = -2;
                    attackTimer = 39;
                    phase = 0;
                }
                break;
        }
    }
    // Death Animation
    if (isDying)
    {
        explodeTimer++;
        if (explodeTimer == 2)
        {
            with(instance_create(x-16*image_xscale,y+29*image_yscale,objBigExplosion))
                depth = -2;
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 4)
        {
            with(instance_create(x-16*image_xscale,y+29*image_yscale,objExplosion))
                depth = -2;
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 8)
        {
            with(instance_create(x+16*image_xscale,y+1*image_yscale,objBigExplosion))
                depth = -2;
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 12)
        {
            with(instance_create(x+16*image_xscale,y+1*image_yscale,objExplosion))
                depth = -2;
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 18)
        {
            with(instance_create(x,y-2*image_yscale,objBigExplosion))
                depth = -2;
            playSFX(sfxExplosion2);
        }
        if (explodeTimer == 26)
        {
            with(instance_create(x+32*image_xscale,y-2*image_yscale,objBigExplosion))
                depth = -2;
            playSFX(sfxExplosion2);
        }
        if (explodeTimer &gt;= 120)
        {
            event_user(EV_DEATH);
        }
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collision_rectangle(x - 40, y + hatOffset,
    x + 40, y - 8, other.id, false, false))
{
    other.guardCancel = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (myHat)
    instance_destroy();
with (objMetallDaddyChild)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objMegaman)
    stunLock = lockPoolRelease(stunLock);
if (!isDying)
{
    isFight = false;
    canHit = false;
    contactDamage = 0;
    isDying = true;
    iFrames = 180; //Do this to keep blinking
    stopSFX(sfxEnemyHit);
    with(instance_create(x,y+11,objExplosion))
        depth = -2;
    playSFX(sfxExplosion2);
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animation code
draw_sprite_part(sprite_index, 1, 0, 40 + hatOffset, 80, 80, round(x - 40), round(y + hatOffset * 2 - 40 + 32 - hatOffset));
draw_sprite_ext(sprite_index, 2, round(x), round(y + eyeOffset), 1, image_yscale, image_angle, image_blend, image_alpha);
draw_sprite_ext(sprite_index, hatFrame, round(x), round(y + hatOffset), 1, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if (!isDying)
        {
            if ((iFrames mod 4) &lt; 2 || !iFrames)
            {
                event_user(2);
            }
            else // Hitspark
            {
                sprite_index = sprMetallDaddyHurt;
                event_user(2);
                sprite_index = sprMetallDaddy;
            }
        }
        else // Blinking when dying
        {
            if ((iFrames mod 16) &lt; 8 || !iFrames)
                event_user(2);
            else
            {
                d3d_set_fog(true, c_white, 0, 0);
                event_user(2);
                d3d_set_fog(false, 0, 0, 0);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
