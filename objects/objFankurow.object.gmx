<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFankurow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// An owl that pulls the player toward it with its fan, then pushes the player away with its wings, then pauses for a moment.
/// Standing still, the player will be pushed and pulled about 4 tiles by default. To place Fankurow in the air, add this creation code: grav = 0
/// Useful in a variety of platforming challenges and certain combat challenges. To make Fankurow an indestructible gimmick, add this: invincible = true

event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "semi bulky, bird, nature";

facePlayerOnSpawn = true;
facePlayer = true;

//creation code
pullDuration = 120;
moveTimerStart = 30;
pullSpd = -0.5;
pullStartDir = 1;


// enemy specific code
phase = 0;
moveTimer = 30;
pullTimer = 0;
pullSpd = -0.5;
pullDir = 1;

animBack = true;
imgSpd = 0.2;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (pullSpd != 0)
{
    if(entityCanStep())
    {
        if (phase != 0)
        {
            with (objMegaman)
            {
                if(!teleporting &amp;&amp; readyTimer==0)
                    playerBlow(other.pullSpd * other.pullDir * other.image_xscale);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // Idle
        case 0:
            moveTimer--;
            if (moveTimer &lt;= 0)
            {
                phase = 1;
            }
            break;
        // Pull
        case 1:
            if (pullTimer &lt; pullDuration)
            {
                pullTimer++;
                pullDir = 1;
                
                imgIndex += imgSpd;
                if (imgIndex &gt;= 4)
                {
                    imgIndex = 1;
                }
            }
            else
            {
                phase = 2;
                imgIndex = 0;
            }
            break;
        // Push
        case 2:
            if (pullTimer != 0)
            {
                pullTimer--;
                pullDir = -1;
                
                imgIndex += imgSpd;
                if (imgIndex &gt;= 1) &amp;&amp; (imgIndex &lt; 4)
                    imgIndex = 4;
                if (imgIndex &gt;= 8)
                    imgIndex = 0;
            }
            else
            {
                if (imgIndex &lt; 8)
                {
                    imgIndex += imgSpd;
                }
                else
                {
                    imgIndex = 0;
                    phase = 0;
                    moveTimer = 30;
                    //animBack = true;
                }
            }
            break;
    }
    

}
else if (dead)
{
    phase = 0;
    pullDir = pullStartDir;
    pullTimer = 0;
    imgIndex = 0;
    moveTimer = moveTimerStart;
    animBack = true;
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
