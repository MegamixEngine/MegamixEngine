<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A shielded cannon thats only vulnerable while it's shooting
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 6;

category = "cannons, shielded";

facePlayerOnSpawn = true;

// Enemy specific code
phase = 0;
radius = 5 * 16;
shootTimer = 0;

xspeed = 0;
yspeed = 0;

imgSpd = 0.09;
imgIndex = 0;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // face mega man at the start 
            if (instance_exists(target))
            {
                phase = 1;
            }
            break;
        case 1: // waiting for megaman 
            if (instance_exists(target))
            {
                if (abs(target.x - x) &lt;= radius)
                {
                    phase = 2;
                }
            }
            break;
        case 2: // open up and shoot twice 
            if (shootTimer == 20 || shootTimer == 60)
            {
                calibrateDirection();
                var ball = instance_create(x + sprite_width / 2,
                    y - sprite_height * 0.8,
                    objCannonBall); // sprite_width is negative when xscale is
                ball.image_xscale = image_xscale;
                playSFX(sfxCannonShoot);
                imgIndex = 2;
                shootTimer += 1; // so it doesn't loop like a doof
            }
            if (imgIndex &lt; 3)
            {
                imgIndex += imgSpd;
            }
            else
            {
                shootTimer += 1; // only counts up when the cannon is fully open and isn't recoiling
            }
            if (shootTimer &gt;= 70)
            {
                phase = 3;
            }
            break;
        
        // close &amp; wait a bit until being able to open again
        case 3:
            if (imgIndex &gt; 0)
            {
                imgIndex -= imgSpd;
            }
            else
            {
                shootTimer += 1;
            }
            if (imgIndex &lt; 0)
            {
                imgIndex = 0;
            }
            if (shootTimer &gt;= 150)
            {
                phase = 0;
                shootTimer = 0;
            }
    }
}
else if (dead)
{
    phase = 0;
    shootTimer = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (round(image_index) == 0)
{
    other.guardCancel = 1;
}

if (image_xscale == -1)
{
    if (bboxGetXCenterObject(other.id) &gt; bboxGetXCenter())
    {
        other.guardCancel = 1;
    }
}
else
{
    if (bboxGetXCenterObject(other.id) &lt; bboxGetXCenter())
    {
        other.guardCancel = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
