<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTropish</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// col = &lt;number&gt;. color. 0 = green, 1 = orange
// ** FLIP IN EDITOR **

event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;
contactStart = contactDamage;

category = "aquatic, nature";
bubbleTimer = -1;

blockCollision = 0;
grav = 0;

despawnRange = 32;
respawnRange = 32;

// Enemy specific code
timer = 0;
phase = 1;

flip = 1;

col = 0;
imgOffset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    timer += 1;
    switch (phase)
    {
        case 1: // wait for player 
            if (instance_exists(target))
            {
                if (collision_line(x - 256, y + 8, x + 256, y + 8, target, false, true))
                {
                    if (image_xscale == 1)
                    {
                        x = view_xview;
                    }
                    else
                    {
                        x = view_xview + 256;
                    }
                    
                    xspeed = 1.5 * image_xscale;
                    
                    phase = 2;
                }
            }
            break;
        case 2: // Speed up 
            if (abs(xspeed) &lt; 4)
            {
                xspeed += .25 * image_xscale;
            }
            
            // bob up and down
            if (timer mod 10 == 0)
            {
                y += 1.5 * flip;
                flip = -flip;
            }
            
            // Animation
            if (timer mod 4 == 0)
            {
                imgOffset = !imgOffset;
            }
            break;
    }
}
else if (dead)
{
    timer = 0;
    phase = 1;
    imgOffset = 0;
    flip = 1;
}

visible = (phase &gt; 1);
canHit = visible;
contactDamage = contactStart * visible;

image_index = imgOffset + (col * 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
