<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMetallRunAndGun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

calibrateDirection();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "mets";

facePlayerOnSpawn = true;

// Enemy specific code
phase = 1;
graceWait = 60;
shootWait = 80;
timer = 0;

spd = 1;

animBack = false;
imgSpd = 0.16;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // wait until popping up
        case 1:
            if (timer &gt;= 60) // &lt;-- grace period time here
            {
                if (timer == graceWait)
                {
                    // pop up animation
                    imgIndex += imgSpd * 2;
                    if (imgIndex &gt;= 4)
                    {
                        imgIndex = 5;
                        timer += 1; // I reused timer as a boolean   :P
                    }
                }
                else
                {
                    // wait after popping up
                    timer += 1;
                    if (timer &gt;= graceWait + 30)
                    {
                        phase = 2;
                        imgIndex = 4;
                        timer = 0;
                        xspeed = spd * image_xscale;
                    }
                }
            }
            else
            {
                timer += 1;
            }
            break;
        
        // JUMP N' SHOOT, JUMP N' SHOOT MAN, RIDIN' ON CARS
        case 2: // animation 
            if (ground)
            {
                if (!animBack)
                {
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 7)
                    {
                        imgIndex = 6;
                        animBack = true;
                    }
                }
                else
                {
                    imgIndex -= imgSpd;
                    if (imgIndex &lt; 4)
                    {
                        imgIndex = 5;
                        animBack = false;
                    }
                }
            }
            else
            {
                imgIndex = 7;
                animBack = false;
            }
            
            // turn around
            if (instance_exists(target))
            {
                if ((image_xscale &lt; 0 &amp;&amp; x &lt; target.x - 48)
                    || (image_xscale &gt; 0 &amp;&amp; x &gt; target.x + 48))
                {
                    // &lt;-- turn around range here
                    image_xscale = -image_xscale;
                    timer = shootWait;
                }
            }
            
            // jump
            if (ground &amp;&amp; xspeed == 0)
            {
                yspeed = -3;
            }
            xspeed = spd * image_xscale;
            
            // shoot
            timer -= 1;
            if (timer &lt;= 0)
            {
                var turnOffset = 0;
                if (image_xscale &lt; 0)
                {
                    turnOffset = 180;
                }
                
                var ID;
                for (var i = 0; i &lt; 3; i += 1)
                {
                    ID = instance_create(x + image_xscale * 8, spriteGetYCenter(), objEnemyBullet);
                    ID.direction = (i - 1) * 45 + turnOffset;
                    ID.speed = 1.75;
                    ID.xscale = image_xscale;
                    ID.sprite_index = sprEnemyBulletMM6;
                }
                
                playSFX(sfxEnemyShoot);
                
                timer = shootWait;
            }
            break;
    }
}
else if (dead)
{
    phase = 1;
    timer = 0;
    xspeed = 0;
    yspeed = 0;
    animBack = false;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_index == 0)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
