<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTondeall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code
// moveDist = &lt;number&gt;;   - The distance the enemy moves before turning back on itself. Default is 32.;
// moveDir = &lt;number&gt;; - The direction the enemy moves. (0 = Horzitonal, 1 = Vertical, 2 = Diagonal Right, 3 = Diagonal Left;

event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "floating";

blockCollision = 0;
grav = 0;

// Enemy specific code
moveDelay = 0;
moveTimer = 0;

// shooting variables
shootAngle = 30;
cooldownTimer = 0;
cooldownMax = 152;
direct = -1;

moveDist = 32;
moveDir = 0;
shootAngle = 35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    image_index += 0.20;
    
    moveDelay += 1;
    if (moveDelay == 0)
    {
        xspeed = 0;
        yspeed = 0;
    }
    
    if (moveDir == 0 &amp;&amp; moveDelay == 1)
    {
        xspeed = 1 * direct;
        moveDelay = -1;
    }
    else if (moveDir == 1 &amp;&amp; moveDelay == 1)
    {
        yspeed = 1 * direct;
        moveDelay = -1;
    }
    else if (moveDir == 2 &amp;&amp; moveDelay == 1)
    {
        xspeed = 1 * direct;
        yspeed = 1 * direct;
        moveDelay = -1;
    }
    else if (moveDir == 3 &amp;&amp; moveDelay == 1)
    {
        xspeed = -1 * direct;
        yspeed = 1 * direct;
        moveDelay = -1;
    }
    
    cooldownTimer += 1;
    if (cooldownTimer &gt;= cooldownMax)
    {
        // Shoot
        cooldownTimer = 0;
        var getAngle;
        
        // If megaman exists, grab his angle, otherwise grab some random different angle.
        if (instance_exists(target))
            getAngle = point_direction(x, y, target.x, target.y);
        else
            getAngle = point_direction(x, y, x + (45 * (direct)),
                45 * (direct));
        
        var ID;
        ID = instance_create(x + image_xscale * 8, spriteGetYCenter(),
            objMM5AimedBullet);
        {
            ID.dir = getAngle + shootAngle;
            ID.xscale = image_xscale;
        }
        ID = instance_create(x + image_xscale * 8, spriteGetYCenter(),
            objMM5AimedBullet);
        {
            ID.dir = getAngle - shootAngle;
            ID.xscale = image_xscale;
        }
        playSFX(sfxEnemyShootClassic);
    }
    
    moveTimer += 0.5;
    if (moveTimer &gt;= moveDist)
    {
        direct = 0 - direct;
        moveTimer = 0;
    }
}
else
{
    if (dead == true)
    {
        direct = 1;
        cooldownTimer = 0;
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
