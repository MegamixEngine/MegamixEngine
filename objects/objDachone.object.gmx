<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDachoneB</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A very weak midboss, he shoots lasers from his eye and walks towards megaman. he's only vulnerable in the eye.

event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 8;
lockTransition = false;


category = "bulky";

dir = image_xscale;

//@cc 0 = blue (default); 1 = green; 2 = game gear;
col = 0;

init = 1;

// Enemy specific code
moveDelay = 0;

// shooting variables
cooldownMax = 112;
cooldownTimer = cooldownMax / 2;

shotsFired = 0;
shotCooldown = 20;

childSprite = sprDachoneBullet;

// AI and animation variables
imageTimer = 0;
imageOffset = 0;
delay = 0;
radius = 128;
soundTimer = 0;

calibrateDirection();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    switch (col)
    {
        case 0:
            sprite_index = sprDachoneB;
            break;
        case 1:
            sprite_index = sprDachoneG;
            break;
        case 2:
            sprite_index = sprDachoneGG;
            break;
    }
}

event_inherited();

if (entityCanStep())
{
    // turn around on hitting a wall
    xSpeedTurnaround();
    
    // activate dachone
    if (object_index == objDachone) //game gear Dachone does not turn around
        calibrateDirection();
    if (instance_exists(target))
    {
        if (xspeed == 0 &amp;&amp; ground &amp;&amp; (global.keyShootPressed[target.playerID] || abs(target.x - x) &lt; radius))
        {
            xspeed = image_xscale * 0.5;
			imgOffset = 1;
        }
    }
    
    // if boss reaches a platform edge, turn around.
    if (ground)
    {
        if (xspeed &gt; 0)
        {
            xs = bbox_right + 1;
        }
        else
        {
            xs = bbox_left - 1;
        }
        
        if (!positionCollision(xs, bbox_bottom + 1))
        {
            xspeed *= -1;
        }
    }
    
    // if boss reaches a screen edge do same.
    if (x &gt;= view_xview + view_wview - 10 &amp;&amp; xspeed &gt; 0)
    {
        xspeed = -abs(xspeed);
    }
    else if (x &lt;= view_xview + 10 &amp;&amp; xspeed &lt; 0)
    {
        xspeed = abs(xspeed);
    }
    
    // change image offset depending on the direction dachone is moving and what direction the sprite is facing.
    if (xspeed != 0)
    {
        imageTimer += 1;
        if (imageTimer == 3) || (imageTimer == 9) // Handle bob animation
        {
            if (imageOffset == 2) || (imageOffset == 5)
            {
                imageOffset++;
            }
            
            else if (imageOffset == 3) || (imageOffset == 6)
            {
                imageOffset--;
            }
        }
        
        if (imageTimer == 12) // Actually move legs here
        {
            imageOffset += (1 * sign(xspeed)) * image_xscale;
            if (imageOffset == 3) || (imageOffset == 6) // Skip over bob frames when walking
			{
                imageOffset += (1 * sign(xspeed)) * image_xscale;
            }
            imageTimer = 0;
        }
        
        soundTimer++;
        if (soundTimer == 24)
        {
            if (!audio_is_playing(sfxDachoneLaser) &amp;&amp; object_index != objDachoneMK1_5) // game gear dachone does other sound
                playSFX(sfxDachoneWalk);
            if (!audio_is_playing(sfxEnemyShoot) &amp;&amp; object_index == objDachoneMK1_5)
                playSFX(sfxChillGloop);
            soundTimer = 0;
        }
        
        if (imageOffset &gt; 6)
        {
            imageOffset = 1;
        }
        if (imageOffset &lt; 1)
        {
            imageOffset = 5;
        }
    }
    
    // shooting
    cooldownTimer += 1;
    
    var scaleX;
    scaleX = image_xscale;
    
    // switch (cooldownTimer)
    //{
    if (object_index == objDachone)
    {
        if (cooldownTimer == cooldownMax + (shotsFired *shotCooldown))
        {
            if (shotsFired == 0)
            {
                i = instance_create(x + (image_xscale * 8), y - 4, objDachoneBullet);
                with (i)
                {
                    image_xscale = scaleX;
                    image_index = 0;
                    sprite_index = other.childSprite;
                    xspeed = 3 * other.image_xscale;
                    yspeed = 0;
                    playSFX(sfxDachoneLaser);
                }
                
            }
            else if (shotsFired == 1)
            {
                i = instance_create(x + (image_xscale * 8), y - 4, objDachoneBullet);
                with (i)
                {
                    image_xscale = scaleX;
                    image_index = 1;
                    sprite_index = other.childSprite;
                    xspeed = 2 * other.image_xscale;
                    yspeed = 1;
                    playSFX(sfxDachoneLaser);
                }
            }
            else if (shotsFired == 2)
            {
                i = instance_create(x + (image_xscale * 8), y - 4, objDachoneBullet);
                with (i)
                {
                    image_xscale = scaleX;
                    image_index = 2;
                    sprite_index = other.childSprite;
                    xspeed = 1.5 * other.image_xscale;
                    yspeed = 1.5;
                    playSFX(sfxDachoneLaser);
                }
            }
            else if (shotsFired == 3)
            {
                i = instance_create(x + (image_xscale * 8), y - 4, objDachoneBullet);
                with (i)
                {
                    image_xscale = scaleX;
                    image_index = 3;
                    sprite_index = other.childSprite;
                    xspeed = 1 * other.image_xscale;
                    yspeed = 2;
                    playSFX(sfxDachoneLaser);
                    cooldownTimer = 0;
                    shotsFired = 0;
                }
            }
            
            shotsFired ++;
        }
        else if (shotsFired == 4 &amp;&amp; (cooldownTimer == cooldownMax + ((shotsFired - 1) * shotCooldown) + 1))
        {
            cooldownTimer = 0;
            shotsFired = 0;
        }
    }
    else if (object_index == objDachoneMK1_5)
    {
        if (cooldownTimer == cooldownMax + (shotsFired * shotCooldown))
        {
            i = instance_create(x + (image_xscale * 8), y - 4, objMM5AimedBullet);
            
            with (i)
            {
                image_xscale = scaleX;
                xscale = other.image_xscale;
                playSFX(sfxEnemyShoot);
                var ang = 10;
                var addAng = 20;
                spd = 2.4;
                if (xscale == -1)
                {
                    ang = 170;
                    addAng = -20
                }
                dir = ang - (addAng*other.shotsFired);

                sprite_index = other.childSprite;
                contactDamage = 6;
            }
            
            shotsFired ++;
            if (shotsFired == 4)
            {
                cooldownTimer = 0;
                shotsFired = 0;
            }
        }
    }
    
    //}
}
else if (dead)
{
    deadTimer = 0;
    image_index = 0;
    cooldownTimer = 0;
    xspeed = 0;
    yspeed = 0;
    imageOffset = 0;
    shotsFired = 0;
	imageTimer = 0;
    soundTimer = 0;
}

image_index = imageOffset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(bboxGetYCenterObject(other.id) &lt; y - 6))
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
