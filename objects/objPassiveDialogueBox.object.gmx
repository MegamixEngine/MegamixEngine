<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPassiveDialogueBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Passive Dialogue Boxes. Allow characters to speak.
// The main difference between this &amp; non-passive textboxes (objDialogueBox)
// is that these ones are all automatic.
// They will go through all of their text, &amp; closes themselves once finished,
// without from the player.
// Passive Textboxes also don't freeze the player in place, allowing you to move about while
// the text is being outputted.

event_inherited();

// CONSTANTS
CARRIAGE_RETURN_CHAR = chr(13);
LINE_FEED_CHAR = chr(10);
TEXTBOX_WIDTH = 256;
TEXTBOX_HEIGHT = sprite_height;
TEXTBOX_SPRITE = sprite_index;
OPTION_HEIGHT = 18;
MUGSHOT_SECTION_WIDTH = 44;
RIGHT_BORDER_WIDTH = 8;
TEXT_START_X = 40; // Starting position of the text, relative to the textbox
TEXT_START_Y = 17;
TEXT_ONLY = false;
MAX_LINE_WIDTH = view_wview - TEXT_START_X - 3; // Max. number of characters visible on a given line
MUGSHOT_X = 4;
MUGSHOT_Y = 16;
DRAW_NAME = true;
NAME_X = 40;
NAME_Y = 5;

// Built-in variables
image_speed = 0;
image_alpha = 0.6; // Entity had the textbox slightly transparent in her version. I'll do the same here, see how it works out

// Textbox settings
boxPosition = 0; // 0 - Top of the screen; 1 - Bottom of the screen
boxOffset = 8; // Used to shift the box into &amp; out of the screen
skinIndex = 0; // Determines the image_index for the textbox (&amp; the option boxes)

// Name of character speaking
name = "...";
nameCol = c_white;

// Mugshot of character
sprite_index = sprGenericMugshots;
mugshotIndex = 0; // Used for player mugshots
mugshotIndexStart = 0;
mugshotIndexEnd = 0;
mugshotSpeed = 0;
mugshotPlayer = false; //Are we drawing a player's mugshot?
_im = 0; // needed for animationLoop

// Character's dialogue
text = ""; // Character's current line of text
textList = mm_ds_list_create(); // All of the speaker's dialogue

// Text Effects
textColourMap = mm_ds_map_create(); // Stores the colour changes in the speaker's current line of text
textMotionMap = mm_ds_map_create(); // Stores the motion effects in the speaker's current line of text
textDelayMap = mm_ds_map_create(); // Stores the delay points in the speaker's current line of text
textEmojiMap = mm_ds_map_create(); // Stores the emojis for the speaker's current line of text
textLiteralHashes = array_create(0); // Stores the instances in the speaker's current line of text where '#' is used literally (i.e. not a line break)
textInstantTypePoint = -1; // The point in the dialogue where text gets instantly typed out
textAutoAdvancePoint = -1; // The point in the dialogue where the textbox auto-advances

// How text gets rendered
textLength = 0; // Full length of the current line of text
charsTyped = 0; // How many characters of the current line of text we've typed
textTimer = 0; // A constantly growing variable you can reference in text events, e.g. shaking text.
textSpeed = 0.4; // Controls the speed at which text gets typed out
textDelay = 16; // This must be 0 before text can advance
textBlip = -1; // Can be used to have a sound play as text is typed (-1 means no sound)

// Text Font
textFont = global.font;
fontCharWidth = 8; // -1 means the font is not mono, and the width of each char must be calculated on the fly
fontCharHeight = 8;

// -- Variables specific to the passive version of textboxes --
textDuration = 200; // How long a block of text will stay out once fully typed, before advancing to the next block (or closing the textbox)
destroyOnSectionSwitch = true; // If false, the textbox will persist through section switches

// Emojis
emojiSprite = sprDot;
emojiImageIndex = 0;

// State Variables
phase = 0;
phaseTimer = 0;

// Used to freeze textboxes when things are 'paused'
frozen = 0;

// Keep a reference to the entity that spawned this textbox
parent = noone;
parentEvent = -1;

playerID = 0;

// Options will not be a thing with passive textbox
// (how would that work? how do you pick an option on a textbox when you have free control)
// However, since we're calling objDialogueBox's Draw Event to save on code,
// it is expected that this variable is present
optionCount = -999;

// == TEXT EFFECTS ==
// In this dialogue system, the char "/" is used to denote an effect applied to the upcoming chars
// The uses of "/" is as follows ('X' represents a digit):
//
// - /CXX = Changes the text color for the upcoming chars. Expects an index from the global.nesPalette array. (e.g. /C27 to make blue text)
// - /DXXX = Pauses the dialogue box mid-type for the duration provided. (e.g. /D120 to pause for 120 frames, or 2 seconds)
// - /EXX = Represents a sprite in the text, sorta like an emoji (from a set list, see the getTextboxEmoji script)
// - /A = Textbox advances without waiting, closing itself if on the last block of dialogue (won't close if there's an option to choose)
// - /I = Text gets typed out instantly until we hit the end of the string
// - /X = Applies a motion effect for the upcoming chars (0 = normal; 1 = shakey; 2 = wavey)
// - // = We wish to actually draw a '/' char
// - /# = We wish to draw a '#' char without triggering a line break

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mm_ds_list_destroy(textList);
mm_ds_map_destroy(textColourMap);
mm_ds_map_destroy(textMotionMap);
mm_ds_map_destroy(textDelayMap);
mm_ds_map_destroy(textEmojiMap);

with (parent) {
    if (other.parentEvent != -1)
        event_user(other.parentEvent);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if this textbox is nameless
if (name == "") {
    TEXTBOX_SPRITE = sprPassiveDialogueBoxNameless;
    TEXTBOX_HEIGHT = sprite_get_height(TEXTBOX_SPRITE);
    DRAW_NAME = false;
    TEXT_START_X = 40;
    TEXT_START_Y = 5;
    MUGSHOT_X = 4;
    MUGSHOT_Y = 4;
}

// Also get information on the font to use for this textbox
draw_set_font(textFont);
fontCharWidth = ternary(textFont == global.fontSmall, -1, string_width("A"));
fontCharHeight = string_height("A");
draw_set_font(global.font);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (destroyOnSectionSwitch &amp;&amp; global.switchingSections) {
    instance_destroy();
    exit;
}

if (instance_exists(objDialogueBox)) { // Regular Dialogue Boxes take priority
    instance_destroy();
    exit;
}

frozen = global.frozen;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (frozen)
    exit;

switch (phase) {
    case 0: // Textbox appears
        if (--boxOffset &lt;= 0) {
            boxOffset = 0;
            phase = 1;
            phaseTimer = 16; // Short delay before the text gets typed
            event_user(0);
        }
        break;
        
    case 1: // Typing out our text
        phaseTimer--;
        textDelay--;
        
        if (phaseTimer &lt;= 0) {
            var auto_advance = false;
            
            if (textDelay &lt;= 0) {
                var prev_chars_typed = floor(charsTyped);
                charsTyped += textSpeed;
                
                if (floor(charsTyped) != prev_chars_typed) { //Have we gotten to the next char yet?
                    if (textBlip != -1) { // If we have a blip sfx, we should play it
                        var can_blip = true,
                            blip_char = string_char_at(text, floor(charsTyped));
                        
                        if (blip_char == " ")
                            can_blip = false;
                        else if (blip_char == "#") // Don't blip, unless this is an actual '#' &amp; not a line break
                            can_blip = indexOf(textLiteralHashes, floor(charsTyped)) != -1;
                        
                        if (can_blip)
                            playSFX(textBlip);
                    }
                    
                    // Check if we reached the auto-advance point, if one is set
                    if (inClosedRange(textAutoAdvancePoint, prev_chars_typed, floor(charsTyped))) {
                        auto_advance = true;
                    } else if (inClosedRange(textInstantTypePoint, prev_chars_typed, floor(charsTyped))) { // Check if we reached the instant-type point. Again, if one is set
                        charsTyped = textLength;
                    } else {
                        // Check if we should perform a text delay
                        // This is a for-loop as it's possible to reach a delay point while typing out multiple characters at once
                        for (var i = prev_chars_typed + 1; i &lt;= floor(charsTyped); i++) {
                            if (!is_undefined(textDelayMap[? i])) {
                                textDelay = textDelayMap[? i];
                                charsTyped = i;
                                break;
                            }
                        }
                    }
                }
            }
            
            if (auto_advance) {
                // If we have another block of dialogue, load that one
                // If we're at the end, close the text box
                event_user(1 + ds_list_empty(textList));
            } else if (charsTyped &gt;= textLength) {
                event_user(3);
            }
        }
        break;
    
    case 2: // Full line typed out
        if (--phaseTimer &lt;= 0)
            event_user(1 + ds_list_empty(textList));
        break;
    
    case 3: // Textbox disappears
        if (++boxOffset &gt;= 8) {
            visible = 0;
            instance_destroy();
        }
        break;
}

animationLoop(mugshotIndexStart, mugshotIndexEnd, mugshotSpeed);

textTimer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Done typing textbox
event_perform_object(objDialogueBox, ev_other, ev_user3);
phaseTimer = textDuration;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close Textbox
event_perform_object(objDialogueBox, ev_other, ev_user2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to next block of dialogue
event_perform_object(objDialogueBox, ev_other, ev_user1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load next line of text
event_perform_object(objDialogueBox, ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objPauseMenu))
    exit;
    
event_perform_object(objDialogueBox, ev_draw, ev_draw_end);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Maybe
if (!instance_exists(objPauseMenu))
{
    exit;
}

event_perform_object(objDialogueBox, ev_draw, ev_draw_end);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
