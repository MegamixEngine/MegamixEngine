<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprStompy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// image_xscale = 1 or -1 //(Use editor for this!!) determines starting direction of mini boss.

event_inherited();
respawn = true;
introSprite = sprStompyTeleport;
healthpointsStart = 22;
healthpoints = healthpointsStart;
contactDamage = 5;
blockCollision = 1;
grav = 0.15 * image_yscale;
facePlayerOnSpawn = true;
category = "bulky";

// Enemy specific code
image_speed = 0;
image_index = 0;
storeXScale = 0;
phase = 0;

// event triggers
doQuake = false;
turnTrigger = false;
findYSpeed = false;

attackTimer = 0;
attackTimerMax = 40;
dir = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep()
    &amp;&amp; introTimer &lt;= 0)
{
    dir = image_xscale;
    
    if (storeXScale == 0)
    {
        if (instance_exists(target)) // since minibosses usually only face one direction, here we set the direction of Stompy
            image_xscale = sign(x - target.x) * -1;
        storeXScale = image_xscale;
    }
    
    if (doQuake) // quake effect is reused throughout, so i made it a event trigger to not reuse code.
    {
        screenShake(20, 2, 2);
        playSFX(sfxGutsQuake);
        doQuake = false;
    }
    
    if (findYSpeed) // find the y speed for a jump. this code is reused throughout, so its also been made a trigger event to not reuse code.
    {
        var setY = 32;
        for (var i = 32; i &lt; 224; i++)
        {
            if //( place_meeting(x, (y - i) - 40, objSolid))
            (checkSolid(0, -(i)))
            {
                setY -= 32;
                break;
            }
            else
            {
                setY += 1;
            }
        }
        yspeed = ySpeedAim(y, y - setY, grav);
        findYSpeed = false;
    }
    
    attackTimer += 1;
    switch (phase)
    {
        case 0: // jump across screen 
            if (attackTimer == attackTimerMax - 1)
            {
                findYSpeed = true;
            }
            if (attackTimer &gt;= attackTimerMax)
            {
                var setX = 32;
                for (var i = 32; i &lt; view_wview; i++)
                {
                    if //( place_meeting(x+i*image_xscale,y,objSolid))
                    (checkSolid(i * image_xscale, 0))
                    {
                        break;
                    }
                    else
                    {
                        setX += 1;
                    }
                }
                xspeed = xSpeedAim(x, y, x + setX * image_xscale, y, yspeed, grav);
                image_index = 1;
                phase = 1;
            }
            break;
        case 1: // land after long jump 
            if (ground &amp;&amp; yspeed &gt;= 0)
            {
                image_index = 0;
                image_xscale *= -1;
                xspeed = 0;
                doQuake = true;
                var spawnOffset = 32;
                for (var i = 0; i &lt; 4; i++)
                {
                    var inst = instance_create(x + spawnOffset * image_xscale, view_yview, objStompyProjectile);
                    if (i mod 2 == 1)
                    {
                        inst.grav *= 0.75;
                        inst.parent = id;
                    }
                    spawnOffset += 32 + (choose(0, 1) * 16);
                }
                attackTimer = -attackTimerMax * 2;
                phase = 2;
            }
            break;
        case 2: // begin jumping across screen; 
            if (attackTimer == attackTimerMax)
            {
                xspeed = 1.5 * image_xscale;
                findYSpeed = true;
                image_index = 1;
                phase = 3;
            }
            break;
        case 3: // hit floor and drop projectile 
            if (abs(xspeed) &gt; 0 &amp;&amp; yspeed &gt; 0)
            {
                xspeed -= 0.125 * image_xscale;
            }
            if (checkSolid(10 * image_xscale, 0))
            {
                turnTrigger = true;
                x -= image_xscale;
                xspeed = 0;
            }
            if (ground &amp;&amp; yspeed &gt;= 0)
            {
                image_index = 0;
                xspeed = 0;
                doQuake = true;
                var inst = instance_create(x - 24 * image_xscale, view_yview, objStompyProjectile);
                inst.parent = id;
                attackTimer = 0;
                if (turnTrigger)
                {
                    image_xscale *= -1;
                    phase = 0;
                    turnTrigger = false;
                }
                else
                {
                    phase = 2;
                }
            }
            break;
    }
}
else if (!insideView())
{
    image_index = 0;
    y = ystart;
    x = xstart;
    if (instance_exists(target) &amp;&amp; !dead)
    {
        image_xscale = sign(x - target.x) * -1;
    }
    attackTimer = 0;
    phase = 0;
    doQuake = false;
    turnTrigger = false;
    findYSpeed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facePlayerOnSpawn = false;
with (objStompyProjectile)
{
    if (parent == other.id)
    {
        instance_destroy();
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
