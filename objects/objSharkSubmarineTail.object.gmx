<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSharkSubmarineTail</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtSharkSubmarine</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

yLowOffset = 24;
canHit = true;

missileInterval = 40;

hatchIndex = 0; // The index of the hatch to open.
siloIndex = 0; // The index of the silo to hit.
missile1 = noone;
missile2 = noone;
missile3 = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep() &amp;&amp; !killed &amp;&amp; !stop)
{
    if (isFight) &amp;&amp; (!isDying)
    {
        attackTimer++;
        if (attackTimer == missileInterval * 0.25)
        {
            hatchIndex = 1; // Hatch partially open.
            siloIndex = 0; // Silo restocked.
        }
        if (attackTimer == missileInterval * 0.5) // Hatch fully open.
        {
            hatchIndex = 2;
        }
        if (attackTimer == missileInterval * 2) // Silo launches 1st missile.
        {
            siloIndex = 1;
            missile1 = instance_create(x + 7 * image_xscale, y - 9,
                objSharkSubmarineMissile);
            if (image_xscale &lt; 0)
            {
                missile1.aiming = 4;
            }
            missile1.reDirTimer = 0;
        }
        if (attackTimer == missileInterval * 3) // Silo launches 2nd missile.
        {
            siloIndex = 2;
            missile2 = instance_create(x + 7 * image_xscale, y + 7 * image_yscale,
                objSharkSubmarineMissile);
            if (image_xscale &lt; 0)
            {
                missile2.aiming = 4;
            }
            missile2.reDirTimer = 0;
        }
        if (attackTimer == missileInterval * 4) // Silo launches 3rd missile.
        {
            siloIndex = 3;
            missile3 = instance_create(x + 7 * image_xscale, y + 23 * image_yscale,
                objSharkSubmarineMissile);
            if (image_xscale &lt; 0)
            {
                missile3.aiming = 4;
            }
            missile3.reDirTimer = 0;
        }
        if (attackTimer == missileInterval * 5.5) // Hatch partially closed.
        {
            hatchIndex = 1;
        }
        if (attackTimer == missileInterval * 5.75) // Hatch fully closed.
        {
            hatchIndex = 0;
        }
        
        // The hatch and silo repeat the pattern after all the missiles are gone.
        if (!instance_exists(missile1) &amp;&amp; !instance_exists(missile2)
            &amp;&amp; !instance_exists(missile3) &amp;&amp; attackTimer &gt;= missileInterval * 5.75)
        {
            attackTimer = 0;
        }
    }
}
if (isDying)//(killed)//
{
    if (!global.frozen)
    {
        slowdeathTimer++
        if (slowdeathTimer == 20)//15
        {
            instance_create(x - 5*image_xscale, y+14, objBigExplosion);
            playSFX(sfxMM9Explosion);
        }
        if (slowdeathTimer == 40)//30
        {
            instance_create(x + 10*image_xscale, y-14, objBigExplosion);
            playSFX(sfxMM9Explosion);
            if (!finalDeath)
            {
                event_user(EV_DEATH);
            }
        }
        if (finalDeath) &amp;&amp; (slowdeathTimer &gt;= 41) &amp;&amp; (slowdeathTimer &lt; 155)//115
        {
            if (slowdeathTimer mod 20 == 0)
            {
                instance_create(random_range(x,x+114*image_xscale),random_range(y-57,y+55),objBigExplosion);
                playSFX(sfxMM9Explosion);
            }
            
            if (slowdeathTimer == 160)
                with(prtSharkSubmarine)
                    event_user(EV_DEATH);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (hatchIndex != 2)
{
    other.guardCancel = 2;
    exit;
}

if (hatchIndex == 2 &amp;&amp; collision_rectangle(x - 8 * image_xscale, y - 17, x + 16 * image_xscale, y + 32, other.id, false, true) == noone)
{
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//event_inherited();
hatchIndex = 2;
siloIndex = 4;
canHit = false;
if (!isDying)
{
    instance_create(x, y + 7, objBigExplosion);
    playSFX(sfxMM9Explosion);
    isDying = true;
    iFrames = 0;
    stopSFX(sfxEnemyHit);
}
else
{
    event_inherited();
}

if (instance_exists(missile1))
{
    with (missile1)
    {
        instance_create(x, y, objExplosion);
        instance_destroy();
    }
}
if (instance_exists(missile2))
{
    with (missile2)
    {
        instance_create(x, y, objExplosion);
        instance_destroy();
    }
}
if (instance_exists(missile3))
{
    with (missile3)
    {
        instance_create(x, y, objExplosion);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (introTimer &lt;= 0)
{
    if (!killed)
    {
        draw_sprite_ext(sprSharkSubmarineTailJet, jetIndex,
            x + 76 * image_xscale, round(y), image_xscale, image_yscale,
            image_angle, image_blend, image_alpha);
    }
    
    if (iFrames mod 4 &lt; 2 || !iFrames)
    {
        draw_sprite_ext(sprSharkSubmarineSilo, siloIndex,
            x - 8 * image_xscale, round(y) - 17 * image_yscale,
            image_xscale, image_yscale, image_angle,
            image_blend, image_alpha);
    }
    else
    {
        draw_sprite_ext(sprSharkSubmarineSilo, siloIndex,
            x - 8 * image_xscale, round(y) - 17 * image_yscale,
            image_xscale, image_yscale, image_angle,
            c_black, image_alpha);
    }
    draw_sprite_ext(sprSharkSubmarineTailHatch, hatchIndex,
        x - 8 * image_xscale, round(y) - 17 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend, image_alpha);
}
else
{
    if (!killed)
    {
        draw_sprite_ext(sprSharkSubmarineTailJet, jetIndex,
            x + 76 * image_xscale, round(y), image_xscale, image_yscale,
            image_angle, c_black,
            1);
        draw_sprite_ext(sprSharkSubmarineTailJet, jetIndex,
            x + 76 * image_xscale, round(y), image_xscale, image_yscale,
            image_angle, image_blend,
            1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
    }
    draw_sprite_ext(sprSharkSubmarineTailHatch, hatchIndex,
        x - 8 * image_xscale, round(y) - 17 * image_yscale, image_xscale,
        image_yscale, image_angle, c_black,
        1);
    draw_sprite_ext(sprSharkSubmarineTailHatch, hatchIndex,
        x - 8 * image_xscale, round(y) - 17 * image_yscale, image_xscale,
        image_yscale, image_angle, image_blend,
        1 - ((floor(introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
