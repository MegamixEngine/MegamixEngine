<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHanabiranClockPiece</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code (all optional)
// cAngle = &lt;number&gt;; // the angle the clock arm starts off at.
// length = &lt;number&gt;; // the number of pieces this arm is made of.
// attackTimerMax = &lt;number&gt;; // the amount of time it takes to rotate
// addAngle = &lt;number&gt;; // the angle added as it spins, you can use this to make it smoother or reverse direction.

event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

canHit = false;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;
cDistance = 0;
pieceGap = 24;
despawnRange = -1;
active = true;
attackTimer = 0;
destroyTimer = 2;
triggerDestroy = -1;
dieToSpikes = false;

hasSpawned = false;

// creation code variables
cAngle = 90;
attackTimerMax = 32;
length = 6;
addAngle = 22.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (length &gt; 0 &amp;&amp; !hasSpawned)
    {
        for (var i = 1; i &lt; length; i++)
        {
            var inst = instance_create(x, y, object_index);
            inst.length = 0;
            inst.cDistance = pieceGap * i;
            inst.cAngle = cAngle;
            inst.destroyTimer = 18 + (16 * i);
            inst.attackTimerMax = attackTimerMax;
            inst.addAngle = addAngle;
            inst.respawn = false;
        }
        hasSpawned = true;
        with (object_index)
        {
            attackTimer = 1;
        }
    }
    
    x = xstart + round(cos(degtorad(cAngle)) * cDistance);
    y = ystart + round(sin(degtorad(cAngle)) * cDistance);
    
    attackTimer++;
    
    if (triggerDestroy &gt; 0)
    {
        triggerDestroy--;
    }
    
    if (attackTimer == attackTimerMax)
    {
        cAngle += addAngle;
        attackTimer = 1;
    }
    
    if (destroyTimer &lt; -1 &amp;&amp; triggerDestroy == 0)
    {
        destroyTimer++;
        attackTimerMax = 9999;
    }
    if (destroyTimer == -1)
    {
        destroyTimer = 0;
        instance_create(x, y, objExplosion);
        dead = true;
        playSFX(sfxEnemyHit);
    }
}
if (dead)
{
    attackTimer = 0;
    destroyTimer = 0;
    hasSpawned = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
