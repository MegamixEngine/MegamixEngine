<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMolmole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>sprMole</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// The exact same as regular moles, except they have a fancy spark when they drill floors

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "cluster";

grav = 0;
blockCollision = 0;

// Enemy specific code
image_speed = 0.2;

topblock = -1;
bottomBlock = -1;
touchblock = place_meeting(x, y, objSolid);
cantDraw = touchblock;
centerTopBlock = 0;
centerBottomBlock = 0;

animTimer = 0;
sparkindex = 0;

x = round(x / 8) * 8;

ysc = 1;
if (y &lt; view_yview + view_hview * 0.5)
{
    sprite_index = sprMolmoleDown;
    ysc = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    touchblock = place_meeting(x, y, objSolid);
    if (touchblock)
    {
        topblock = 0;
        while (!collision_line(bbox_left, bbox_top + topblock, bbox_right,
            bbox_top + topblock, objSolid, false, false))
        {
            topblock += 1;
        }
        bottomBlock = 0;
        while (!collision_line(bbox_left, bbox_bottom - bottomBlock,
            bbox_right, bbox_bottom - bottomBlock, objSolid, false, false))
        {
            bottomBlock += 1;
        }
        if (bottomBlock &lt;= 0 &amp;&amp; topblock &lt;= 0)
        {
            yspeed = -8 * ysc;
            centerTopBlock = 0;
            while (!collision_line(bbox_left,
                bboxGetYCenter() - centerTopBlock, bbox_right,
                bboxGetYCenter() - centerTopBlock, objSolid, false,
                false))
            {
                centerTopBlock += 1;
            }
            centerBottomBlock = 0;
            while (!collision_line(bbox_left,
                bboxGetYCenter() + centerBottomBlock, bbox_right,
                bboxGetYCenter() + centerBottomBlock, objSolid, false,
                false))
            {
                centerBottomBlock += 1;
            }
        }
        else
        {
            yspeed = -1 * ysc;
        }
        yspeed = -0.25 * ysc;
    }
    else
    {
        topblock = -1;
        bottomBlock = -1;
        yspeed = -1 * ysc;
    }
    cantDraw = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead || beenOutsideView || cantDraw)
{
    exit;
}

var drew;
drew = 0;

if (iFrames == 1 || iFrames == 3)
{
    d3d_set_fog(true, c_white, 0, 0);
}

var drew;
drew = 0;

if (topblock &gt; 0)
{
    draw_sprite_part(sprite_index, image_index, 0, 0, sprite_width, topblock,
        x - sprite_xoffset, bbox_top);
    drew = 1;
    
        if (topblock &gt; 1 &amp;&amp; bottomBlock &lt;= 0)
        {
            animTimer += 1;
            if (animTimer &gt; 2)
            {
                animTimer = 0;
                sparkindex += 1;
                if (sparkindex == 3)
                {
                    sparkindex = 0;
                }
            }
            
            var sparkblock = (collision_point(x, y, objSolid, false, false));
            if (!sparkblock)
            {
                sparkblock = (collision_point(x, y + 12, objSolid, false, false));
            }
            with(sparkblock)
            {
            draw_sprite(sprMoleSpark, other.sparkindex, other.x, (bbox_top));
            }
    }
}
if (bottomBlock &gt; 0)
{
    draw_sprite_part(sprite_index, image_index, 0, sprite_height - bottomBlock,
        sprite_width, bottomBlock, x - sprite_xoffset,
        bbox_bottom - bottomBlock + 1);
    drew = 1;
    if (topblock &lt;= 1 &amp;&amp; bottomBlock &gt; 0)
    {
        animTimer += 1;
        if (animTimer &gt; 2)
        {
            animTimer = 0;
            sparkindex += 1;
            if (sparkindex == 3)
            {
                sparkindex = 0;
            }
        }
        
        var sparkblock = (collision_point(x, y, objSolid, false, false));
        if (!sparkblock)
        {
            sparkblock = (collision_point(x, y - 12, objSolid, false, false));
        }
        with(sparkblock)
        {
            draw_sprite(sprMoleSpark, other.sparkindex, other.x, (bbox_bottom));
        }
    }
}

if (!drew)
{
    if (!touchblock)
    {
        draw_sprite(sprite_index, image_index, x, y);
    }
    else if (centerTopBlock &gt; 0 || centerBottomBlock &gt; 0)
    {
        draw_sprite_part(sprite_index, image_index, 0,
            (bboxGetYCenter() - bbox_top) - centerTopBlock, sprite_width,
            centerBottomBlock + centerTopBlock - 1, x - sprite_xoffset,
            bboxGetYCenter() - centerTopBlock + 1);
    }
}

if (iFrames == 1 || iFrames == 3)
{
    d3d_set_fog(false, 0, 0, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
