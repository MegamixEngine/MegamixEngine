<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAuAuShot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = false;
contactDamage = 2;
grav = 0;
xspeed = 0;
yspeed = 0;

// specific code
shootTimer = 0;
shotCharge = 0;
parent = noone;

image_speed = 0;
image_index = 0;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(parent))
{
    if (parent.iceTimer &gt; 0 &amp;&amp; iceTimer == 0)
    {
        entityIceFreeze(parent.iceTimer, false, false, true);
    }
}
event_inherited();

if (entityCanStep())
{
    // wait to shoot
    if (shotCharge &lt; 3)
    {
        shootTimer += 1;
        
        if (shootTimer mod 3 == 0)
        {
            visible = !visible;
        }
        
        if (shootTimer &gt;= 25) // &lt;-- time between charge increases here
        {
            shotCharge += 1;
            shootTimer = 0;
            
            if (shotCharge &lt; 3)
            {
                image_index = shotCharge;
            }
            else
            {
                visible = true;
            }
        }
    }
    
    // Shoot
    if (shotCharge == 3)
    {
        speed = 4; // &lt;-- speed here
        
        if (instance_exists(target))
        {
            direction = point_direction(x, y, target.x, target.y);
        }
        
        var directionMax = 25; // &lt;-- projectile angle limits here
        if (image_xscale &gt; 0)
        {
            if (direction &gt; directionMax &amp;&amp; direction &lt;= 180)
            {
                direction = directionMax;
            }
            if (direction &lt; 360 - directionMax &amp;&amp; direction &gt; 180)
            {
                direction = 360 - directionMax;
            }
        }
        else
        {
            if (direction &gt; 180 + directionMax &amp;&amp; direction &lt; 360)
            {
                direction = 180 + directionMax;
            }
            if (direction &lt; 180 - directionMax &amp;&amp; directionMax &gt;= 0)
            {
                direction = 180 - directionMax;
            }
        }
        
        playSFX(sfxEnemyShoot);
        
        shotCharge = 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
