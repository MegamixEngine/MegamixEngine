<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprUranusPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A rotating platform that gradually sends Mega Man downwards. If he stands on it for too long, he'll eventually fall off.
// Stretch it horizontally in the editor to make multiple contiguous platforms
// Note: compatible with gravity flipping
event_inherited();
grav = 0;
canHit = false;
isSolid = 0;
animFrame = 0;
faction = 0;
grav = 0;
blockCollision = 0;
bubbleTimer = -1;
_gravDir = 1;
shiftVisible = 1;
combineObjects(object_index, true, false);

//@cc How fast it moves players
animSpeed = 0.2;

//@cc 0 = Uranus (default); 1 = Wily Star)
style = 0;

if (image_yscale &lt; 0)
{
    image_yscale *= -1;
    y -= image_yscale * 16;
    image_yscale = 1;
    ystart = y;
}
image_yscale = 1;
if (image_xscale &lt; 0)
{
    image_xscale *= -1;
    x -= image_xscale * 16;
    xstart = x;
}
image_xscale = round(image_xscale);
if (image_xscale &lt; 1)
    image_xscale = 1;
despawnRange = (image_xscale - 1) * 16;
respawnRange = despawnRange;
segmentLimit = 4;
segmentRange = 8;
segmentCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weird collision
if (!dead)
{
    // Collide with megaboy but only block him if he collides from the bottom, left or right side of
    // the pilar hitbox
    
    // This code is likely glitchy
    
    with (objMegaman)
    {
        if (xspeed == 0 &amp;&amp; yspeed == 0)
            exit;
        var _prevX = x;
        var _prevY = y;
        var xsp = xspeed;
        var ysp = yspeed;
        x = xprevious;
        y = yprevious;
        var verticalCollision = bbox_top &gt;= other.bbox_bottom;
        if (gravDir == -1)
        {
            verticalCollision = bbox_bottom &lt;= other.bbox_top;
        }
        var horizontalCollision1 = bbox_right &lt;= other.bbox_left;
        var horizontalCollision2 = bbox_left &gt;= other.bbox_right;
        
        if ((
            verticalCollision
            || horizontalCollision1
            || horizontalCollision2
            )
            &amp;&amp; !place_meeting(x - xspeed, y - yspeed, other.id) &amp;&amp; place_meeting(x + xspeed, y + yspeed, other.id))
        {
            x += xspeed;
            if (horizontalCollision1 || horizontalCollision2)
            {
                if (place_meeting(x, y, other))
                {
                    if (horizontalCollision1)
                    {
                        shiftObject((other.bbox_left - 1) - bbox_right, 0, 0);
                        xspeed = 0;
                    }
                    else if (horizontalCollision2)
                    {
                        shiftObject((other.bbox_right + 1) - bbox_left, 0, 0);
                        xspeed = 0;
                    }
                }
                x += xspeed;
            }
            else
            {
                x = _prevX;
            }
            if (verticalCollision)
                y += yspeed;
            else
                y = _prevY;
            
            verticalCollision = verticalCollision &amp;&amp; place_meeting(x, y, other.id);
            if (verticalCollision &amp;&amp; !isSlide)
            {
                if (gravDir == 1)
                    shiftObject(0, (other.bbox_bottom + 1) - bbox_top, 0);
                else
                    shiftObject(0, (other.bbox_top - 1) - bbox_bottom, 0);
                
                yspeed = 0;
            }
        }
        else
        {
            x = _prevX;
            y = _prevY;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0;
yspeed = 0;
event_inherited();

if (entityCanStep())
{
    if (instance_exists(objMegaman))
        _gravDir = objMegaman.gravDir;
    if (segmentCount &lt; segmentLimit)
    {
        while (segmentCount &lt; segmentLimit)
        {
            var i = instance_create(x, y, objUranusPlatformSegment);
            var origin = y;
            if (_gravDir == -1)
                origin = y + 16;
            i.image_xscale = image_xscale - (2 * (image_xscale / (16 * image_xscale))); // Prevent early slope effect
            i.x = x + 1;
            i.y = origin;
            i.gravDir = _gravDir;
            i.moveSpeed = animSpeed;
            i.moveAmount = 1;
            i.parent = id;
            i.range = segmentRange;
            i.y += segmentCount * 2 * _gravDir;
            segmentCount += 1;
        }
    }
    animFrame += animSpeed;
    if (floor(animFrame) &gt; 3)//image_number - 1)
        animFrame = 0;
    image_index = floor(animFrame)+(4 * style);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    segmentCount = 0;
    animFrame = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i = 0;
while (i &lt; image_xscale)
{
    draw_sprite_ext(sprite_index, image_index, x + (i * 16), y + 16 * (_gravDir == -1), 1, _gravDir, 0, c_white, 1);
    i += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
