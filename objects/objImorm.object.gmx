<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprImormPreview</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// hideWhileHanging = &lt;true/false&gt;. If set to false, the enemy will not hide itself when it's hanging on the ceiling.

event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 4;
category = "grounded";

facePlayerOnSpawn = false;

//
sprite_index = sprImorm;
mask_index = sprImorm;
x = xstart + image_xscale * (sprite_get_xoffset(sprImorm) - sprite_get_xoffset(sprImormPreview));
y = ystart + image_yscale * (sprite_get_yoffset(sprImorm) - sprite_get_yoffset(sprImormPreview));
xstart = x;
ystart = y;

// Enemy specific code
grav = 0;
gravDir = 0;
phase = 0;
yscaleStart = image_yscale;
timer = 0;
animFrame = 0;
animOffset = 0;
animSpeed = 0.185; // Crawling speed
blinkSpeed = 0.200; // .265


hideWhileHanging = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (entityCanStep())
{
    checkGround();
    
    if (instance_exists(target))
    {
        gravDir = target.image_yscale;
    }
    
    if (gravDir == 0)
    {
        gravDir = 1;
    }
    
    if (phase == 0 &amp;&amp; gravDir != image_yscale)
    {
        grav = 0.25 * gravDir;
        phase = 2;
        canHit = true;
        canDamage = true;
        image_index = 1;
        animFrame = 0;
        timer = 0;
    }
    
    image_yscale = gravDir;
    
    xspeed = 0;
    if (xcoll != 0 &amp;&amp; phase &gt;= 2)
    {
        xspeed = xcoll;
    }
    
    if (phase &gt;= 1)
    {
        grav = 0.25 * gravDir;
    }
    
    switch (phase)
    {
        case 0: // detect if the player is getting close 
            if (instance_exists(target))
            {
                if (abs(target.x - x) &lt; 64) // Checking the horizontal distance between imorm and nearest player.
                {
                    phase = 1;
                    canHit = true;
                    canDamage = true;
                    image_index = 0;
                    timer = 0;
                    grav = 0.25 * gravDir;
                }
            }
            break;
        case 1: // switch to ground frames and begin waiting if it hits the floor 
            if (ground &amp;&amp; image_index == 0)
            {
                image_index = 5;
            }
            else if (image_index == 5)
            {
                timer += 1;
            }
            if (timer == 10) // now start crawling
            {
                timer = 0;
                phase = 2;
                animFrame = 0;
                calibrateDirection();
            }
            break;
        case 2: // Extend and advance 
            var prevFrame = floor(animFrame);
            animFrame += animSpeed;
            if (prevFrame != floor(animFrame))
            {
                if (prevFrame == -1)
                {
                    animFrame = animSpeed;
                }
                if (floor(animFrame) &lt;= 2)
                    xspeed = 8 * image_xscale;
            }
            if (floor(animFrame) &gt; 3)
            {
                phase = 3;
                animFrame = 3;
            }
            break;
        case 3:
            var prevFrame = floor(animFrame);
            animFrame -= animSpeed;
            if (prevFrame != floor(animFrame) &amp;&amp; prevFrame == 3)
            {
                xspeed = -image_xscale;
            }
            if (floor(animFrame) &lt; 0)
            {
                phase = 2;
                animFrame = 0;
            }
            break;
    }
    
    
    
    if (phase &gt;= 2)
    {
        timer += blinkSpeed;
        image_index = 1 + (floor(timer) mod 2) * 4 + floor(animFrame);
    }
}
event_inherited();

if (entityCanStep())
{
    if (phase &gt;= 2 &amp;&amp; ground)
    {
        if (checkSolid(image_xscale * 2, 0) || xcoll != 0 || checkFall(16 * image_xscale, false)) //! checkSolid(16 * image_xscale, 16 * image_yscale)) // Turn around
        {
            image_xscale *= -1;
            xspeed = abs(xcoll) * image_xscale;
            xcoll = xspeed;
            if (xspeed == 0)
                xcoll = image_xscale;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn Event
event_inherited();
canHit = false;
canDamage = false;
grav = 0;
image_index = 0;
animFrame = 0;
timer = 0;
phase = 0;
xcoll = 0;
xspeed = 0;
gravDir = 0;
image_yscale = yscaleStart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hideWhileHanging &amp;&amp; phase == 0)
{
    exit;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
