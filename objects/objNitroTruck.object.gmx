<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNitroTruck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 5;

itemDrop = -1;

isSolid = true;

spd = 3;
canHit = true;
image_speed = 1 / 4;

begunMove = false;

// when positive, runs slow death animation explosion
slowdeath_timer = 0;

has_honked = false;

damageOffset = 1; // I megaman collides with this truck and his bbox_bottom is &gt; bbox_top+damageOffset megaman would get hit
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (!begunMove)
    {
        image_xscale = 1;
        if (x &gt; view_xview[0] + view_wview[0] / 2)
        {
            image_xscale = -1;
        }
        begunMove = true;
        visible = true;
    }
    
    xspeed = image_xscale * spd;
    
    // honk
    if (!has_honked &amp;&amp; canHit &amp;&amp; insideView())
    {
        has_honked = true;
        playSFX(sfxHonk);
    }
    
    // colliding with things:
    if (slowdeath_timer == 0)
    {
        var do_collision = false;
        
        with (objMegaman)
        {
            if (!((bbox_bottom &gt; other.bbox_top + other.damageOffset)))
            {
                continue;
            }
            if (place_meeting(x - other.xspeed, y - min(0, other.yspeed), other))
            {
                // manual damage to player
                if (iFrames == 0 &amp;&amp; canHit)
                {
                    with (other)
                    {
                        entityEntityCollision();
                    }
                }
                
                if (global.playerHealth[playerID] &gt; 0)
                    do_collision = true;
            }
        }
        
        if (xcoll != 0)
        {
            do_collision = true;
        }
        
        with (prtEntity)
        {
            if (id != other.id &amp;&amp; object_index != objMegaman)
            {
                if (!((bbox_bottom &gt; other.bbox_top + other.damageOffset)))
                {
                    continue;
                }
                if (place_meeting(x - other.xspeed * 2, y - min(0, other.yspeed), other))
                {
                    if (!dead &amp;&amp; canHit)
                    {
                        if (object_index == objNitroTruck)
                        {
                            slowdeath_timer = 1;
                            yspeed = 0;
                            do_collision = true;
                        }
                        else
                        {
                            healthpoints -= other.contactDamage;
                            event_user(EV_HURT);
                            if (healthpoints &lt;= 0)
                            {
                                event_user(EV_DEATH);
                                playSFX(sfxEnemyHit);
                            }
                            else
                                do_collision = true;
                        }
                    }
                }
            }
        }
        
        if (do_collision)
        {
            slowdeath_timer = 1;
            instance_create(x+25*image_xscale,choose(y+5,y+40),objBigExplosion);
            playSFX(sfxMM9Explosion);//(sfxExplosion2);
            yspeed = 0;
        }
    }
    else
    {
        // exploding animation
        canHit = false;
        visible = (slowdeath_timer div 3) mod 2;
        xspeed = -image_xscale;
        
        if (slowdeath_timer == 10)
        {
            instance_create(x-30*image_xscale,choose(y+5,y+30),objBigExplosion);
            playSFX(sfxMM9Explosion);
        }
        
        if (slowdeath_timer &gt; 10)
        {
            xspeed = 0;
        }
        
        if (slowdeath_timer &gt; 20)
        {
            with (instance_create(bboxGetXCenter(), bboxGetYCenter(), objHarmfulExplosion))
            {
                contactDamage = 0;
                playSFX(sfxMM9Explosion);
            }
            dead = true;
            visible = true;
        }
        
        slowdeath_timer += 1;
    }
}
else if (dead)
{
    begunMove = false;
    slowdeath_timer = 0;
    canHit = true;
    has_honked = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index != objSparkShock &amp;&amp; other.object_index != objChillShot
    &amp;&amp; other.object_index != objChillSpikeLanded)
{
    other.guardCancel = 3;
    global.damage = 0;
}
else if (other.object_index == objChillSpikeLanded)
{
    slowdeath_timer = 1;
    instance_create(x+25*image_xscale,choose(y+5,y+40),objBigExplosion);
    playSFX(sfxMM9Explosion);
    yspeed = 0;
    global.damage = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
