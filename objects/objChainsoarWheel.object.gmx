<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChainsoarWheel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

moveSpeed = 0;
imgSpd = 0.2;
grav = 0.25;
accel = 0.05;

respawn = false;
contactDamage = 2;
reflectable = 0;
facePlayerOnSpawn = true;

blockCollision = true;
bounceTimes = 0;
itemDrop = -1;
bubbleTimer = -1;

moveTimer = 60;
canLive = 9; // time until wheel is destroyed.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    image_index += imgSpd;
    
    if (xcoll != 0)
    {
        image_xscale *= -1;
    }
    
    if (bounceTimes &lt; 4)
    {
        xspeed = accel * image_xscale;
        if (ground) // If touching floor...
        {
            yspeed = -ycoll * 0.5;
            if (yspeed &gt; -0.5)
            {
                yspeed = 0;
            }
            bounceTimes++;
        }
        if (bounceTimes == 3)
        {
            playSFX(sfxWheelCutter2);
        }
        
        if (image_index &gt; 1)
        {
            image_index = 0;
        }
    }
    else
    {
        if (abs(moveSpeed) &lt; 3)
        {
            moveSpeed += accel;
        }
        xspeed = moveSpeed * image_xscale;
    }
    
    // Countdown to destruction
    moveTimer--;
    if (moveTimer == 0)
    {
        canLive--;
        moveTimer = 60;
        if (canLive == 0)
        {
            event_user(10);
            playSFX(getGenericSFX(SFX_ENEMYHIT));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 1 + (other.penetrate == 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
