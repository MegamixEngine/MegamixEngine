<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHornetRollPlace</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

sprite_index = sprHornetRoll;

respawnRange = -1;
despawnRange = -1;
isTargetable = false;
timer = 0;

blockCollision = false;
grav = 0;
bubbleTimer = -1;

myPlatform = noone;

phase = 0; // 0: can shoot. 1: fully extended. 2: pause. 3: retract. 4: pause. 5: return
extendX = 128; // how long the platform is when fully extended
restX = 32; // how long the platform is at rest
speedExtendBegin = 4;
speedExtendEnd = 2;
speedRetractBegin = 4;
speedRetractEnd = 2;
speedRestore = 2;
timeRestExtend = 110;
timeRestRetract = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.frozen)
{
    image_xscale = sign(image_xscale);
    
    if (image_xscale == 0)
    {
        instance_destroy();
    }
    else
    {
        with (instance_place(x, y, objMegaman))
        {
            var collide = false;
            
            if (other.image_xscale == 1)
            {
                collide = bbox_left &lt;= other.x;
            }
            else
            {
                collide = bbox_right &gt;= other.x;
            }
            
            if (collide)
            {
                var checkX = (other.x) - (max(abs(x - bbox_left), abs(x - bbox_right))) * other.image_xscale;
                if (!checkSolid(checkX - x, 0))
                {
                    x = checkX;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    image_xscale = sign(image_xscale);
    if (image_xscale == 0)
        instance_destroy();
    else
    {
        switch (phase)
        {
            case 0: // rest 
                break;
            case 1: // extend 
                var p = abs((x - xstart) / (extendX - restX));
                p *= p; // quadratic scaling
                x += image_xscale * (speedExtendBegin * (1 - p) + p * speedExtendEnd);
                if (x * image_xscale &gt;= xstart * image_xscale + (extendX - restX))
                {
                    x = xstart + (extendX - restX) * image_xscale;
                    phase = 2;
                    timer = 0;
                }
                break;
            case 2: // extended 
                timer++;
                if (timer &gt;= timeRestExtend)
                    phase = 3;
                break;
            case 3: // retract 
                var p = abs((x - xstart + image_xscale * restX) / (extendX));
                p *= (1 - p); // quadratic scaling
                x -= image_xscale * (speedRetractBegin * (p) + (1 - p) * speedRetractEnd);
                if (x * image_xscale &lt;= xstart * image_xscale - restX)
                {
                    x = xstart - image_xscale * restX;
                    phase = 4;
                    timer = 0;
                }
                break;
            case 4: // retracted 
                timer++;
                if (timer &gt;= timeRestRetract)
                    phase = 5;
                break;
            case 5: // restore 
                x += image_xscale * speedRestore;
                if (x * image_xscale &gt;= xstart * image_xscale)
                {
                    x = xstart;
                    phase = 0;
                }
                break;
        }
        
        image_index = (abs(xstart - x) div 4) mod 2;
        if (abs(x - xstart - image_xscale * (extendX - restX)) &lt; 8)
            image_index = 2;
        if (abs(x - xstart - image_xscale * (extendX - restX)) &lt; 4)
            image_index = 3;
        
        if (!instance_exists(myPlatform))
        {
            myPlatform = instance_create(x, y, objTopSolid);
        }
        myPlatform.x = min(x, xstart - image_xscale * restX);
        myPlatform.y = y;
        myPlatform.image_xscale = (abs(xstart - image_xscale * restX - x)) / 16;
        myPlatform.image_yscale = 0.5;
        
        if (myPlatform.image_xscale == 0)
        {
            myPlatform.x += image_xscale * 4;
        }
    }
}
else if (dead)
{
    phase = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 0)
{
    phase = 1;
    playSFX(sfxHornetRoll);
}

other.guardCancel = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw platform:
if (instance_exists(myPlatform))
{
    var platEndX = myPlatform.x;
    if (image_xscale == -1)
        platEndX = myPlatform.x + 16 * myPlatform.image_xscale;
    for (var i = 0; i &lt;= floor(myPlatform.image_xscale); i++)
    {
        var draw_x = platEndX + (i * image_xscale) * 16;
        draw_sprite_ext(sprHornetRollPlatform, i == 0, draw_x, y, image_xscale, 1, 0, c_white, 1);
    }
}

// draw ball
drawSelf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
