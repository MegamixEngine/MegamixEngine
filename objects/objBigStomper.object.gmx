<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigStomper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 12;
healthpoints = healthpointsStart;
contactDamage = 8;

//@cc - Change colour: 0 (default) = orange, 1 = blue, 2 = green
col = 0;

image_speed = 0;
rotationTimer = 0;
animTable = makeArray(3, 2, 1, 0, 0, 1, 2, 3, 3, 0);
animIter = 5; // frames between animation indices
animTimer = animIter * 3;
jumpTypes = 2;
jumpHeight[0] = 20;
jumpHeight[1] = 36;
jumpDistance[0] = 3 * 16 - 4;
jumpDistance[1] = 32;
msk = mskBigStomper;
category = "big eye, bulky";
dieToSpikes = false;
init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = msk;
event_inherited();
mask_index = sprite_index;
if(xcoll!=0)
{
    xspeed=xcoll;
}


//Change colours
if (init)
{
    switch(col)
    {
        case 1:
            sprite_index = sprBigStomperBlue;
            break;
        case 2:
            sprite_index = sprBigStomperGreen;
            break;
        default:
            sprite_index = sprBigStomper;
            break;
    }
    init = 0;
}

if (entityCanStep())
{
    if (!ground)
    {
        // in the air
        animTimer = 3;
        image_index = 0;
        msk = mskBigStomper;
        if (yspeed &gt; 0 &amp;&amp; yspeed - grav &lt; 0)
        {
            if (!checkSolid(0, -6))
                y -= 6;
        }
        if (yspeed &gt; 0)
        {
            animTimer = 0;
            image_index = 3;
            msk = mskBigStomperSmall;
        }
    }
    else
    {
        // on ground
        if (ycoll != 0)
            playSFX(sfxHeavyLand);
        
        // update tall mask
        if (!checkSolid(0, 0) &amp;&amp; msk == mskBigStomperSmall)
        {
            msk = mskBigStomper;
            if (checkSolid(0, 0))
                msk = mskBigStomperSmall;
        }
        
        // play jumping animation
        animTimer++;
        xspeed = 0;
        yspeed = 0;
        image_index = animTable[clamp(animTimer div animIter, 0, array_length_1d(animTable) - 1)];
        if (animTimer div animIter &gt;= array_length_1d(animTable) - 1)
        {
            // jump
            var jumpType = irandom(jumpTypes - 1);
            var h = jumpHeight[jumpType];
            var xDir = choose(1, -1);
            if (instance_exists(target))
                xDir = sign(target.x - x);
            var d = jumpDistance[jumpType] * xDir;
            yspeed = -image_yscale * sqrt(2 * h * grav);
            var time = abs(2 * yspeed / grav);
            xspeed = d / time;
        }
    }
    image_index *= 3;
    rotationTimer += 1;
    image_index += rotationTimer div 4 mod 3;
}
else if (dead)
{
    animTimer = animIter * 3;
    msk = mskBigStomper;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objMagneticShockwave, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
stopSFX(sfxEnemyHit);
var i = instance_create(x,y,objBigExplosion);
with (i)
{
    playSFX(sfxMM9Explosion);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
