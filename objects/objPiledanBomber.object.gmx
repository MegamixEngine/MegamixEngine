<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPiledanBomber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
contactDamage = 3;
healthpointsStart = 4;
healthpoints = 4;
category = "flying, shielded";
canHit = false;
canDamage = false;
grav = 0;
blockCollision = false;
despawnRange = 4;

timer = 0;
phase = 0;
subPhase = 0;
myPiledan = noone;
animFrame = 0;
shootTimer = 0;

sinCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // wait for Piledan to come 
            var refs;
            refs[0] = noone;
            refs[1] = noone;
            var k = 0;
            with (objPiledan)
            {
                if (place_meeting(x, y, other))
                {
                    refs[k] = id;
                    k += 1;
                }
            }
            for (var j = 0; j &lt; k; j++)
            {
                var i = refs[j];
                if (i != noone &amp;&amp; sign(i.yspeed) == image_yscale &amp;&amp; i.foundMachine &amp;&amp; i.image_yscale == image_yscale)
                {
                    myPiledan = i;
                    with (i)
                    {
                        dead = true;
                        healthpoints = 0;
                    }
                    phase = 1;
                    animFrame = 1;
                    playSFX(sfxPiledan);
                    break;
                }
            }
            break;
        case 1: // Transform 
            animFrame += 0.2;
            canHit = true;
            canDamage = true;
            canIce = true;
            if (floor(animFrame) &gt; 8)
            {
                animFrame = 9;
                phase = 2;
            }
            break;
        case 2: // Handle active phase, it's an user event so it's easy to override 
            event_user(0);
            break;
    }
    if (instance_exists(myPiledan))
    {
        myPiledan.beenOutsideView = false;
        myPiledan.x = x;
        myPiledan.y = y;
        myPiledan.dead = true;
    }
    image_index = floor(animFrame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    image_index = 0;
    animFrame = 0;
    phase = 0;
    timer = 0;
    subPhase = 0;
    sinCounter = 0;
    canHit = false;
    canDamage = false;
    canIce = false;
}
myPiledan = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _y = bbox_top;
var _y2 = bbox_bottom;
if (image_yscale == -1)
{
    _y = bbox_bottom;
    _y2 = bbox_top;
}
if (collision_rectangle(x + 16 * image_xscale, _y + 6 * image_yscale, x, _y2, other, true, true))
    other.guardCancel = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
myPiledan = noone;
instance_create(bboxGetXCenter(),bboxGetYCenter(),objBigExplosion);
stopSFX(sfxEnemyHit);
playSFX(sfxMM9Explosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Active phase
switch (subPhase)
{
    case 0:
        timer += 1;
        yspeed = 0;
        shootTimer = 0;
        if (timer &gt; 24)
        {
            subPhase = 1;
            timer = 0;
            shootTimer = pi;
        }
        break;
    case 1:
        timer += 0.05;
        shootTimer += 0.05;
        if (shootTimer &gt; 2 * pi)
        {
            shootTimer = 0;
            with (instance_create(x, y + image_yscale * 7, objEnemyBullet))
            {
                sprite_index = sprPiledanBomb;
                image_yscale = other.image_yscale;
                grav = 0.25 * other.image_yscale;
                blockCollision = false;
                explodeOnContact = true;
                contactDamage = 4;
            }
        }
        yspeed = -sin(timer) * 2.35 * image_yscale;
        xspeed = abs(cos(timer)) * 1.35 * image_xscale;
        if (abs(sin(timer)) &gt; 0.85 || timer &lt; 2)
            xspeed = 0;
}
animFrame += 0.18;
if (floor(animFrame) &gt; 10)
{
    animFrame = 9;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
