<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHomingSniper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 2;

penetrate = 0;
pierces = 0;

isController = 0;

for (var i = 0; i &lt; 6; i++)
{
    controllerTargets[i] = noone;
    crosshairFrame[i] = 0;
}

// Movement
timer = 0;
newAngle = 0;
angle = 0;
animFrame = 0;
spd = 3;

autoFireSet = 14;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (image_xscale &lt; 0)
{
    image_xscale = 1;
    angle = 180;
}
image_yscale = 1;

if (global.cheats[cheatEnums.hugeWeapons])
{
    image_xscale = sign(image_xscale)*4;
    image_yscale = sign(image_yscale)*4;
}

event_inherited();

if (isController) // Code for the controller
{
    if (instance_exists(parent))
    {
        x = parent.x;
        y = parent.y;
    }
    else
    {
        instance_destroy();
        exit;
    }
    
    if (!global.frozen)
    {
        // Amount of targets - based on the chargeTimer
        var n = array_length_1d(controllerTargets);
        var maxTarget = min(parent.chargeTimer div 10, global.ammo[parent.playerID, global.weapon[parent.playerID]]);
        var removed = false;
        for (var i = 0; i &lt; n; i++)
        {
            if (instance_exists(controllerTargets[i]))
            {
                if (!controllerTargets[i].dead &amp;&amp; controllerTargets[i].canHit)
                    continue;
            }
            controllerTargets[i] = noone;
        }
        
        // Clean up spots in the array that contain IDs of dead/unhittable targets
        // And refill them with new targets
        var j = 0;
        for (var i = 0; j &lt; maxTarget &amp;&amp; i &lt; array_length_1d(controllerTargets); i++)
        {
            if (!controllerTargets[i])
            {
                event_user(0);
                controllerTargets[i] = target;
                crosshairFrame[i] = 0;
                if (target != noone)
                    j += 1;
            }
            else
                j += 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
{
    event_inherited();
    
    if (!global.frozen &amp;&amp; !global.switchingSections)
    {
        if (!isController) // Code for the missiles
        {
            // behaviourType = 4;
            
            target = controllerTargets[0];
            
            if (!instance_exists(target))
            {
                event_user(0);
            }
            else if (target.dead || !target.canHit)
            {
                event_user(0);
            }
            
            if (target != controllerTargets[0])
            {
                controllerTargets[0] = target;
                crosshairFrame[0] = 0;
            }
            
            timer++;
            
            if (instance_exists(target)) // Aiming
            {
                var newAngle = point_direction(x, y, bboxGetXCenterObject(target), bboxGetYCenterObject(target));
                newAngle = wrapAngle(floor(newAngle / 30) * 30);
                
                if (!(timer mod 4))
                {
                    if (angle != newAngle)
                    {
                        var delta = 360 - angle;
                        var nangl = (newAngle + delta) % 360;
                        var rotDir = 1 - ((nangl &gt;= 180) * 2);
                        
                        angle = wrapAngle(angle + 30 * rotDir);
                    }
                }
            }
            
            xspeed = cos(degtorad(angle)) * spd;
            yspeed = -sin(degtorad(angle)) * spd;
            
            animFrame = (animFrame + 0.25) mod 2;
            
            image_index = floor(animFrame) * 8 + floor(((angle div 45) * 45) / 45);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!ammoCanAfford(playerID))
{
    with (objHomingSniper)
    {
        if (isController)
        {
            instance_destroy();
        }
    }
    exit;
}

var bulletLimit = 6;
var ammoCost = 1 - (0.5 * (global.energySaver &gt; 0));
var action = 1; // 0 - no frame; 1 - shoot; 2 - throw
var willStop = 0; // If this is 1, the player will halt on shooting ala Metal Blade.

chargeTime = 60; // Set charge time for this weapon
initChargeTime = 20;

if (global.enableCharge &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE))
{
    var hasController = false;
    with (objHomingSniper)
    {
        if (isController &amp;&amp; parent == other.id)
        {
            hasController = true;
            break;
        }
    }
    
    if (!hasController) &amp;&amp; (performShoot)
    {
        i = fireWeapon(16, 0, objHomingSniper, 1, 0, 0, willStop);
        if (i)
        {
            i.isController = true;
            i.canHit = false;
            i.canDamage = false;
            i.respawnRange = -1;
            i.despawnRange = -1;
        }
    //}
    }
}

if (performShoot &amp;&amp; !releaseCharge)
{
    i = fireWeapon(16, 0, objHomingSniper, bulletLimit, ammoCost, action, willStop);
    if (i)
    {
        i.xspeed = 1.5 * image_xscale;
        autoFireDelay = i.autoFireSet;
        playSFX(sfxMissileLaunch);
    }
}

//////////////
// Charging //
//////////////

if (global.enableCharge)
{
    if (releaseCharge &amp;&amp; !isSlide)
    {
        /////////////////////
        // ACTUAL SHOOTING //
        /////////////////////
        var controller = noone;
        with (objHomingSniper)
        {
            if (isController &amp;&amp; parent == other.id)
            {
                controller = id;
                break;
            }
        }
        
        if (controller)
        {
            for (var z = 0; z &lt; array_length_1d(controller.controllerTargets); z++)
            {
                if (instance_exists(controller.controllerTargets[z]))
                {
                    i = fireWeapon(16, 0, objHomingSniper, bulletLimit + 1, ammoCost, action, willStop);
                    if (i)
                    {
                        if (!z)
                        {
                            playSFX(sfxMissileLaunch);
                        }
                        i.controllerTargets[0] = controller.controllerTargets[z];
                        i.crosshairFrame[0] = 2;
                    }
                    else
                    {
                        break;
                    }
                }
            }
            with (controller)
            {
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("HOMING SNIPER", make_color_rgb(172, 124, 0), make_color_rgb(0, 232, 216), sprWeaponIconsHomingSniper);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

instance_create(x, y, objExplosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(EV_DEATH);
playSFX(sfxReflect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Targeting
target = noone;

var targetsToIgnore;
targetsToIgnore[0] = -1;

with (object_index)
{
    if (!isController)
    {
        if (instance_exists(controllerTargets[0]) &amp;&amp; !controllerTargets[0].dead &amp;&amp; controllerTargets[0].canHit)
        {
            controllerTargets[0].canHit *= -1;
            if (targetsToIgnore[0] != -1)
                targetsToIgnore[array_length_1d(targetsToIgnore)] = controllerTargets[0];
            else
                targetsToIgnore[0] = controllerTargets[0];
        }
    }
}

/*with (objDestroyableBlock)
{
    if (weakness != other.object_index)
        canHit *= -1;
}*/

with (objDestroyableBlock)
{
    if (object_index != objSecurityCrystal)
    {
        if (weakness != other.object_index)
            canHit *= -1;
    }
}

with (objSecurityCrystal)
{
    if (weakness != global.weaponID[? other.object_index])
        canHit *= -1;
}

if (isController)
{
    for (var i = 0; i &lt; array_length_1d(controllerTargets); i++)
    {
        if (instance_exists(controllerTargets[i]))
        {
            controllerTargets[i].canHit *= -1;
            if (targetsToIgnore[0] != -1)
                targetsToIgnore[array_length_1d(targetsToIgnore)] = controllerTargets[i];
            else
                targetsToIgnore[0] = controllerTargets[i];
        }
        else
        {
            controllerTargets[i] = noone;
        }
    }
}

setTargetStep();

for (var i = 0; i &lt; array_length_1d(targetsToIgnore); i++)
{
    with (targetsToIgnore[i])
    {
        canHit *= -1;
    }
}

if (!instance_exists(target) &amp;&amp; targetsToIgnore[0] != -1) // Find the least frequent target
{
    var n = array_length_1d(targetsToIgnore);
    if (n &gt; 0)
    {
        quickSort(targetsToIgnore);
        var min_count = 100;
        var curr_count = 1;
        for (var i = 1; i &lt; n; i++)
        {
            if (targetsToIgnore[i] == targetsToIgnore[i - 1])
                curr_count++;
            else
            {
                if (curr_count &lt; min_count)
                {
                    min_count = curr_count;
                    target = targetsToIgnore[i - 1];
                }
                curr_count = 1;
            }
        }
        
        // If last element is least frequent
        if (curr_count &lt; min_count)
        {
            min_count = curr_count;
            target = targetsToIgnore[n - 1];
        }
        if (!instance_exists(target))
        {
            if (!targetsToIgnore[n - 1].dead)
                target = targetsToIgnore[n - 1];
        }
        else if (target.dead)
        {
            if (!targetsToIgnore[n - 1].dead)
                target = targetsToIgnore[n - 1];
        }
    }
}

/*with (objDestroyableBlock)
{
    if (weakness != other.object_index)
        canHit *= -1;
}*/

with (objDestroyableBlock)
{
    if (object_index != objSecurityCrystal)
    {
        if (weakness != other.object_index)
            canHit *= -1;
    }
}

with (objSecurityCrystal)
{
    if (weakness != global.weaponID[? other.object_index])
        canHit *= -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!isController)
{
    event_inherited();
}

var img = sprite_get_number(sprHomingSniperCrosshair) - 1;

for (var i = 0; i &lt; array_length_1d(controllerTargets); i++)
{
    if (instance_exists(controllerTargets[i]))
    {
        var stop = 0;
        
        for (var z = (i - 1); z &gt;= 0; z--)
        {
            if (instance_exists(controllerTargets[i]))
            {
                if (controllerTargets[i] == controllerTargets[z])
                {
                    if (crosshairFrame[z] &lt; img)
                    {
                        stop = 1;
                        break;
                    }
                }
            }
        }
        
        if (stop &amp;&amp; isController)
        {
            continue;
        }
        
        var lastFrame = crosshairFrame[i];
        crosshairFrame[i] = min(img, crosshairFrame[i] + 0.4);
        
        var spr = sprHomingSniperCrosshair;
        
        draw_sprite(spr, floor(crosshairFrame[i]),
            bboxGetXCenterObject(controllerTargets[i]),
            bboxGetYCenterObject(controllerTargets[i]));
        
        if (crosshairFrame[i] == img &amp;&amp; crosshairFrame[i] != lastFrame)
        {
            playSFX(sfxHomingSniperLock);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
