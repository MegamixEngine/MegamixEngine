<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBlizzardCentuarIcon</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
image_yscale = In the room editor, increase the yscale to the height of the blocks you want to move.
distance = ; (by blocks)
mySpeed = ;
myTile = ; (tile layer to shift)
additionalTile = ; (+ how many tiles, usually for animated tiles)

To set the width of this object, place the object objVerticalShiftStop to the right of this one, ON the block you want it to reach.
*/

height = 1;
distance = 1;
mySpeed = 1;
myTile = 10;
additionalTile = 0;

direction = sign(distance);
distance = abs(distance);


width = 0;

getY = y;
yOffset = 0;

objects = ds_list_create();

init = 1;
alarm[2] = 3;
alarm[0] = 6;



width = 0;

while ((!place_meeting(x + width * 16, y, objStopScrollingHorizontal) || width == 0)
    &amp;&amp; !place_meeting(x + width * 16, y, objRightScrolling)
    &amp;&amp; (!place_meeting(x + width * 16, y, objLeftScrolling)
    || width == 0) &amp;&amp; !place_meeting(x + width * 16, y,
    objVerticalShiftStop) &amp;&amp; x + width * 16 &lt; room_width)
{
    width += 1;
}
image_xscale = width;

alarm[1] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt;= image_xscale; i += 1)
{
    for (var j = 0; j &lt;= image_yscale; j += 1)
    {
        var inst = collision_point(x + 8 + i * 16, y + 8 + j * 16, objSolid,
            0, 0);
        with (inst)
        {
            if (image_xscale &gt; 1 || image_yscale &gt; 1)
                splitSolid();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// instance_activate_region(x,y,x + (image_xscale * 16), y + (16*image_yscale), true);

// instance_activate_object(objSolid);


for (var i = 0; i &lt;= image_xscale; i += 1)
{
    for (var j = 0; j &lt;= image_yscale; j += 1)
    {
        if (collision_point(x + i * 16, y + 8 + j * 16, objSolid, 0, 0))
        {
            var a = collision_point(x + i * 16, y + 8 + j * 16, objSolid,
                0, 0).id;
            if (!ds_list_find_index(objects, a))
                ds_list_add(objects, a);
            with (a)
            {
                sprite_index = sprIce;
            }
        }
        if (collision_point(x + i * 16, y + j * 16, objTopSolid, 0,
            0))
        {
            var a = collision_point(x + i * 16, y + j * 16,
                objTopSolid, 0, 0).id;
            if (!ds_list_find_index(objects, a))
                ds_list_add(objects, a);
        }
        if (collision_point(x + i * 16, y - 8 + j * 16, objLadder, 0,
            0))
        {
            var a = collision_point(x + i * 16, y + j * 16, objLadder,
                0, 0).id;
            if (!ds_list_find_index(objects, a))
                ds_list_add(objects, a);
        }
    }
}
image_xscale += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// delayed for water
for (var i = 0; i &lt;= image_xscale; i += 1)
    for (var j = 0; j &lt;= image_yscale; j += 1)
    {
        if (collision_point(x + i * 16, y + 8 + j * 16, objWater, 0, 0))
        {
            a = collision_point(x + i * 16, y + 8 + j * 16, objWater, 0,
                0).id;
            if (!ds_list_find_index(objects, a))
            {
                ds_list_add(objects, a);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    
    direction = sign(distance);
    distance = abs(distance);
}

if (!global.frozen &amp;&amp; insideSection(x + 8, y))
{
    if (direction == 1)
    {
        if (y &lt; getY + distance * 16)
        {
            if (place_meeting(x, y - 1, objMegaman)
                || place_meeting(x, y + 1, objMegaman))
                with (objMegaman)
                {
                    if (ground)
                    {
                        if ((bbox_bottom &lt; other.bbox_bottom &amp;&amp; gravDir &gt; 0)
                            || (bbox_top &lt; other.bbox_top &amp;&amp; gravDir &lt; 0))
                        {
                            y += other.mySpeed;
                        }
                    }
                }
            y += mySpeed;
            yOffset += mySpeed;
            for (i = myTile; i &lt;= myTile + additionalTile; i += 1)
                tile_layer_shift(i, 0, mySpeed);
            for (i = 0; ds_list_size(objects) &gt; i; i += 1)
            {
                var obj = ds_list_find_value(objects, i);
                if (instance_exists(obj))
                {
                    with (obj)
                    {
                        y += other.mySpeed;
                    }
                }
            }
        }
        else
        {
            direction = -1;
            getY += distance * 16;
        }
    }
    else if (direction == -1)
    {
        if (y &gt; getY - distance * 16)
        {
            if (place_meeting(x, y - 8, objMegaman)
                || place_meeting(x, y + 8, objMegaman))
                with (objMegaman)
                {
                    if (collision_rectangle(bbox_left, bbox_top - 2, bbox_right - 1, bbox_bottom + 2, objSolid, false, true) || collision_rectangle(bbox_left, bbox_top - 2, bbox_right - 1, bbox_bottom + 2, objTopSolid, false, true) ||
                        collision_rectangle(bbox_left, bbox_top - 2, bbox_right - 1, bbox_bottom + 2, objLadder, false, true))
                        if ((bbox_bottom &lt; other.bbox_bottom &amp;&amp; gravDir &gt; 0)
                            || (bbox_top &lt; other.bbox_top &amp;&amp; gravDir &lt; 0))
                        {
                            y -= other.mySpeed;
                        }
                }
            y -= mySpeed;
            yOffset -= mySpeed;
            for (i = myTile; i &lt;= myTile + additionalTile; i += 1)
                tile_layer_shift(i, 0, -mySpeed);
            for (i = 0; ds_list_size(objects) &gt; i; i += 1)
            {
                obj = ds_list_find_value(objects, i);
                if (instance_exists(obj))
                {
                    with (obj)
                    {
                        y -= other.mySpeed;
                    }
                }
            }
        }
        else
        {
            direction = 1;
            getY -= distance * 16;
        }
    }
}
else if (!insideSection(x + 8, y) &amp;&amp; yOffset != 0)
{
    y = ystart;
    for (var i = myTile; i &lt;= myTile + additionalTile; i += 1)
        tile_layer_shift(i, 0, -yOffset);
    for (var i = 0; ds_list_size(objects) &gt; i; i += 1)
    {
        var obj = ds_list_find_value(objects, i);
        instance_activate_object(obj);
        if (instance_exists(obj))
        {
            with (obj)
            {
                y -= other.yOffset;
            }
        }
    }
    yOffset = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
