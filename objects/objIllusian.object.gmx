<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIllusian</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//! Illusian will place hologram tiles on this tile layer.
tile_layer = 800000;
healthpointsStart = 1;
healthpoints = healthpointsStart;
blockCollision = 0;
category = "flying";
grav = 0;

// not confirmed:
contactDamage = 3;

y_route = 0;
route_progress = 0;
route_combined = makeArray();
route_progress = makeArray();
route_tile = makeArray();
route_tile_n = 0;

//@cc
move_speed = 2;
//@cc
lay_time = 90;
//@cc
image_speed = 2;
//@cc
image_index = 0;
//@cc
dir = 0;
//@cc
lay_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
tile_layer_hide(tile_layer);
if (entityCanStep())
{
    if (dir == 0)
    {
        dir = -sign(x - view_xview[0] - view_wview[0] / 2);
        x = view_xview[0] + 4;
        if (dir == -1)
            x = view_xview[0] + view_wview[0] - 4;
        
        // split tiles to 16x16:
        var tile_list = tile_get_ids_at_depth(tile_layer);
        for (var i = 0; i &lt; array_length_1d(tile_list); i++)
        {
            var tile = tile_list[i];
            splitTile(tile);
        }
        
        // gather tiles on route:
        route_tile_n = 0;
        var tile_list = tile_get_ids_at_depth(tile_layer);
        for (var i = 0; i &lt; array_length_1d(tile_list); i++)
        {
            var tile = tile_list[i];
            if (tile_get_y(tile) == y)
            {
                route_tile[route_tile_n++] = tile;
            }
        }
        
        // bubble sort x values
        var swapped = false;
        for (var i = 0; i &lt; route_tile_n - 1; i++)
        {
            if (tile_get_x(route_tile[i + 1]) * dir &lt; tile_get_x(route_tile[i]) * dir)
            {
                var tmp = route_tile[i];
                route_tile[i] = route_tile[i + 1];
                route_tile[i + 1] = tmp;
                swapped = true;
            }
            if (i == route_tile_n - 2 &amp;&amp; swapped)
            {
                swapped = false;
                i = -1;
            }
        }
        
        if (route_tile_n != 0)
        {
            // route_combined: place two tiles at once in route
            route_combined[route_tile_n - 1] = false;
            for (var i = 0; i &lt; route_tile_n - 1; i++)
            {
                if (tile_get_x(route_tile[i]) == tile_get_x(route_tile[i + 1]) - 16 * dir)
                {
                    route_combined[i] = true;
                    i++;
                }
            }
        }
        route_progress = 0;
        y_route = y;
    }
    
    // movement:
    if (lay_timer == 0)
    {
        x += move_speed * dir;
        image_index = 2;
        
        // stop if passed next block on route:
        if (route_progress &lt; route_tile_n)
        {
            var dst_x = tile_get_x(route_tile[route_progress]) + 8 + 8 * route_combined[route_progress] * dir;
            if (x * dir &gt;= dst_x * dir &amp;&amp; y == y_route)
            {
                x = dst_x;
                lay_timer = lay_time;
                for (var i = 0; i &lt;= route_combined[route_progress]; i++)
                {
                    var tile = route_tile[route_progress + i];
                    with (instance_create(tile_get_x(tile), y_route, objIllusianBlock))
                    {
                        tile_bg = tile_get_background(tile);
                        tile_left = tile_get_left(tile);
                        tile_top = tile_get_top(tile);
                        tile_width = tile_get_width(tile);
                        tile_height = tile_get_height(tile);
                        depth = other.tile_layer;
                    }
                }
                route_progress += 1 + route_combined[route_progress];
            }
        }
    }
    else // laying tiles down
    {
        lay_timer -= 1;
        image_index = ((lay_timer div 4) mod 2);
    }
}
else if (dead)
{
    image_index = 2;
    dir = 0;
    lay_timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hide tile layer
tile_layer_hide(tile_layer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
