<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprElecBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Do not flip it, rotate the object instead or it won't face the right direction
event_inherited();

canHit = false;
grav = 0;
bubbleTimer = -1;

isSolid = 1;

//@cc Initial delay
delay = 0;

//@cc How long the zap lasts
zapLength = 60;

//@cc How much it waits between zaps
waitLength = 60;

alarmAttack = 0;

sx = 0;
sy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    sx = x;
    sy = y;          
    // find the right of the block so we can spawn at it (basically remove the sprite x and y origin of the spawner)
    sx -= sprite_get_xoffset(sprite_index) * cos(degtorad(image_angle));
    sy += sprite_get_xoffset(sprite_index) * sin(degtorad(image_angle)); // -= cause the polar coordinate and cartesian coordinate systems of GMS are misaligned
    sx -= sprite_get_yoffset(sprite_index) * cos(degtorad(image_angle + 270));
    sy += sprite_get_yoffset(sprite_index) * sin(degtorad(image_angle + 270));
    sx += sprite_get_width(sprite_index) * cos(degtorad(image_angle));
    sy -= sprite_get_width(sprite_index) * sin(degtorad(image_angle));
    alarmAttack += 1;
    if (alarmAttack &gt;= (waitLength + zapLength))
    {
        var i = instance_create(sx, sy, objEnemyBullet);
        i.sprite_index = sprElecThunder;
        i.alarmDie = zapLength;
        i.image_angle = image_angle;
        i.imageSpeed = 0.25;
        i.contactDamage = 4;
        i.reflectable = 0;
        
        if (insideView())
        {
            playSFX(sfxBlockZap);
        }
        
        alarmAttack = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(spawned)
{
    alarmAttack = -delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* if we have a custom sprite with a different sprite origin, shift our position so
we are in the same place we appeared in in the editor */
if (sprite_get_xoffset(sprite_index) != 0 || sprite_get_yoffset(sprite_index) != 0)
{
    // find the top left position of the laser spawner so we can spawn at it (basically remove the sprite x and y origin of the spawner)
    xstart += sprite_get_xoffset(sprite_index) * cos(degtorad(image_angle));
    ystart -= sprite_get_xoffset(sprite_index) * sin(degtorad(image_angle)); // -= cause the polar coordinate and cartesian coordinate systems of GMS are misaligned
    xstart += sprite_get_yoffset(sprite_index) * cos(degtorad(image_angle + 270));
    ystart -= sprite_get_yoffset(sprite_index) * sin(degtorad(image_angle + 270));
    
    x = xstart;
    y = ystart;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
