<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTenguDisk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 1;

blockCollision = 1;

penetrate = 0;
pierces = 0;

xspeed = 0;
yspeed = 0;
grav = 0;

init = true;
xSpdConst = 5;
bounced = false;

stopSFX(sfxSlashClaw);
playSFX(sfxTenguBlade);
animTimer = 0;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    // Destroys the disk if it spawns inside a wall.
    if (positionCollision(x, y))
    {
        instance_destroy();
    }
    init = false;
}

event_inherited();

if (!global.frozen &amp;&amp; canDamage)
{
    // Bounces off walls.
    if (xcoll != 0 &amp;&amp; ycoll * image_yscale &gt;= 0)
    {
        image_xscale *= -1;
        xspeed = xSpdConst * image_xscale;
        yspeed = 0;
        bounced = true;
    }
    
    // Starts curving up after bouncing once.
    if (bounced)
    {
        yspeed -= image_yscale * 0.375; // 0.25;
    }
    
    // Disappears after hitting the ceiling.
    if (ycoll * image_yscale &lt; 0)
    {
        instance_destroy();
    }
    
    // Animation
    animTimer++;
    
    if (image_index &lt; 2)
    {
        if (animTimer == 3)
        {
            image_index = 1;
        }
        
        if (animTimer == 6)
        {
            xspeed = xSpdConst * image_xscale;
            animTimer = 0;
            image_index = 2;
        }
    }
    else
    {
        if (animTimer mod 4 == 0)
        {
            image_index += 1;
            if (image_index &gt; 5)
            {
                image_index = 2;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
