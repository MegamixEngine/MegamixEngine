<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHornetChaser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = false;

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 3;
itemDrop = -1;
stopOnFlash = false;

blockCollision = 0;
grav = 0;
inWater = -1;

// Enemy specific code
phase = 0;
timer = 2; // initial wait time
counter = 0;

spd = 3;

imgIndex = 0;
imgSpd = 0.3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // starting movement
        case 0:
            if (abs(xstart - x) &lt; 23)
            {
                xspeed = spd * image_xscale;
            }
            else
            {
                xspeed = 0;
                x = xstart + 23 * image_xscale;
                
                timer -= 1;
                if (timer &lt;= 0)
                {
                    timer = 0;
                    xspeed = 0;
                    phase++;
                }
            }
            break;
        
        // pause briefly
        case 1:
            timer += 1;
            if (timer &gt;= 28)
            {
                timer = 0;
                phase++;
                playSFX(sfxHornetChaser);
                
                if (instance_exists(target))
                {
                    direction = point_direction(x, y, target.x, target.y);
                }
                else
                {
                    // just go straight if there's no player
                    direction = 180 * (image_xscale == -1);
                }
                
                calibrateDirection();
            }
            break;
        
        // move towards the player
        case 2:
            speed = spd;
            timer += 1;
            if (counter &lt; 3 &amp;&amp; timer &gt; 28)
            {
                timer = 0;
                speed = 0;
                counter++;
                phase--;
            }
            break;
    }
    imgIndex += imgSpd;
    if (imgIndex &gt;= 2)
        imgIndex = 0;
}
else if (dead)
{
    phase = 0;
    timer = 0;
    xspeed = 0;
    speed = 0;
}
else
{
    // don't move when we're not suppose to be able to do anything
    speed = 0;
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objBusterShot, 1);
specialDamageValue(objBusterShotHalfCharged, 1);
specialDamageValue(objBusterShotCharged, 2);
specialDamageValue(objBusterShotHalfChargedProto, 1);
specialDamageValue(objBusterShotChargedProto, 2);
specialDamageValue(objPharaohShot, 2);
specialDamageValue(objPharaohShot, max(2, global.damage / 5));
specialDamageValue(objSolarBlaze, 3);
specialDamageValue(objChillSpike, 3);
specialDamageValue(objChillSpikeLanded, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
