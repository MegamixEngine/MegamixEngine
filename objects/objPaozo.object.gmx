<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPaozo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This big elephant that sucks and throws his ball.
event_inherited();

respawn = true;
introSprite = sprPaozoTeleport;

healthpointsStart = 15;
healthpoints = healthpointsStart;
contactDamage = 5;
category = "bulky, nature";

// Creation code

//@cc 0 = red (pushes ball); 1 = green (bounces ball)
type = 0;

// Enemy specific code
init = true;
ball = noone;
image_speed = 0;
phase = 0;
timer = 0;
suckTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = false;
    switch (type)
    {
        case 0:
            sprite_index = sprPaozo;
            break;
        case 1:
            sprite_index = sprPaozoGreen;
            break;
    }
}

event_inherited();

if (entityCanStep()
    &amp;&amp; introTimer &lt;= 0)
{
    var ballPosX = x + 36 * image_xscale;
    var ballPosY = y - 15;
    
    if (timer &gt; 0)
        timer -= 1;
    
    if (!instance_exists(ball))
    {
        ball = instance_create(ballPosX, ballPosY, objPaozoBall);
        if (type == 1)
            ball.sprite_index = sprPaozoBallGreen;
        ball.parent = id;
        suckTimer = -1;
        phase = 0;
        timer = 20;
        image_index = 0;
    }
    
    switch (phase)
    {
        case 0:
            ball.x = ballPosX;
            ball.y = ballPosY;
            
            if (timer == 0)
            {
                phase = 1;
                timer = 36;
                image_index = 1;
                ball.image_speed = .3;
                ball.xspeed = 2 * image_xscale;
                ball.grav = .4;
                ball.blockCollision = true;
                if (type == 1)
                {
                    ball.yspeed = -6;
                    ball.canBounce = true;
                }
            }
            break;
        case 1:
            if (timer == 32)
                image_index = 2;
            if (timer == 18)
                image_index = 3;
            if (timer == 10)
                image_index = 0;
            if (timer &lt; 10 &amp;&amp; ball.xspeed != 0)
                timer = 10;
            if (timer == 8)
            {
                playSFX(sfxPaozoSuckIn);
                image_index = 4;
                suckTimer = 0;
            }
            if (timer == 0)
                phase = 2;
            break;
        case 2:
            if (!(ball.x &gt; ballPosX - 2 &amp;&amp;
                ball.x &lt; ballPosX + 2 &amp;&amp;
                ball.y &gt; ballPosY - 2 &amp;&amp;
                ball.y &lt; ballPosY + 2))
            {
                with (ball)
                {
                    grav = 0;
                    blockCollision = false;
                    
                    moveTowardPoint(other.ballPosX, other.ballPosY, 2);
                }
            }
            else
            {
                suckTimer = -1;
                image_index = 0;
                ball.image_speed = 0;
                ball.image_index = 0;
                ball.x = ballPosX;
                ball.y = ballPosY;
                ball.xspeed = 0;
                ball.yspeed = 0;
                ball.canBounce = false;
                phase = 0;
                timer = 20;
            }
            break;
    }
    
    if (suckTimer &gt; -1)
    {
        with (objMegaman)
        {
            if ((x &lt;= other.x - 26 &amp;&amp; other.image_xscale == -1)
                || (x &gt;= other.x + 26 &amp;&amp; other.image_xscale == 1))
                playerBlow(-.9 * other.image_xscale);
        }
        
        if (suckTimer &lt; 3)
        {
            suckTimer += 1;
        }
        else
        {
            if (image_index == 4)
                image_index = 5;
            else
                image_index = 4;
            suckTimer = 0;
        }
    }
}
else if (!insideView())
{
    // something something
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
