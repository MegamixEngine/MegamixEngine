<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKonroPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canHit = false;
grav = 0;
bubbleTimer = -1;

isSolid = 2;
subX = 0; // Because moving in sub-pixels messed up collision, we need a value that keeps track of the sub-pixels, and only use real pixels for yspeed
maxSpeed = 0.75;
phase = 0; // 0 = not moving; 1 = moving up; 2 = moving down
test = 0;
resetDelay = 32;
delayTimer = resetDelay;
distanceTimer = 0;
moveDist = 78;
storeDir = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (phase == 0)
    {
        with (objMegaman)
        {
            if (ground)
            {
                if (place_meeting(x, y + gravDir, other.id))
                {
                    with (other)
                    {
                        phase = 5;
                    }
                }
            }
        }
    }
    if (phase == 1) // Moving forwards
    {
        xspeed = maxSpeed * sign(image_xscale);
        distanceTimer += maxSpeed;
        if (xcoll != 0 || distanceTimer &gt;= moveDist)
        {
            image_xscale *= -1;
            distanceTimer = 0;
            xspeed = 0;
            phase = 3;
        }
    }
    else if (phase == 2) // Moving back
    {
        xspeed = maxSpeed * sign(image_xscale);
        distanceTimer += maxSpeed;
        if (xcoll != 0 || distanceTimer &gt;= moveDist)
        {
            image_xscale *= -1;
            distanceTimer = 0;
            xspeed = 0;
            phase = 4;
        }
    }
    else if (phase == 3 || phase == 4 || phase == 5) // delay movement
    {
        delayTimer -= 1;
        if (delayTimer &lt;= 0)
        {
            delayTimer = resetDelay;
            if (phase == 3)
            {
                phase = 2;
            }
            else if (phase == 5)
            {
                phase = 1;
            }
            else
            {
                phase = 0;
            }
        }
    }
}
else if (dead)
{
    image_xscale = storeDir;
    phase = 0;
    distanceTimer = 0;
    delayTimer = resetDelay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xs = image_xscale;
image_xscale = 1;
event_inherited();
image_xscale = xs;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
