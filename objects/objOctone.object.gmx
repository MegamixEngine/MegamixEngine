<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprOctone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;
category = "aquatic, nature";

// Enemy specific code
image_speed = 0;
phaseTimer = 0;
phase = 0; // 0: in shell, 1: popping out, 2: out, 3: retracting
shootTimer = -1;
waitTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (entityCanStep())
    image_index = 0;

event_inherited();

if (entityCanStep())
{
    phaseTimer += 1;
    switch (phase)
    {
        case 0: // retracted 
            image_index = 0;
            if (waitTimer &gt; 0)
                waitTimer--;
            if (waitTimer &lt;= 0) // pop out if mega man comes near
                with (objMegaman)
                    if (point_distance(x, y, other.x, other.y) &lt; 64)
                    {
                        other.target = id;
                        other.phase = 1;
                        other.phaseTimer = 0;
                        with (other)
                            calibrateDirection();
                    }
            break;
        case 1: // emerging 
            image_index = floor(phaseTimer * 15 / 60);
            if (image_index &gt;= 4)
            {
                phase = 2;
                phaseTimer = 0;
                shootTimer = -1;
            }
            else
                break;
        case 2: // emerged 
            image_index = 4 + (phaseTimer div 10) mod 2;
            
            // shoot
            if (phaseTimer == 30)
            {
                shootTimer = 0;
                with (instance_create(x + 16 * image_xscale, y - 8, objOctoneInkball))
                {
                    yspeed = -2;
                    xspeed = 4 * other.image_xscale;
                    if (instance_exists(target))
                    {
                        if (abs(target.x - x) &lt; 140)
                        {
                            xspeed = floor((target.x - x)) / 20;
                            if (abs(target.x - other.x) &lt; 18)
                                xspeed = other.image_xscale / 2;
                        }
                        else
                            xspeed = other.image_xscale * 140 / 20;
                    }
                }
            }
            if (shootTimer &gt;= 0 &amp;&amp; shootTimer &lt;= 10)
            {
                shootTimer += 1;
                image_index = 6;
            }
            if (phaseTimer &gt;= 60)
            {
                phase = 3;
                phaseTimer = 0;
            }
            else
                break;
        case 3: // retract 
            image_index = 4 - (floor(phaseTimer * 15 / 60));
            waitTimer = 40;
            if (image_index &lt;= 0)
                phase = 0;
            break;
    }
}
else if (dead)
{
    phase = 0;
    waitTimer = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.penetrate &gt;= 1 &amp;&amp; image_index &lt; 2)
    exit;

// reflect bullets
if (collision_rectangle(x - 16, y - 3,
    x + 16, y + 17, other.id, false, false))
{
    other.guardCancel = 1;
    if (phase == 0)
    {
        phase = 1;
        phaseTimer = 0;
        calibrateDirection();
    }
}
else if (collision_rectangle(x - 32, y - 3,
    x + 32, y + 17, other.id, false, false))
{
    // bullets pass through tentacles
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
