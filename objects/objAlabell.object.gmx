<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlabell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// An alarm clock bomb that walks in one direction and jumps at specified intervals (every 2 seconds by default).
/// It explodes when time runs out (3 seconds by default; maximum 9 seconds), but can be pushed away with weapons.
/// Be sure to customize the creation code to suit the challenge! You can also change the creation code of other objects to take damage from Alabell's explosion...

event_inherited();

healthpointsStart = 36;
healthpoints = healthpointsStart;

actionTimer = 60;
jumpTimer = 120;
contactDamage = 4; // Damage dealt to Mega Man via contact

// Enemy Specific Code
// @cc - Set time from 1-9 based on when you want Alabell to explode
time = 3;

//@cc - If true, Alabell will explode on contact with player
explodeContact = false;

dir = 0;
currentTime = time;
animBack = false; // Do we reverse the animation?
imgIndex = 0;
imgSpd = 0.1;
phase = 0;

init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (healthpoints &lt; healthpointsStart)
{
    healthpoints = healthpointsStart; // Always heal damage received - can't be killed
}

if (entityCanStep())
{
    // Change directions when touching wall
    if (xcoll != 0 &amp;&amp; (yspeed == 0) &amp;&amp; (ground))
    {
        dir = -dir;
    }
    
    // Movement
    xspeed = 1 * dir;
    actionTimer -= 1;
    switch (phase)
    {
        case 0: // Walking 
            jumpTimer -= 1;
            if ((jumpTimer &lt;= 0) &amp;&amp; (ground))
            {
                yspeed = -6; // Jump up
                phase = 1;
            }
            break;
        case 1: // Jumping 
            if (ground)
            {
                jumpTimer = 120;
                phase = 0;
            }
            break;
    }
    
    // Animation
    if (!animBack)
    {
        imgIndex += imgSpd;
        if (imgIndex &gt;= 3)
        {
            imgIndex = 2;
            animBack = true;
        }
    }
    else
    {
        imgIndex -= imgSpd;
        if (imgIndex &lt;= 0)
        {
            imgIndex = 1;
            animBack = false;
        }
    }
    
    if (actionTimer == 0)
    {
        if (currentTime != 1)
        {
            actionTimer = 60;
            currentTime -= 1;
            playSFX(sfxCountBomb);
            exit;
        }
        else
        {
            dead = true;
            explosion = instance_create(x, spriteGetYCenter(), objHarmfulExplosion);
            explosion.contactDamage = 8;
            explosion.damageEnemies = true;
            playSFX(getGenericSFX(SFX_EXPLOSIONMM9));
        }
    }
}
image_index = imgIndex div 1 + (3 * (currentTime - 1));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    actionTimer = 60;
    jumpTimer = 120;
    currentTime = time;
    xspeed = 0;
    yspeed = 0;
    imgIndex = 0;
    dir = 0;
    if (instance_exists(target)) // Set direction
    {
        if (x &lt; target.x)
            dir = 1;
        else
            dir = -1;
    }
    else // Delete this if this causes unforseen problems
        dir = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    //if (other.x &lt; x)
    if (sign(other.xspeed) == 1)
    {
        shiftObject(16, 0, 1);
    }
    //else if (other.x &gt; x)
    else if (sign(other.xspeed) == -1)
    {
        shiftObject(-16, 0, 1);
    }
    else if (instance_exists(target))
    {
        shiftObject(16 * sign(target.image_xscale), 0, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (explodeContact)
{
    dead = true;
    explosion = instance_create(x, spriteGetYCenter(), objBigExplosion);
    playSFX(getGenericSFX(SFX_EXPLOSIONMM9));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
