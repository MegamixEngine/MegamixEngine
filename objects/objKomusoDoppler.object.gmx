<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKomusoDoppler2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>sprKomusoMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

calibrateDirection();
respawn = false;

healthpointsStart = 99;
healthpoints = healthpointsStart;
contactDamage = 4;
stopOnFlash = false;
blockCollision = 0;
grav = 0;

// Enemy specific code
xspeed = 0;
yspeed = 0;
image_speed = 0;
image_index = 0;

hasFired = false;
phase = 0;
moveToLocation = 0;
locationX = 0;
locationY = view_yview + 64;
debugABSX = 0;
debugABSY = 0;

deadlyShadowClones = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!instance_exists(objKomusoMan))
    instance_destroy();

if (entityCanStep())
{
    // setup locations to transport to
    switch (moveToLocation)
    {
        case 0:
            locationX = view_xview + 48;
            break;
        case 1:
            locationX = view_xview + (view_wview / 2);
            break;
        case 2:
            locationX = view_xview + view_wview - 48;
            break;
    }
    debugABSX = abs(x - locationX);
    debugABSY = abs(y - locationY);
    
    switch (phase)
    {
        case 0:
            if (image_index &lt; 2)
                image_index += 0.10;
            if (xspeed == 0)
                xspeed = (2.5 + deadlyShadowClones) * image_xscale;
            if ((image_xscale == 1 &amp;&amp; x &gt;= view_xview + (view_wview / 2)
                &amp;&amp; deadlyShadowClones == false) || (image_xscale == -1
                &amp;&amp; x &lt;= view_xview + (view_wview / 2)
                &amp;&amp; deadlyShadowClones == false) || (image_xscale == 1
                &amp;&amp; x &gt;= view_xview + (view_wview - 32)
                &amp;&amp; deadlyShadowClones == true) || (image_xscale == -1
                &amp;&amp; x &lt;= view_xview + 32 &amp;&amp; deadlyShadowClones == true))
                phase = 1;
            break;
        case 1:
            sprite_index = sprKomusoDoppler1;
            xspeed = 0;
            yspeed = 0;
            mp_linear_step(locationX, locationY, 3.5, false);
            if (abs(x - locationX) &lt;= 2 &amp;&amp; abs(y - locationY) &lt;= 2)
            {
                x = locationX;
                y = locationY;
                phase = 2;
                with (objKomusoMan)
                {
                    attackTimer = 0;
                }
            }
            break;
        case 3:
            sprite_index = sprKomusoDoppler3;
            if (instance_exists(objKomusoMan))
                image_index = objKomusoMan.image_index;
            if (image_index &gt;= 3 &amp;&amp; hasFired == false)
            {
                hasFired = true;
                var ID;
                ID = instance_create(x, y, objKomusoBullet);
                ID.angle = 90 + 180;
                ID.xscale = image_xscale;
                ID = instance_create(x, y, objKomusoBullet);
                ID.angle = 135 + 180;
                ID.xscale = image_xscale;
                ID = instance_create(x, y, objKomusoBullet);
                ID.angle = 45 + 180;
                ID.xscale = image_xscale;
            }
            break;
        case 4:
            moveToLocation = 1;
            if (instance_exists(objKomusoMan))
                locationY = objKomusoMan.resetY;
            image_index = 3;
            mp_linear_step(locationX, locationY, 2, false);
            if (abs(x - locationX) &lt;= 2 &amp;&amp; abs(y - locationY) &lt;= 2)
                instance_destroy();
            break;
    }
}
else if (dead)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
