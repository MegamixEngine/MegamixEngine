<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCamon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "grounded";

facePlayerOnSpawn = true;

// Enemy specific code
hasFired = false;
shotBool = false;
attackTimer = 0;

//creation code
image_speed = 0.125;
slowdown = 0; // if 1, then reduce camon speed after its initial speed is set
turnRound = true; //if false, dont turn when hitting wall
attackTimerMax = 0; //if set, how long camon waits before moving again, if at xspeed 0. set to -1 to never make it move again.
spd = 1.5; //speed of movement
jumpY = 0; //'jump speed' when spawning
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (attackTimer &gt;= attackTimerMax &amp;&amp; attackTimerMax != -1)
    {
        hasFired = false;
        attackTimer = 0;
        if (!turnRound)
            calibrateDirection();
    }
    
    if (!ground &amp;&amp; !hasFired)
    {
        if (jumpY == 0 || shotBool)
            xspeed = 0;
    }
    
    if (xspeed == 0 &amp;&amp; yspeed == 0 &amp;&amp; ground &amp;&amp; !hasFired)
    {
        xspeed = spd * image_xscale;
        if (slowdown)
        {
            hasFired = true;
        }
    }
    
    if (ground)
    {
        shotBool = true;
    }
    
    if (turnRound)
    {
        xSpeedTurnaround();
        if (attackTimerMax &gt; 0)
        {
            hasFired = true;
            xspeed = 0;
        }
        
    }
    else 
    {
        if (xcoll != 0)
        {
            xspeed = 0;
            hasFired = true;
        }
    }
        
    if (hasFired)
    {
        var newSpeed = min(0,abs(xspeed) - 0.04);
        xspeed = newSpeed * image_xscale; 
        if (image_xscale &gt;= 1 &amp;&amp; xspeed &lt;= 0 || image_xscale &lt;= -1 &amp;&amp; xspeed &gt;= 0)
        {
            attackTimer ++;
            xspeed = 0;
        }
    }
}
else if (dead)
{
    xspeed = 0;
    yspeed = 0;
    image_index = 0;
    hasFired = false;
    attackTimer = 0;
    shotBool = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    xspeed = spd * image_xscale;
    yspeed = jumpY * image_yscale;
    attackTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
