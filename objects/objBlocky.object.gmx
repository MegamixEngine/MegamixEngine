<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBlocky</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A bunch of blocks togheter, this enemy will dance and move forwards, if his vulnerable part is hit
// he will fall and the blocks will spread, if he's still alive he will regenerate.

event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 8;

category = "shielded";

//@cc
facePlayerOnSpawn = true;

// Enemy specific code
//image_speed = 0.15; // Using this variable is not recommended, please avoid it
imgIndex = 0;
imgSpd = 0.15;
frameTracker = 0;
canBlink = false;
blinkCounter = 0;

collapseTimer = 180;
collapsed = false;
catchTimes = 0;

//@cc set to false to disable turning
canTurn = true;

calibrated = 0;

//@cc 0 = blue; 1 = gray
col = 0;

init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (init)
{
    init = 0;
    switch (col)
    {
        case 0:
            sprite_index = sprBlocky;
            break;
        case 1:
            sprite_index = sprBlockyGray;
            break;
        default:
            sprite_index = sprBlocky;
            break;
    }
}

if (entityCanStep())
{
    if (!collapsed)
    {
        // Animation
        var animTable = makeArray(1+(2*canBlink),0,1,2);
        imgIndex = animTable[frameTracker div 1];
        frameTracker += imgSpd;
        
        if (frameTracker &gt;= 4) // Keep track of when to blink
        {
            if (canBlink == false)
            {
                blinkCounter++;
                if (blinkCounter == 2)
                    canBlink = true;
            }
            else
            {
                canBlink = false;
                blinkCounter = 0;
            }
            frameTracker = 0;
        }
    }
    if (xcoll != 0)
    {
        image_xscale *= -1;
    }
    if (xspeed == 0 &amp;&amp; !collapsed)
    {
        xspeed = 0.35 * image_xscale;
    }
    
    if (catchTimes &gt;= 3 &amp;&amp; collapsed)
    {
        collapsed = false;
        collapseTimer = 150;
        y -= 48;
        
        switch (col)
        {
            case 0:
                sprite_index = sprBlocky;
                break;
            case 1:
                sprite_index = sprBlockyGray;
                break;
            default:
                sprite_index = sprBlocky;
                break;
        }
        canBlink = false;
        blinkCounter = 0;
        frameTracker = 0;
        imgIndex = 2;
        calibrateDirection();
    }
    
    if (ground &amp;&amp; (sprite_index == sprBlockySpray || sprite_index == sprBlockySprayGray))
    {
        imgIndex = 1;
        collapseTimer -= 1;
        if (collapseTimer == 30 || collapseTimer == 20 || collapseTimer == 10)
        {
            var ID = instance_create(x, view_yview[0] + 224 - 16, objBlockySprayRise);
            ID.respawn = false;
            ID.despawnRange = 8;
            ID.canHit = false;
            switch (col)
            {
                case 0:
                    ID.sprite_index = sprBlockySpray;
                    break;
                case 1:
                    ID.sprite_index = sprBlockySprayGray;
                    break;
                default:
                    ID.sprite_index = sprBlockySpray;
                    break;
            }
        }
    }
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
switch (col)
{
    case 0:
        sprite_index = sprBlocky;
        break;
    case 1:
        sprite_index = sprBlockyGray;
        break;
    default:
        sprite_index = sprBlocky;
        break;
}
imgIndex = 1;
frameTracker = 0;
canBlink = false;
blinkCounter = 0;
collapseTimer = 180;
collapsed = false;
catchTimes = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(sprite_index == sprBlockySpray || sprite_index == sprBlockySprayGray) &amp;&amp; (bboxGetYCenterObject(other.id) &gt;= y + 17
    &amp;&amp; bboxGetYCenterObject(other.id) &lt;= y + 33) &amp;&amp; (other.object_index != objTornadoBlow))
{
    if (other.object_index != objSparkShock)
    {
        playSFX(getGenericSFX(SFX_ENEMYHIT));
        if (healthpoints == 2)
        {
            i = instance_create(x, y + 16, objBlockySpray);
            with (i)
            {
                switch (other.col)
                {
                    case 0:
                        sprite_index = sprBlockySpray;
                        break;
                    case 1:
                        sprite_index = sprBlockySprayGray;
                        break;
                    default:
                        sprite_index = sprBlockySpray;
                        break;
                }
                image_index = 2;
                image_speed = 0;
            }
            i.xspeed = 1 * image_xscale;
            i.yspeed = -2;
            
            i = instance_create(x, y + 16, objBlockySpray);
            with (i)
            {
                switch (other.col)
                {
                    case 0:
                        sprite_index = sprBlockySpray;
                        break;
                    case 1:
                        sprite_index = sprBlockySprayGray;
                        break;
                    default:
                        sprite_index = sprBlockySpray;
                        break;
                }
                image_index = 2;
                image_speed = 0;
            }
            i.xspeed = 1.5 * image_xscale;
            i.yspeed = -4;
            
            i = instance_create(x, y + 16, objBlockySpray);
            with (i)
            {
                switch (other.col)
                {
                    case 0:
                        sprite_index = sprBlockySpray;
                        break;
                    case 1:
                        sprite_index = sprBlockySprayGray;
                        break;
                    default:
                        sprite_index = sprBlockySpray;
                        break;
                }
                image_index = 2;
                image_speed = 0;
            }
            i.xspeed = 2 * image_xscale;
            i.yspeed = -6;
            
            collapsed = true;
            switch (col)
            {
                case 0:
                    sprite_index = sprBlockySpray;
                    break;
                case 1:
                    sprite_index = sprBlockySprayGray;
                    break;
                default:
                    sprite_index = sprBlockySpray;
                    break;
            }
            y += 16;
            image_speed = 0;
            image_index = 0;
            xspeed = 0;
        }
    }
}
else
{
    if (other.object_index == objTornadoBlow)
        exit;
    global.damage = 0;
    other.guardCancel = 1;
    if (other.penetrate &gt; 1)
        other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
