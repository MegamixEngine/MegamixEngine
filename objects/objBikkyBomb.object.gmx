<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBikkyBomb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// A lotto wheel enemy from Mars's stage that spins, tosses bombs, and jumps towards you.
// While spinning, it reflects non-piercing weapons.

event_inherited();

healthpointsStart = 6;
contactDamage = 6;
facePlayerOnSpawn = true;

category = "semi bulky";

phase = 0;
imgIndex = 0;
imgSpd = 0.2;
animBack = false;
moveTimer = 60;
spinTimer = 120;
jumps = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // spawn and Spin
        case 0:
        moveTimer--;
        if (moveTimer &lt;= 0)
        {
            spinTimer--;
                    
            if (spinTimer &gt; 0)
            {
                if (animBack == false)
                {
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 4)
                    {
                        imgIndex = 2;
                        animBack = true;
                        }
                    }
                    else
                    {
                        imgIndex -= imgSpd;
                        if (imgIndex &lt; 1)
                        {
                            imgIndex = 2;
                            animBack = false;
                        }
                    }
                }
                else
                {
                    imgIndex = 0;
                    phase = 1;
                    moveTimer = 60;
                    spinTimer = 120;
                    animBack = false;
                }
            }
            break;
        // Toss bomb
        case 1:
            imgIndex += imgSpd;
            if (imgIndex == 1)
            {
                imgIndex = 4;
            }
            if (imgIndex == 4)
            {
                var i = instance_create(x + 8 * image_xscale, y - 4, objBikkyBombBall);
                i.yspeed = -4;
                i.image_xscale = image_xscale;
                playSFX(sfxEnemyDrop);
            }
            if (imgIndex &gt;= 5)
            {
                imgIndex = 0;
                phase = 2;
            }
            break;
        // Jump
        case 2:
            moveTimer--;
            if (moveTimer &lt;= 0)
            {
                if (jumps &lt; 3)
                {
                    yspeed = -4;
                    xspeed = 1 * image_xscale;
                    phase = 3;
                    calibrateDirection();
                }
                else
                {
                    phase = 0;
                    jumps = 0;
                    calibrateDirection();
                }
            }
            break;
        // In Air
        case 3:
            if (!ground)
            {
                if (yspeed &gt;= 0)
                {
                    if (imgIndex != 6)
                    {
                        imgIndex += imgSpd;
                        if (imgIndex == 1)
                        {
                            imgIndex = 5;
                        }
                    }
                }
            }
            else
            {
                phase = 4;
                imgIndex = 0;
                xspeed = 0;
                jumps++;
            }
            break;
        // Landing animation
        case 4:
            imgIndex += imgSpd;
            if (imgIndex == 1)
            {
                imgIndex = 5;
            }
            if (imgIndex == 6)
            {
                imgIndex = 0;
                phase = 2;
                moveTimer = 60;
            }
            break;
    }
}
else if (dead)
{
    healthpoints = healthpointsStart;
    phase = 0;
    imgIndex = 0;
    animBack = false;
    moveTimer = 60;
    spinTimer = 120;
    jumps = 0;
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((image_index &gt; 0) &amp;&amp; (image_index &lt; 4))
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
