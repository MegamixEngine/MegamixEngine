<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEscarooEyes</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):

event_inherited();

healthpointsStart = 16;
healthpoints = healthpointsStart;
contactDamage = 4; // Bombs
facePlayerOnSpawn = false;
category = "bulky, nature";

doesIntro = false;

grav = 0;
blockCollision = 0;
despawnRange = -1;
spawnRange = -1;

// Enemy specific code
shootTimer = 0;
parent = noone;
dir = 1;
getX = x;
getY = y;

image_xscale = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(parent))
{
    if (healthpoints &gt; parent.healthpoints)
        healthpoints = parent.healthpoints;
    else
        parent.healthpoints = healthpoints;
}
if (entityCanStep())
{
    if (instance_exists(parent))
    {
        shootTimer = parent.shootTimer;
    }
    else
        shootTimer += 1;
    
    if (shootTimer == 50 || shootTimer == 160 + 50)
        image_index = 1;
    if (shootTimer == 60 || shootTimer == 160 + 60)
        image_index = 2;
    if (shootTimer == 160 + 89)
        image_index = 0;
    
    
    if (shootTimer == 90)
    {
        getX = x;
        getY = y;
        
        // image_index = 0;
        var spd = 4;
        
        // setTargetStep();
        if (instance_exists(target))
        {
            var angle;
            angle = floor(point_direction(spriteGetXCenter(),
                spriteGetYCenter(), spriteGetXCenterObject(target),
                spriteGetYCenterObject(target)) / 45) * 45;
            
            xspeed = cos(degtorad(angle)) * spd;
            yspeed = -sin(degtorad(angle)) * spd;
            x += xspeed;
            y += yspeed;
        }
        else
        {
            xspeed = spd;
            yspeed = 0;
        }
    }
    if (shootTimer == 95 &amp;&amp; dir != 0)
    {
        shootTimer = 91;
        if (instance_exists(parent))
            parent.shootTimer = 91;
    }
    
    if (x &lt; view_xview + 16 || x &gt; view_xview + view_wview - 16
        || y &lt; view_yview + 16 || y &gt; view_yview + view_hview - 16)
    {
        if (shootTimer &lt;= 95)
            dir = 0;
    }
    
    if (dir == 0 &amp;&amp; shootTimer == 110)
        dir = -1;
    
    // dir. hacky as FART
    x -= xspeed;
    y -= yspeed;
    
    x += xspeed * dir;
    y += yspeed * dir;
    
    if (shootTimer != 90 &amp;&amp; dir == -1 &amp;&amp; sign(getX - x) == sign(xspeed) &amp;&amp; sign(getY - y) == sign(yspeed))
    {
        image_index = 0;
        xspeed = 0;
        yspeed = 0;
        x = getX;
        y = getY;
        dir = 1;
    }
}
else if (!insideView())
{
    if (instance_exists(parent))
    {
        image_xscale = parent.image_xscale;
    }
    image_index = 0;
    shootTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (floor(image_index) != 2)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (parent != noone)
{
    with (parent)
    {
        healthpoints = 0;
        dead = true;
        event_user(EV_DEATH);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
