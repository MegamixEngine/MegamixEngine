<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBomberPepe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A penguin that attacks by launching explosive eggs
event_inherited();

calibrateDirection();

healthpointsStart = 6;
healthpoints = healthpointsStart;
contactDamage = 6;

category = "semi bulky, nature, bird";

facePlayerOnSpawn = true;

// enemy specific
imgSpd = 0.2;
imgIndex = 0;
jumpWait = 40;
jumpWaitTimer = jumpWait;
shootWaitTimer = -1;

xspeed = 0;
yspeed = 0;
xs = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (shootWaitTimer &lt; 0)
    {
        event_user(0);
    }
    
    // face player when first coming on screen
    if (jumpWaitTimer == jumpWait)
    {
        calibrateDirection();
    }
    
    // movement
    if (jumpWaitTimer &gt; 0)
    {
        // waiting to jump
        jumpWaitTimer -= 1;
    }
    else
    {
        // jumping
        if (jumpWaitTimer == 0)
        {
            // start jump
            jumpWaitTimer = -1; // I reused waitTimer as a boolean  xP
            calibrateDirection();
            xspeed = 1 * image_xscale;
            xs = xspeed;
            yspeed = -3.5; // &lt;-- jump height
            imgIndex = 1;
        }
        else if (ground)
        {
            // landing
            if (jumpWaitTimer == -1)
            {
                jumpWaitTimer = -2; // I reused it as a boolean again
                xspeed = 0;
                yspeed = 0;
                xs = 0;
                imgIndex = 2;
            }
            imgIndex += imgSpd;
            if (imgIndex &gt;= 3)
            {
                jumpWaitTimer = jumpWait;
                imgIndex = 0;
            }
        }
    }
    
    if (xs != 0)
    {
        xspeed = xs;
    }
    
    // shooting (completely independent from jumping)
    if (shootWaitTimer &gt; 0)
    {
        shootWaitTimer -= 1;
    }
    else
    {
        instance_create(x, y, objBomberPepeEgg);
        event_user(0); // set shootWaitTimer to a random number within a range
    }
}
else if (dead)
{
    imgIndex = 0;
    jumpWaitTimer = jumpWait;
    event_user(0); // set shootWaitTimer to a random time within a range
    xs = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get random time to wait until shooting an egg</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shootWaitTimer = random_range(30, 140);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
