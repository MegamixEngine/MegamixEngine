<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCommandoMine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6000000</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 1 / 6;
image_index = 0;

despawnRange = 48;
respawnRange = 48;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

tile_layer = 1000000;

// deactivate instance:
inst_restore_n = 0;
inst_restore[0] = noone;
obj_embed[0] = prtEntity;
obj_embed[1] = prtPickup;
obj_embed_n = 2;

objectDrop = objHarmfulExplosion; //what is used for the object created on death, defaults to harmful explosion

// order for nested commando mines.
depth -= y / 100000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    for (var i = 0; i &lt; inst_restore_n; i++)
    {
        with (inst_restore[i])
        {
            dead = false;
            visible = false;
            instance_deactivate_object(id);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!dead)
{
    for (var i = 0; i &lt; inst_restore_n; i++)
    {
        with (inst_restore[i])
        {
            dead = false;
            instance_deactivate_object(id);
        }
    }
    
    // triggered by explosions, projectiles
    if (place_meeting(x, y, objExplosion))
    {
        event_user(EV_DEATH);
    }
    if (place_meeting(x, y, objMegaman))
    {
        event_user(EV_DEATH);
    }
    else
    {
        with (instance_place(x, y, prtEnemyProjectile))
        {
            with (other)
            {
                event_user(EV_DEATH);
                with (other)
                {
                    instance_destroy();
                }
                exit;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    for (var i = 0; i &lt; inst_restore_n; i++)
    {
        with (inst_restore[i])
        {
            dead = true;
            visible = false;
            beenOutsideView = false;
            instance_deactivate_object(id);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = 1;
instance_create(x + 8, y, objectDrop);

playSFX(sfxMM9Explosion);

with (instance_create(round(x / 16) * 16, round(y / 16) * 16, objCommandoMineTiler))
{
    tile_layer = other.tile_layer;
    inst_restore = other.inst_restore;
    inst_restore_n = other.inst_restore_n;
    parent = other.id;
}

alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find objects to restore
depth = 0;
for (var i = -1; i &lt; 2; i += 0.1)
{
    for (var j = 0; j &lt; 2; j += 0.1)
    {
        for (var k = 0; k &lt; obj_embed_n; k++)
        {
            with (instance_position(x + i * 16, y + j * 16, obj_embed[k]))
            {
                if (indexOf(other.inst_restore, id) == -1)
                {
                    other.inst_restore[other.inst_restore_n++] = id;
                    visible = false;
                    dead = true;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
