<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMalmet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// An enemy that slowly flies towards Mega Man, occasionally firing shots.
event_inherited();

healthpointsStart = 4;
contactDamage = 2;
blockCollision = 0;

grav = 0;
facePlayer = true;
category = "flying";

// Enemy specific variables
imgIndex = 0;
imgSpd = 0.5;
shootTimer = 120;

// @cc - Determines the time it takes for Malmet to fire a shot
shootDelay = 120;

animBack = false;
targX = -1;
targY = -1;
accel = 0.01;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Set target
    targX = -1;
    if (instance_exists(target))
    {
        targX = bboxGetXCenterObject(target);
        targY = bboxGetYCenterObject(target);
    }
    
    if (targX != -1)
    {
        correctDirection(point_direction(bboxGetXCenter(), bboxGetYCenter(), targX, targY), 1);
        
        if (speed == 0)
        {
            speed = 1;
        }
    }
    
    // Shoot
    shootTimer--;
    if (shootTimer &lt;= 0)
    {
        var i = instance_create(x, y, objEnemyBullet);
        i.contactDamage = 2;
        with (i)
        {
            aimAtTarget(2);
        }
        playSFX(sfxEnemyShootClassic);
        
        shootTimer = shootDelay;
    }
    
    // Animation
    if (animBack == false)
    {
        imgIndex += imgSpd;
        if (imgIndex &gt;= 3)
        {
            imgIndex = 2;
            animBack = true;
        }
    }
    else
    {
        imgIndex -= imgSpd;
        if (imgIndex &lt; 0)
        {
            imgIndex = 1;
            animBack = false;
        }
    }
}
else if (dead)
{
    healthpoints = healthpointsStart;
    imgIndex = 0;
    animBack = false;
    shootTimer = shootDelay;
    targX = -1;
    targY = -1;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    if (instance_exists(target))
    {
        direction = 225;
        if (image_xscale == 1)
        {
            direction += 60;
        }
        
        targX = bboxGetXCenterObject(target);
        targY = bboxGetYCenterObject(target);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
