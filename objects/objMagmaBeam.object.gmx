<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagmaBeam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>200000</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

faction = 4;

grav = 0;

respawn = false;

blockCollision = false;

iceTimer = false;

respawnRange = -1;
despawnRange = -1;

timer = 0;

isFrozen = 0;

parent = -1;

// An attempt at fixing the hitboxes with the Magma Beams. 
//extendTime = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (!isFrozen)
    {
        var cost = cos(degtorad(image_angle * sign(image_yscale) - 90));
        var sint = sin(degtorad(image_angle * sign(image_yscale) - 90 * sign(image_yscale)));
        
        if (instance_exists(objMegaman)) // Sparkle effect
        {
            if (instance_number(objMagmaBeamParticle) &lt; 2)
            {
                var side;
                var _x = x;
                var _y = y;
                var fpcount = 0;
                var spcount = 0;
                
                with (objMagmaBeamParticle)
                {
                    if (startYspeed == -2.5)
                    {
                        fpcount += 1;
                    }
                    else if (startYspeed == -1.75)
                    {
                        spcount += 1;
                    }
                }
                
                with (objMegaman)
                {
                    if (other.image_angle == 180 || other.image_angle == 0)
                    {
                        side = sign(x - other.x);
                    }
                    else
                    {
                        var x1 = other.x;
                        var y1 = other.y;
                        var x2 = other.x + 8 * cost;
                        var y2 = other.y - 8 * sint;
                        
                        side = sign(((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)));
                        
                        var angle = other.image_angle + 90;
                        if (angle &gt; 360)
                        {
                            angle -= 360;
                        }
                        if (angle &lt; 180)
                        {
                            side *= -1;
                        }
                    }
                    
                    if (side &gt; 0)
                    {
                        _x = bbox_left - 4;
                    }
                    else
                    {
                        _x = bbox_right + 4;
                    }
                    
                    _y = bbox_bottom - 10;
                    
                    if (collision_rectangle(bbox_left - 4, bbox_top + 8, bbox_right + 4, bbox_bottom, other, true, false))
                    {
                        with (other)
                        {
                            if (spcount == 0)
                            {
                                var i = instance_create(_x, _y, objMagmaBeamParticle);
                                i.dir = side;
                                i.yspeed = -1.75;
                                i.grav = 0.05;
                                i.image_speed = 0.2;
                            }
                            
                            if (fpcount == 0)
                            {
                                var i = instance_create(_x, _y, objMagmaBeamParticle);
                                i.dir = side;
                                i.yspeed = -2.5;
                                i.image_speed = 0.35;
                            }
                        }
                    }
                }
            }
        }
        
        timer -= 1;
        
        if (timer &lt;= 0) // fall (final)
        {
            y -= 8 * sint;
            x += 8 * cost;
            
            if ((y &gt; global.sectionBottom + 16)
                || (y &lt;= global.sectionTop - 16)
                || (x &gt; global.sectionRight + 16)
                || (x &lt; global.sectionLeft - 16))
            {
                instance_destroy();
            }
        }
        else // descend (initial)
        {
            /*extendTime = !extendTime;
            if (extendTime)
            {
                image_yscale += sign(image_yscale);*/
            image_yscale += 0.5 * sign(image_yscale);
            //}
            
            // collision_line(x - sint * 15 * i, y + cost * 15 * i, x - sint * 15 * i + abs(image_yscale) * 16 * cost, y + cost * 15 * i - sint * 16 * abs(image_yscale), objMegaman, false, fal
        }
        
        image_index = (timer div 6) mod 3;
        image_index += 6;
        image_index = image_index mod 3;
        
        isSolid = 0;
        
        var iceW = instance_place(x, y, objIceWall);
        if (instance_exists(iceW) &amp;&amp; !isFrozen)
        {
            isFrozen = 240;
            isSolid = 1;
            if (instance_exists(iceW)) {
            with (iceW)
            {
                event_user(EV_DEATH);
            }
            }
        }
    }
    else
    {
        isFrozen--;
        
        if (instance_exists(parent))
        {
            with (parent)
            {
                timer--;
            }
        }
    }
}

contactDamage = 28 * !isSolid;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!isFrozen)
{
    other.guardCancel = 2;
    
    if (other.object_index == objIceWall || other.object_index == objConcreteShot
        || other.object_index == objIceSlasher || other.object_index == objChillSpike || other.object_index == objChillSpikeLanded)
    {
        isFrozen = 240;
        isSolid = 1;
        stopSFX(sfxMagmaBeam);
        with (other)
        {
            event_user(EV_DEATH);
        }
    }
}
else
{
    if (other.object_index != objLaserTrident)
    {
        other.guardCancel = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = 1;

for (var i = min(1.5, abs(image_yscale / 3)); i &lt; abs(image_yscale); i += 3)
{
    playSFX(getGenericSFX(SFX_EXPLOSIONMM9Alt));
    with (instance_create(x, y, objBigExplosion))
    {
        direction = other.image_angle - 90;
        rotationMovement(x, y, i * 16, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var df = 0;
if (isFrozen)
{
    if (isFrozen &gt; 64 || isFrozen mod 8 &lt; 4)
    {
        df = 1;
    }
}

var cost = cos(degtorad(image_angle * sign(image_yscale) - 90));
var sint = sin(degtorad(image_angle * sign(image_yscale) - 90 * sign(image_yscale)));

for (var i = 0; i &lt; abs(image_yscale); i++)
{
    var disp = i * 16;
    var drawY = y - disp * sint;
    var drawX = x + disp * cost;
    var smg = 1;
    if (i == 0 &amp;&amp; timer &lt;= 0)
    {
        smg = 0;
    }
    if (i == ceil(abs(image_yscale)) - 1)
    {
        smg = 2;
    }
    var subimg = smg * 3 + image_index;
    
    if (df)
    {
        d3d_set_fog(true, make_color_rgb(0, 120, 255), 0, 0);
    }
    
    draw_sprite_ext(sprite_index, subimg, drawX, drawY, sign(image_xscale), sign(image_yscale), image_angle, c_white, 1);
    
    if (df)
    {
        d3d_set_fog(false, 0, 0, 0);
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(sprite_index, subimg, drawX, drawY, sign(image_xscale), sign(image_yscale), image_angle, c_white, 1);
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
