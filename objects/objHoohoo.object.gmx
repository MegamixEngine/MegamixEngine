<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHoohoo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Like Pipi, but it drops a big rock. The rock behaves like MM4 Drill Man rocks.
event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "flying, bird";

blockCollision = 0;
grav = 0;

facePlayerOnSpawn = true;

// Enemy-specific variables
sinCounter = 0; // for wave movement
animTimer = 0;
hasRock = true;
init = 1;

//@cc - Change colour: 0 (default) = brown rock, 1 = white rock
col = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//Change colours
if (init)
{
    switch(col)
    {
        case 1:
            sprite_index = sprHoohooWhite;
            break;
        default:
            sprite_index = sprHoohoo;
            break;
    }
    init = 0;
}

if (entityCanStep())
{
    // Animation
    animTimer++;
    
    // wing flap
    if (animTimer == 10 &amp;&amp; image_index != 2)
    {
        if (image_index == 0 || image_index == 1)
        {
            image_index = !image_index;
        }
        
        if (image_index == 3 || image_index == 4)
        {
            if (image_index == 3)
            {
                image_index = 4;
            }
            else
            {
                image_index = 3;
            }
        }
        animTimer = 0;
    }
    
    // rock release anim
    if (animTimer == 22 &amp;&amp; image_index == 2)
    {
        image_index = 3;
        animTimer = 0;
    }
    
    // Wave movement
    sinCounter += .15;
    yspeed = -((sin(sinCounter) / (hasRock + 1)) * 1.7);
    
    // release Dwayne
    if (collision_rectangle(x - 40, y - 512, x + 40, y + 512, target, false, true) &amp;&amp; hasRock)
    {
        image_index = 2;
        hasRock = false;
        var ID = instance_create(x, y + 8, objHoohooRock);
        ID.image_xscale = image_xscale;
        ID.col = col;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

xspeed = 2 * image_xscale;
hasRock = true;
image_index = 0;
animTimer = 0;
sinCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if the slot is low enough, set that it'll split.
if (bboxGetYCenterObject(other.id) &gt;= bboxGetYCenter() &amp;&amp; other.object_index != objBlackHoleBomb &amp;&amp; other.object_index != objTornadoBlow &amp;&amp; other.object_index != objSlashClaw)
{
    healthpoints += 1;
    
    hasRock = false;
    image_index = 2;
    
    instance_create(x, y + 8, objExplosion);
}
else
{
    global.damage = healthpoints; // otherwise, instantly kill.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
