<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM5SpinningPlatformRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// X = ;
// Y = ;
// length = ;
// wait = ;

event_inherited();
canHit = false;

isSolid = 2; // Is it solid?
blockCollision = 0;
grav = 0;
bubbleTimer = -1;

respawn = true;

image_speed = 0.2;

X = x; // Target X - where does it go?
Y = y; // Target Y - where does it go?

length = 64;
wait = 64;

phase = 0; // What state (idle, moving, dropping) is it in
waitMemory = wait;
alarmTimer = -1; // Countdown until movement stops

init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// event_inherited();

if (!global.frozen)
{
    with (target)
    {
        if (!place_meeting(x, y, other.id))
        {
            if (place_meeting(x, y + 2, other.id))
            {
                if (ground &amp;&amp; xspeed == 0 &amp;&amp; !isShoot
                    &amp;&amp; !instance_exists(objWireAdapter))
                {
                    playerHandleSprites("Spin");
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    waitMemory = wait;
    init = 0;
}

event_inherited();

if (!global.frozen &amp;&amp; !dead) // If not frozen and dead...
{
    switch (phase) // Do stuff based on phase
    {
        case 0:
            with (objMegaman)
            {
                if (place_meeting(x, y + 1, other.id)
                    &amp;&amp; !place_meeting(x, y, other.id) &amp;&amp; ground)
                {
                    with (other)
                    {
                        /* xs = x;
                        ys = y;
                        xspeed = X / length;
                        yspeed = Y / length ;*/
                        xspeed = distance_to_point(X, y) / length;
                        if (X &lt; x)
                        {
                            xspeed = -xspeed;
                        }
                        yspeed = distance_to_point(x, Y) / length;
                        if (Y &lt; y)
                        {
                            yspeed = -yspeed;
                        }
                        alarmTimer = -1;
                        phase = 1;
                    }
                }
            }
            break;
        case 1:
            alarmTimer += 1;
            if (alarmTimer == length)
            {
                xspeed = 0;
                yspeed = 0;
                phase = 2;
            }
            break;
        case 2:
            if (x == xstart &amp;&amp; y == ystart)
            {
                wait = waitMemory;
                xspeed = 0;
                yspeed = 0;
                phase = 0;
            }
            if (wait &gt; 0)
            {
                wait -= 1;
            }
            else
            {
                yspeed += 0.3;
            }
            break;
    }
}
else if (dead)
{
    wait = waitMemory;
    alarmTimer = -1;
    phase = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
