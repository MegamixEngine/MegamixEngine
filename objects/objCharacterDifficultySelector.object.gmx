<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCharDiffSelectMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character and difficulty select, now condensed into one object.
// They're using the same gfx in MM10, so they don't really need to be separate rooms.

controlsLocked = false; // controls are locked when switching menu modes
cursorTimer = 0;

playerID = 0;
costumeID = 0;
isFrozen = 0;

/// variables

selectX[0] = 0;
selectX[1] = 0;
row = 0;

changeToggle = 0;

phase = 0; // 0 = character select, 1 = difficulty select

// selections
selection[0, 0] = CHAR_MEGAMAN;
selectionName[0, 0] = "Mega Man";
selection[0, 1] = CHAR_PROTOMAN;
selectionName[0, 1] = "Proto Man";
selection[0, 2] = CHAR_BASS;
selectionName[0, 2] = "Bass";
selectionDisplay[0] = sprCharacterSelectBG;

selection[1, 0] = DIFF_NORMAL;
selectionName[1, 0] = "Normal";
selection[1, 1] = DIFF_HARD;
selectionName[1, 1] = "Hard";
selection[1, 2] = DIFF_EASY;
selectionName[1, 2] = "Easy";
selectionDisplay[1] = sprDifficultySelectBG;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controls

if (!controlsLocked)
{
    cursorTimer ++;

    // switch selection
    var xDir = global.keyRightPressed[playerID] - global.keyLeftPressed[playerID];
    var yDir = global.keyDownPressed[playerID] - global.keyUpPressed[playerID];
    
    var selected = (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID]);
    
    // scroll
    if (xDir != 0)
    {
        playSFX(sfxMenuMove);
        
        selectX[row] += xDir;
        selectX[row] = modf(selectX[row], ternary(row, 2, array_length_2d(selection, phase)));
    }
    
    if (yDir != 0)
    {
        playSFX(sfxMenuMove);
        row = !row;
    }
    
    // quick move to exit
    if (global.keyShootPressed[0])
    {
        selectX[1] = 1;
        row = 1;
    }
    
    // select an option
    if (selected)
    {
        playSFX(sfxMM10Submenu);
        // at the top, it just takes you down.
        if (row == 0)
        {
            row ++;
            selectX[1] = 0;
        }   
        // otherwise, make your selection
        else if (row == 1)
        {
            controlsLocked = 1;
            if (selectX[row] == 0)
            {
                // characters
                if (phase == 0)
                {
                    for (var i = 0; i &lt; MAX_PLAYERS; i ++)
                        global.characterSelected[i] = selection[phase, selectX[0]];
                        
                    // costume set
                    global.costumeSelected[playerID] = selectionName[phase, selectX[0]];
                    costumeID = global.costumeID[? global.costumeSelected[0]];
                    
                    weaponSetup();
                }
                // difficulty
                else if (phase == 1)
                {
                    global.difficulty = selection[phase, selectX[0]];
                }
                
                if (phase &lt; array_length_1d(selectionDisplay) - 1)
                {
                    changeToggle = 1;
                    with (objGlobalControl)
                        forceFade = true;
                }
                else
                {
                    goToLevel(lvlShowcaseHUB, 0);
                }
            }
            else if (selectX[row] == 1)
            {
                if (phase &gt; 0)
                {
                    changeToggle = -1;
                    with (objGlobalControl)
                        forceFade = true;
                }
                else
                {
                    global.nextRoom = rmFileSelect;
                }
            }
        }
    }
}
else
{
    with (objGlobalControl)
    {
        if (fadeAlpha == 1 &amp;&amp; forceFade)
        {
            forceFade = false;
            with (other)
            {
                row = 0;
                selectX[0] = 0;
                selectX[0] = 0;
                phase += changeToggle;
                controlsLocked = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_sprite(selectionDisplay[phase], selectX[0], 0, 16);

// difficulty misc
if (phase == 1)
{
    var pri = getWeaponPrimaryColor(0, costumeID, playerID);
    var sec = getWeaponSecondaryColor(0, costumeID, playerID);
    
    var blinkTimerMax = 120;
    if (global.playerSprite[costumeID] == sprProtoman)
        blinkTimerMax = 20;
    
    var blinkImage = ((global.gameTimer mod blinkTimerMax + 8 + 1)
        &gt;= blinkTimerMax);
    
    drawCostume(global.playerSprite[costumeID], blinkImage, 0, 32, 72, 1, 1, c_white, pri, sec, c_black);

    switch (selection[phase, selectX[0]])
    {
        case DIFF_NORMAL:
            draw_sprite_ext(sprMetall, 2, 208, 88, -1, 1, 0, c_white, 1);
            break;
        case DIFF_HARD:
            draw_sprite_ext(sprMetall, 2, 144, 88, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprReturningMachinegunJoe, 0, 208, 88, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprReturningMachinegunJoe, 0, 240, 72, -1, 1, 0, c_white, 1);
            break;
        case DIFF_EASY:
            for (var i = 64; i &lt;= 160; i+= 32)
            {
                draw_sprite(sprEasyPlatform32, (global.gameTimer % 20 &lt; 10), i, 88);
                if (i == 96)
                    i += 32;
            }
            break;
    }
}

var cursorX = 26;
var cursorY = 149;
var cursorWidth = 204;
var cursorHeight = 10;

if (row == 1) // bottom selection
{
    cursorX = 106 + (80 * selectX[1]);
    cursorY = 181;
    cursorWidth = 44;
    cursorHeight = 2;
}

var coff = floor((cursorTimer / 7) mod 4);
coff -= 2 * (coff = 3); //3 turns to 1

draw_sprite(sprSaveMenuCursor, 0, cursorX - coff, cursorY + coff);
draw_sprite_ext(sprSaveMenuCursor, 0, cursorX + cursorWidth + coff, cursorY + coff, -1, 1, 0, c_white, 1);
draw_sprite_ext(sprSaveMenuCursor, 0, cursorX - coff, cursorY - cursorHeight - coff, 1, -1, 0, c_white, 1); // 24 136
draw_sprite_ext(sprSaveMenuCursor, 0, cursorX + cursorWidth + coff, cursorY - cursorHeight - coff, -1, -1, 0, c_white, 1);

draw_set_halign(fa_center);
draw_set_valign(fa_center);

// selections
var draw_string = string_upper(selectionName[phase, selectX[0]]);
draw_text(middleXview(), 144, draw_string);

var arrow_dist = 58;
if (string_length(draw_string) &gt; 13)
    arrow_dist += (8 * (string_length(draw_string) - 13));

if (global.gameTimer % 30 &lt; 15)
{
    for (var i = -1; i &lt;= 1; i += 2)
        draw_sprite_ext(sprOptionsCursor, 0, middleXview() + arrow_dist * i, 140, i, 1, 0, c_white, 1);
}

// bottom tip
str = "CHANGE SETTINGS";
if (row == 1)
    str = "EXIT SETTINGS";
    
var prompt_dist = string_width(str) / 2 + 16;
    
draw_text(middleXview(), 204, str);
for (var i = -1; i &lt;= 1; i += 2)
{
    drawButtonPrompt(ternary((i &gt; 0), "right", "left"), middleXview() + prompt_dist * i - 4, 200);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
