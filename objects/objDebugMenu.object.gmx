<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this boy is about to pop up and be a menu
queuePause();

// playSFX(sfxDebugMenu); 2 cr3epy 4 me
global.levelRunValid = false;
global.levelRunInvalidReason = "debug menu";

playerID = 0;

// controls
pauseLock = lockPoolLock(global.playerLock[PL_LOCK_PAUSE]);
option = 0;
quickScrollTimer = 25;
endy = 10;
mode = 0; // 0: normal. 1: record input menu

optionText = "ROOM SELECT#
AMMO REFILL#
INVINCIBILITY#
INFINITE HEALTH#
SWAP GRAVITY#
COSTUME CHANGE#
RECORD INPUT#
VISIBLE COLLISION#
PRESS 2#
KILL ONSCREEN ENTITIES";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lockPoolRelease(pauseLock);
queueUnpause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _endy = endy;
if (mode == 1)
{
    _endy = 3;
}

// change option up or down
if (global.keyUpPressed[playerID] || (global.keyUp[playerID] &amp;&amp; quickScrollTimer &lt;= 0))
{
    option -= 1;
    if (option &lt; 0)
    {
        option = _endy - 1;
    }
    
    playSFX(sfxMenuMove);
}

if (global.keyDownPressed[playerID] || (global.keyDown[playerID] &amp;&amp; quickScrollTimer &lt;= 0))
{
    option += 1;
    if (option &gt;= _endy)
    {
        option = 0;
    }
    
    playSFX(sfxMenuMove);
}

// do quick scroll timer
if ((global.keyUp[playerID] ^^ global.keyDown[playerID]) // only do quick scroll when pressing one direction
&amp;&amp; !(option &lt;= 0 &amp;&amp; global.keyUp[playerID]) &amp;&amp; !(option &gt;= _endy - 1 &amp;&amp; global.keyDown[0])) // don't loop with quick scroll
{
    if (quickScrollTimer &lt;= 0) // slight pause between scrolls
    {
        quickScrollTimer = 8; // &lt;-- time until quick scroll here
    }
    
    quickScrollTimer--;
}
else
{
    quickScrollTimer = 25; // &lt;-- time until quick scroll here
}

// Functions for each option
if (mode == 0)
{
    if (global.keyPausePressed[playerID] || global.keyLeftPressed[playerID] || global.keyRightPressed[playerID])
    {
        switch (option)
        {
            // Room Select
            case 0:
                if (global.keyPausePressed[playerID])
                {
                    playSFX(sfxMenuSelect);
                    global.roomReturn = rmRoomSelect;
                    global.roomReturnIsHub = false;
                    returnFromLevel();
                }
                instance_destroy();
                break;
            
            // Ammo Refill
            case 1:
                if (global.keyPausePressed[playerID])
                {
                    playSFX(sfxYasichi);
                    for (var i = 0; i &lt;= global.totalWeapons; i += 1)
                    {
                        for (var j = 0; j &lt; global.playerCount; j++)
                        {
                            global.ammo[j, i] = 28;
                        }
                    }
                }
                break;
            
            // Invincibility
            case 2:
                if (instance_exists(objMegaman))
                {
                    if (objMegaman.canHit == true)
                    {
                        playSFX(sfxImportantItem);
                        objMegaman.canHit = false;
                    }
                    else
                    {
                        playSFX(sfxHit);
                        objMegaman.canHit = true;
                    }
                }
                else
                {
                    playSFX(sfxError);
                }
                break;
            
            // Infinite Health
            case 3:
                global.alwaysHealth = !global.alwaysHealth;
                if (!global.alwaysHealth)
                {
                    playSFX(sfxHit);
                }
                else
                {
                    playSFX(sfxEnergyRestore);
                }
                break;
            
            // Swap Gravity
            case 4:
                if (instance_exists(objMegaman))
                {
                    with (objMegaman)
                    {
                        gravDir *= -1;
                        yspeed = yspeed / 2;
                        image_yscale = gravDir;
                        y += sprite_get_yoffset(mask_index) * -gravDir;
                        playSFX(sfxGravityFlip);
                    }
                }
                else
                {
                    playSFX(sfxError);
                }
                break;
            
            // Costumes
            case 5:
                if (global.keyLeftPressed[playerID] &amp;&amp; !global.keyRightPressed[playerID])
                {
                    // Costumes
                    playSFX(sfxUnlocked);
                    with (objMegaman)
                    {
                        costumeID--;
                        if (costumeID &lt; 0)
                        {
                            costumeID = global.playerSpriteMax - 1;
                        }
                        playerPalette();
                    }
                }
                else if (global.keyRightPressed[playerID] &amp;&amp; !global.keyLeftPressed[playerID])
                {
                    playSFX(sfxUnlocked);
                    with (objMegaman)
                    {
                        costumeID++;
                        if (costumeID &gt;= global.playerSpriteMax)
                        {
                            costumeID = 0;
                        }
                        playerPalette();
                    }
                }
                break;
            
            // record input
            case 6:
                switch (global.recordInputMode)
                {
                    case 0:
                        if (instance_exists(objMegaman))
                        {
                            mode = 1;
                            playSFX(sfxMenuSelect);
                            option = 0;
                            exit;
                        }
                        break;
                    case 1:
                        global.recordInputEnd = true;
                        break;
                    default:
                        playSFX(sfxError);
                }
                break;
            
            // visible solids
            case 7:
                with (objSolid)
                    visible ^= true;
                with (objLadder)
                    visible ^= true;
                with (objTopSolid)
                    visible ^= true;
                with (objBossDoor)
                    visible ^= true;
                with (objFallingTower)
                    visible ^= true;
                break;
            
            // PRESS 2
            case 8:
                for (var i = 0; i &lt;= global.playerCount; i += 1)
                {
                    global.playerHealth[i] = 0;
                }
                instance_destroy();
                break;
            
            // instakill entities
            case 9:
                playSFX(sfxExplosion2);
                with (prtEntity)
                {
                    if (canHit &amp;&amp; object_index != objMegaman)
                    {
                        healthpoints = 0;
                        event_user(EV_DEATH);
                    }
                }
                break;
        }
    }
}
else if (mode == 1)
{
    // recording menu
    if (global.keyPausePressed[playerID])
    {
        switch (option)
        {
            case 0:
            case 1:
                var filename = get_save_filename("Mega Man Recording|*.mrc", "");
                if (filename != "")
                {
                    if (option == 0)
                    {
                        recordInputToFile(filename);
                    }
                    else if (option == 1)
                    {
                        objGlobalControl.fadetimer = -5;
                        objGlobalControl.fadetimer -= 1; // I'm not sure why but recording requires an extra frame to sync up.
                        objGlobalControl.fadeAlpha = 1;
                        recordInputToFile(filename, global.checkpoint);
                    }
                    instance_destroy();
                    exit;
                }
                playSFX(sfxError);
                break;
            case 2:
                option = 6;
                mode = 0;
                playSFX(sfxMenuSelect);
                exit;
        }
    }
}

// close the debug menu
if (keyboard_check_pressed(ord('2')))
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_top);
draw_sprite_ext(sprDot, 0, view_xview, view_yview, view_wview, view_hview, 0, c_gray, 0.5);

// text time
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text(view_xview[0] + 128, view_yview[0] + 4, "DEBUG MENU");
draw_set_halign(fa_left);
if (mode == 0)
    draw_text(view_xview[0] + 20, view_yview[0] + 24, optionText);
else
    draw_text(view_xview[0] + 20, view_yview[0] + 24, "RECORD-HERE [UNSTABLE!]##RECORD-RESET [SAFE]##BACK####'RECORD HERE' MUST ONLY#BE USED IN A SCREEN#WITHOUT GIMMICKS OR ENEMIES");
draw_sprite(sprOptionsCursor, 0, view_xview[0] + 8, view_yview[0] + 24 + (option * 16));

// specific text for options
draw_set_halign(fa_right);
if (mode == 0)
    for (var i = 24; i &lt;= endy * 16; i += 16)
    {
        switch ((i - 24) / 16)
        {
            // invincibility
            case 2:
                if (objMegaman.canHit)
                {
                    draw_text(view_xview[0] + 256 - 8, view_yview[0] + i, "OFF");
                }
                else
                {
                    draw_text(view_xview[0] + 256 - 8, view_yview[0] + i, "ON");
                }
                break;
            // infinite health
            case 3:
                if (global.alwaysHealth)
                {
                    draw_text(view_xview[0] + 256 - 8, view_yview[0] + i, "ON");
                }
                else
                {
                    draw_text(view_xview[0] + 256 - 8, view_yview[0] + i, "OFF");
                }
                break;
            // grav dir
            case 4:
                draw_text(view_xview[0] + 256 - 8, view_yview[0] + i, string(objMegaman.gravDir));
                break;
            // costumes
            case 5:
                draw_text(view_xview[0] + 256 - 8, view_yview[0] + i, string(objMegaman.costumeID));
                break;
        }
    }
draw_set_halign(fa_left);

draw_text(view_xview[0] + 256 - 8, view_yview[0] + 224 - 8, string(global.aliveBosses));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
