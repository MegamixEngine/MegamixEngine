<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSolarSunSmall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
grav = 0;
blockCollision = 0;
respawn = false;
stopOnFlash = false;

sunLevel = objSolarMan.sunLevel;
curSunLevel = 0;

switch (sunLevel)
{
    case 0:
        contactDamage = 4;
        break;
    case 1:
        contactDamage = 5;
        break;
    case 2:
        contactDamage = 6;
        break;
}

sunY = 0;
stopOnFlash = false;
weakSun = false; // Is the sun weakened?

image_speed = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(objSolarMan))
{
    if (entityCanStep())
    {
        //image_xscale = objSolarMan.image_xscale;
        
        switch (curSunLevel)
        {
            case 0:
                sprite_index = sprSolarSunSmall;
                y = objSolarMan.y - 15; //13;
                break;
            case 1:
                if ((sprite_index == sprSolarSunSmall) || (sprite_index == sprSolarSunLarge))
                {
                    sprite_index = sprSolarSunMedium;
                    y = objSolarMan.y - 15; //16;
                    
                    // Stop SFX in progress
                    if (audio_is_playing(sfxSolarManSun))
                    {
                        audio_stop_sound(sfxSolarManSun);
                    }
                    
                    // Replay SFX
                    playSFX(sfxSolarManSun);
                }
                break;
            case 2:
                if (sprite_index == sprSolarSunSmall)
                {
                    sprite_index = sprSolarSunMedium;
                    
                    // Stop SFX in progress
                    if (audio_is_playing(sfxSolarManSun))
                    {
                        audio_stop_sound(sfxSolarManSun);
                    }
                    
                    // Replay SFX
                    playSFX(sfxSolarManSun);
                }
                else if (sprite_index == sprSolarSunMedium)
                {
                    sprite_index = sprSolarSunLarge;
                    y = objSolarMan.y - 21; //19;
                    
                    // Stop SFX in progress
                    if (audio_is_playing(sfxSolarManSun))
                    {
                        audio_stop_sound(sfxSolarManSun);
                    }
                    
                    // Replay SFX
                    playSFX(sfxSolarManSun);
                }
                break;
        }
        
        // Position self so that it matches Solar Man's position
        if (!objSolarMan.isIntro)
        {
            // Set depth of object
            if ((objSolarMan.image_index == 5) || (objSolarMan.image_index == 8))
            {
                depth = 0;
            }
            else
            {
                depth = -2;
            }
            
            // If standing idle...
            if (objSolarMan.image_index == 0) //|| (objSolarMan.image_index == 4))
            {
                // x = objSolarMan.x + 2 * image_xscale;
                x = objSolarMan.x + 1 * objSolarMan.image_xscale;
                switch (curSunLevel)
                {
                    case 0:
                        y = objSolarMan.y - 13;
                        break;
                    case 1:
                        y = objSolarMan.y - 15; //16;
                        break;
                    case 2:
                        y = objSolarMan.y - 20; //19;
                        break;
                }
            } // If about to/landing from a jump...
            if (objSolarMan.image_index == 4)
            {
                x = objSolarMan.x + 1 * objSolarMan.image_xscale;
                switch (curSunLevel)
                {
                    case 0:
                        y = objSolarMan.y - 12;
                        break;
                    case 1:
                        y = objSolarMan.y - 14;
                        break;
                    case 2:
                        y = objSolarMan.y - 19;
                        break;
                }
            } // If Solar Man is jumping or charging...
            else if ((objSolarMan.image_index == 5) || (objSolarMan.image_index == 8))
            {
                x = objSolarMan.x;
                switch (curSunLevel)
                {
                    case 0:
                        y = objSolarMan.y - 18; //15;
                        break;
                    case 1:
                        y = objSolarMan.y - 20; //18;
                        break;
                    case 2:
                        y = objSolarMan.y - 25; //21;
                        break;
                }
            } // If Solar Man is throwing Solar Blazes...
            else if (objSolarMan.image_index == 6)
            {
                x = objSolarMan.x;
                switch (curSunLevel)
                {
                    case 0:
                        y = objSolarMan.y - 17;
                        break;
                    case 1:
                        y = objSolarMan.y - 19;
                        break;
                    case 2:
                        y = objSolarMan.y - 24;
                        break;
                }
            } // If Solar Man is leaning over...
            else if (objSolarMan.phase == 2)
            {
                with (objSolarMan)
                {
                    if (attackTimer == 20)
                    {
                        other.x = x + 14 * image_xscale; //x + 12
                        other.y = y - 9; //1;
                    }
                    else if ((attackTimer &gt; 24) &amp;&amp; (attackTimer &lt; 100))
                    {
                        switch (other.curSunLevel)
                        {
                            case 0:
                                other.x = x + 19 * image_xscale; //21
                                break;
                            case 1:
                                other.x = x + 21 * image_xscale; //24
                                break;
                            case 2:
                                other.x = x + 26 * image_xscale; //27
                                break;
                        }
                        other.y = y + 5; //4;
                    }
                }
            } // May be unnecessary? Keep just in case.
            else
            {
                x = objSolarMan.x + 1 * image_xscale;
                switch (curSunLevel)
                {
                    case 0:
                        y = objSolarMan.y - 13;
                        break;
                    case 1:
                        y = objSolarMan.y - 15; //16;
                        break;
                    case 2:
                        y = objSolarMan.y - 20; //19;
                        break;
                }
            }
        }
    }
} // Destroy if Solar Man is dead or doesn't exist
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index != objTornadoBlow)
{
    iFrames = 0;
    if (other.object_index != objWaterShield) &amp;&amp; (other.object_index != objRainFlush)
        &amp;&amp; (other.object_index != objWaterWave) 
    {
        curSunLevel++;
        if (curSunLevel &gt;= sunLevel)
            weakSun = false;
        
        if (curSunLevel &gt; 2)
        {
            curSunLevel = 2;
        }
    }
    else
    {
        if (objSolarMan.phase != 3)
        {
            curSunLevel--;
            weakSun = true;
            
            if (curSunLevel &lt; 0)
            {
                curSunLevel = 0;
            }
            
            if (other.object_index == objWaterShield)
            {
                with (objWaterShield)
                {
                    instance_create(x, y, objBubblePopEffect);
                }
            }
        }
    }
    
    with (other)
    {
        guardCancel = 2;
        if (other.object_index != objRainFlush)
        {
            event_user(EV_DEATH);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
