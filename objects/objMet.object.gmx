<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Another one of the early Mets. When Megaman approaches it, it will shoot its bullets,
// then charge at the player, before stopping and repeating the process again.

event_inherited();


healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "mets";

// Enemy specific code
radius = 4 * 16; // Four blocks; the radius that MM needs to enter to trigger the shooting of the met
cooldownTimer = 0;
canShoot = true;

animTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        // Face player
        if (xspeed == 0 &amp;&amp; ground)
        {
            calibrateDirection();
        }
        
        // check if the player is near
        if (distance_to_object(target) &lt;= radius)
        {
            // only start animations if canShoot == true
            if (canShoot)
            {
                canShoot = false;
                image_index = 1;
                animTimer = 8;
            }
        }
    }
    
    // If it's been approached, start going through the animations
    if (!canShoot)
    {
        // Animation timers, etc
        if (animTimer == 0 &amp;&amp; cooldownTimer &lt;= 120)
        {
            animTimer = 6;
            if (image_index == 2)
            {
                image_index = 3;
            }
            else if (image_index == 1 || image_index == 3)
            {
                image_index = 2;
            }
            else
            {
                image_index = 0;
            }
        }
        else
        {
            animTimer -= 1;
        }
        
        cooldownTimer += 1;
        
        // Action timers
        switch (cooldownTimer)
        {
            case 8: // Shoot
            // bullet shooting! 
                var ID;
                for (var i = -1; i &lt;= 1; i += 1)
                {
                    ID = instance_create(x + image_xscale * 8, spriteGetYCenter()+2, objMM2MetBullet);
                    ID.dir = 45 * i;
                    ID.image_xscale = image_xscale;
                    ID.sprite_index = sprFlashShot;
                }
                playSFX(sfxEnemyShootClassic);
                break;
            case 60: // run towards player 
                xspeed = 2 * image_xscale;
                break;
            case 100: // reset xspeed and imagespeed 
                image_index = 0;
                xspeed = 0;
                animTimer = 8;
                break;
            case 180: // resetting canShoot is later to allow a cooldown 
                canShoot = true;
                cooldownTimer = 0;
                break;
        }
    }
}
else if (dead)
{
    cooldownTimer = 0;
    canShoot = true;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_index == 0)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
