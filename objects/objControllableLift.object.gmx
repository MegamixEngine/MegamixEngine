<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprControllableElevator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// An elevator from MM7 Wily 4. If you're fully standing on it, you can press Up or Down to move it around.
event_inherited();

contactDamage = 0;
canHit = false;
isSolid = 1;
blockCollision = 0;
grav = 0;
bubbleTimer = -1;

shiftVisible = 1;

despawnRange = -1;
respawnRange = -1;

initEmergencyTimer = 5;

image_speed = 0;

// Enemy-specific variables
active = false;
dir = 0;
spd = 2;
deltaY = 0;
child = noone;

lockPool = -1;

// @cc the amount of blocks the elevator will go down every input
range = 64;

// @cc the coordinates of the upper boundary of the elevator's range (default starting position)
yMin = ystart;

// @cc the coordinates of the lower boundary of the elevator's range (default ystart plus 4 times its range ala MM7, this is set in the step event unless changed via creation code)
yMax = -1;

// @cc if false, this object's positon will not get reset upon leaving the screen
resetMe = true;
deadCheck = false;

// @cc move another controllable lift with this one
pairID = noone;

// @cc snap to player position when spawning
snapSpawn = false;
snapSpawnOffset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (snapSpawn &amp;&amp; initEmergencyTimer &gt; 0 &amp;&amp; insideSection(x, y))
{
    var myTarget = target;
    if (!instance_exists(target))
        myTarget = instance_find(objMegaman, 0);
    
    if (instance_exists(myTarget))
        y = clamp(myTarget.y + snapSpawnOffset, yMin, yMax);
    initEmergencyTimer --;
    event_user(15);
}

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (child == noone)
    {
        child = instance_create(x, y, objControllableLiftOverlay);
        child.parent = id;
    }
    deadCheck = true;
    
    if (yMax == -1)
    {
        yMax = ystart + (range * 4);
    }
    if (!active)
    {
        var strSpd = spd;
        with (objMegaman)
        {
            if (!playerIsLocked(PL_LOCK_MOVE) &amp;&amp; ground)
            {
                if (place_meeting(x, y + gravDir, other.id)
                    &amp;&amp; !place_meeting(x, y, other.id))
                {
                    if (global.keyUp[playerID] || global.keyDown[playerID])
                    {
                        
                        with (other)
                        {
                            dir = (global.keyDown[other.playerID] - global.keyUp[other.playerID]);
                            
                            // if its already at its max for that position...Dont
                            // OR! don't... if megaman isnt fully on the elevator
                            if ((dir == -1 &amp;&amp; y &lt;= yMin) || (dir == 1 &amp;&amp; y &gt;= yMax)
                                || (other.bbox_left - 2 &lt; x) || (other.bbox_right + 9 &gt; x + sprite_width))  || (dir == 0)
                            {
                                exit;
                            }
                            coopWarp(other.playerID,false,ceil(48/strSpd),true,false);
                            other.xspeed = 0;
                            active = true;
                            
                            if (pairID != noone)
                            {
                                with (pairID)
                                {
                                    dir = other.dir;
                                    active = true;
                                }
                            }
                            
                            dispelUtilities();
                            
                            // lock player movement
                            lockPool = lockPoolLock(
                                other.localPlayerLock[PL_LOCK_MOVE],
                                other.localPlayerLock[PL_LOCK_TURN],
                                other.localPlayerLock[PL_LOCK_SLIDE],
                                other.localPlayerLock[PL_LOCK_SHOOT],
                                other.localPlayerLock[PL_LOCK_JUMP],
                                other.localPlayerLock[PL_LOCK_CHARGE],
                                other.localPlayerLock[PL_LOCK_CLIMB],
                                other.localPlayerLock[PL_LOCK_GROUND]);
                        }
                    }
                }
            }
        }
    }
    else
    {
        yspeed = spd * dir;
        deltaY += spd;
        child.y = y;
        
        // stopping AI
        if ((dir == -1 &amp;&amp; y + yspeed &lt; yMin) || (dir == 1 &amp;&amp; y + yspeed &gt; yMax)
            || (deltaY &gt;= range + spd))
        {
            // hitting max behavior only
            if ((dir == -1 &amp;&amp; y + yspeed &lt; yMin) || (dir == 1 &amp;&amp; y + yspeed &gt; yMax))
            {
                // back in bounds
                if (dir == -1)
                {
                    y = yMin;
                }
                else
                {
                    y = yMax;
                }
            }
            with (objCoOpWarpStar)
            {
                y += other.yspeed;
                event_user(EV_DEATH);
                
            }
            // stop
            yspeed = 0;
            lockPool = lockPoolRelease(lockPool);
            lockPool = -1;
            
            
            // reset
            if (!resetMe)
            {
                ystart = y;
            }
            dir = 0;
            active = false;
            deltaY = 0;
        }
    }
}
else if (dead)
{
    with (child)
    {
        instance_destroy();
    }
    if (deadCheck)
    {
        with (objCoOpWarpStar)
        {
            y += other.yspeed;
            event_user(EV_DEATH);
            
        }
        deadCheck = false;
    }
    child = noone;
    active = false;
    dir = 0;
    lockPool = -1;
    deltaY = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned &amp;&amp; snapSpawn)
{
    setTargetStep();
    if (instance_exists(target))
    {
        y = clamp(target.y + snapSpawnOffset, yMin, yMax);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
