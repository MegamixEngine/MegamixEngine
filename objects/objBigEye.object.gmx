<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigEyeRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The classic 'before the boss gates' beefy enemy. It jumps towards you on an interval, and randomly
// decides its jump height randomly. It telegraphs which - if it closes its eye, it'll jump high,
// otherwise it'll jump low. It's pretty beefy and does lots of damage, so use them sparingly.

event_inherited();

healthpointsStart = 20;
healthpoints = healthpointsStart;
contactDamage = 10;

category = "big eye, bulky";

// Enemy specific code

//@cc // 0 = red; 1 = blue; 2 = red with orange eyes
col = 0;
init = 1;

timer = 0;
repeatAmount = 0; // variables to make sure big eye doesn't repeat his action too much
repeatIsHigh = true;
xs = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set color on spawn
if (init)
{
    init = 0;
    switch (col)
    {
        case 0:
            sprite_index = sprBigEyeRed;
            break;
        case 1:
            sprite_index = sprBigEyeBlue;
            break;
        case 2:
            sprite_index = sprBigEyeOrange;
            break;
    }
}

if (xs != 0)
{
    xspeed = xs;
}

event_inherited();

if (entityCanStep())
{
    if (ycoll &gt; 0) // play landing sound if colliding with the floor
    {
        playSFX(sfxHeavyLand);
    }
    
    // if it's on the ground, start its jump timer
    if (ground)
    {
        timer += 1;
        if (timer == 1)
        {
            xs = 0;
            var highJump;
            if (repeatAmount &lt; 2)
            {
                // randomize();
                highJump = choose(true, false); // False means a low jump, true means a high jump
            }
            else
            {
                highJump = !repeatIsHigh;
            }
            
            image_index = 4; // animation for hitting the ground
            
            // To not make the Big eye spam one jump height by pure randomness
            // Because if he spams low jumps, it's nearly impossible to pass him
            if (highJump &amp;&amp; repeatIsHigh)
            {
                repeatAmount += 1;
            }
            else if (!highJump &amp;&amp; !repeatIsHigh)
            {
                repeatAmount += 1;
            }
            else
            {
                repeatAmount = 1;
                repeatIsHigh = highJump;
            }
            
            calibrateDirection(); // face player
            
            xspeed = 0;
        } // animation stuff
        else if (timer == 4)
        {
            image_index = 0;
        }
        else if (timer == 6)
        {
            image_index = highJump;
        }
        else if (timer == 40)
        {
            yspeed = -3 * (1 + highJump);
            image_index = 2 + highJump;
            ground = 0;
            xs = image_xscale * 1;
            timer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();

timer = 0;
image_index = 2;
repeatAmount = 0;
repeatIsHigh = true;
xs = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
