<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMizzile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):

event_inherited();

respawn = true;

healthpointsStart = 10;//36
healthpoints = healthpointsStart;
contactDamage = 1;
category = "flying";

blockCollision = 0;
grav = 0;

// Enemy specific code
xspeed = 0;
yspeed = 0;
ys = 0;

phase = 0;
phasetimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (bbox_top &lt; global.sectionTop)
    {
        instance_deactivate_object(id);
    }
    
    switch (phase)
    {
        case 0: // Look for mega 
            if (instance_exists(objMegaman))
            {
                if (abs(instance_nearest(x, y, objMegaman).x - x) &lt; 48)
                {
                    yspeed = -6 * image_yscale;
                    ys = y;
                    phase = 1;
                }
            }
            break;
        case 1: // Stop when reaching point 
            if (y &lt; view_yview + 96)
            {
                y = view_yview + 96;
                yspeed = 0;
                phase = 2;
            }
            break;
        case 2: // wait 
            phasetimer += 1;
            if (phasetimer == 48)
            {
                yspeed = 1.25 * image_yscale;
                phase = 3;
                image_speed = 0.2;
            }
            break;
        case 3: // Descend 
            if (y &gt; ys)
            {
                y = ys;
                yspeed = 0;
                phasetimer = 0;
                phase = 0;
                image_speed = 0;
                image_index = 0;
                healthpoints = healthpointsStart;
            }
            break;
    }
}
else if (dead)
{
    image_index = 0;
    image_speed = 0;
    phase = 0;
    phasetimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
