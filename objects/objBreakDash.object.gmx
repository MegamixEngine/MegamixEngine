<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskMegaman</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>mskMegaman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 2;

penetrate = 3; // obviously we don't want to destroy the control for the dash
pierces = 2;
attackDelay = 8;
killOverride = true;

drawMe = false;
visible = 0;

shiftVisible = 3;
despawnRange = -1;
inWater = -1;

// Break Dash-specific
flashTimer = 0;
flashOffset = 0;

animTimer = 0;
animFrame = 0;

dashTimer = 35;
dashSpeed = 2.5;

breakDashLock = false;

airDash = false; // for pit
playedSound = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (instance_exists(parent))
{
    with(parent)
    {
        lockPoolRelease(other.breakDashLock);
        hitTimer = 0;
        iFrames = 50;
        canHit = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!playedSound)
{
    playedSound = true;
    playSFX(sfxBreakDash);
}

// check for parent
if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}
else
{
    image_xscale = parent.image_xscale * 1.2;
    
    x = parent.x; // stay attached to MM
    y = parent.y;
}

if (!global.frozen)
{
    // iFrames fist/dash
    flashTimer += 1;
    if (flashTimer == 3)
    {
        flashOffset = !flashOffset;
        flashTimer = 0;
    }
    
    // real anim
    animTimer += 1;
    if (animTimer == 4)
    {
        animFrame += 2;
        if (animFrame &gt;= 6)
        {
            animFrame = 0;
        }
        animTimer = 0;
    }

    with (parent) // Mega Man anim + movement forcing
    {
        if (!other.breakDashLock &amp;&amp; (ground || other.airDash))
        {
            if (!other.airDash)
            {
                xspeed = 0;
                yspeed = 0;
                
                other.breakDashLock = lockPoolLock(
                    localPlayerLock[PL_LOCK_MOVE],
                    localPlayerLock[PL_LOCK_SHOOT],
                    localPlayerLock[PL_LOCK_SLIDE],
                    localPlayerLock[PL_LOCK_TURN]);
            }
            else
            {
                other.breakDashLock = lockPoolLock(
                    localPlayerLock[PL_LOCK_MOVE],
                    localPlayerLock[PL_LOCK_SHOOT],
                    localPlayerLock[PL_LOCK_SLIDE],
                    localPlayerLock[PL_LOCK_TURN]//,
                    //localPlayerLock[PL_LOCK_JUMP],
                    /*localPlayerLock[PL_LOCK_CLIMB]*/);
            }
        }
        
        var keepGoing = true;
        if (!ground &amp;&amp; !other.airDash) // No air break dashes, sorry :c
        {
            other.dashTimer = 0;
        }
        else
        {
            playerHandleSprites("Break");
            xspeed = other.dashSpeed * other.image_xscale; // movement force
            iFrames = -1;
            
            if (other.airDash)
            {
                if (!ground)
                {
                    if (inWater)
                    {
                        yspeed = 0;
                    }
                    else
                    {
                        yspeed = -grav;
                    }
                }
            }
        }
    }
    if (isLocked(global.playerLock[PL_LOCK_MOVE]) &amp;&amp;
    isLocked(global.playerLock[PL_LOCK_TURN]))
    {
        dashTimer = 0;
        with (parent)
            xspeed = 0;
    }
    
    dashTimer --;
    if (dashTimer &lt;= 0)
    {
        xspeed = 0;
        instance_destroy();
    }
}
else if (global.switchingSections)
{
    with (parent)
    {
        playerHandleSprites("Break");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ammoCost = 3 - (1 * (global.energySaver &gt; 0));

if (ammoCanAfford(playerID))
{
    // Set charge time for this weapon
    chargeTime = 40; 
    initChargeTime = 20;
}

if (performShoot) //Shoot
{
    var canAirDash = false;
    
    if (!releaseCharge || !ammoCanAfford(playerID) || ((!ground &amp;&amp; !canAirDash &amp;&amp; (global.autoFire || (checkCheats(cheatEnums.instantCharge)))))) //Not charged
    {
        var i = fireWeapon(16, 0+(1*(global.characterSelected[playerID] == CHAR_PROTOMAN)), objNormalBusterShot, 3 + (12 * (global.shotUpgrade &gt; 0)), 0, 1, 0);
        if (i)
        {
            i.xspeed = (image_xscale * 5);
        }
        
    }
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    
    //Release charge shot
    else
    {
        if (!canAirDash)
        {
            if (!ground || playerIsLocked(PL_LOCK_SLIDE))
            {
                isCharge = 0;
            }
        }
            
        if (isCharge == 2)
        {
            var i = fireWeapon(0, 0, objBreakDash, 999, ammoCost, 0, 0);
                
            if (i)
            {
                i.image_xscale = image_xscale;
                i.y = y;
                var myDepth = depth
                var mX = sign(image_xscale);
                if (xDir == 0 &amp;&amp; min(0,yDir) == 0)
                {
                    xDir = image_xscale;
                }
            }
            applyRumble(playerID,0,.75,.05,60);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue("grounded", 3);
specialDamageValue(objSpine, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("BREAK DASH", make_color_rgb(107, 74, 255), make_color_rgb(222, 189, 255), sprWeaponIconsBreakDash);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.damage != 0 &amp;&amp; instance_exists(parent))
{
    var xs = dashSpeed * parent.image_xscale * 1.5;
    
    with (other)
    {
        if (healthpoints - global.damage &lt;= 0)
        {
            par = object_get_parent(object_index);
            if (par == prtMiniBoss || par == prtBoss || par == prtPickup || !killOverride)
            {
                exit;
            }
            
            var _i;
            _i = instance_create(x, y, objSlashEffect);
            if (object_index == objMM2Mech)
            {
                _i.sprite_index = sprMM2SniperJoeMechEmpty;
            }
            else
            {
                _i.sprite_index = sprite_index;
            }
            _i.image_index = image_index;
            _i.image_xscale = image_xscale;
            _i.image_yscale = image_yscale;
            _i.half = 'whole';
            _i.grav = 0.125;
            _i.xspeed = xs;
            _i.yspeed = -2;
            if (object_index == objShadowClone) // yay woohoo clone hell
            {
                _i.spriteX = spriteX;
                _i.spriteY = spriteY;
                _i.targetCID = targetCID;
            }
            if (object_index == objCamouflametall) // Camouflametall disguise
            {
                _i.targetCID = player_costume_id;
            }
            
        }
        else
        {
            /* if (grav != 0)
            {
                shiftObject(xs * 2, 0, blockCollision);   
            }*/
        }
    }
    applyRumble(parent.playerID,0,.75,.1,60);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playSFX(sfxReflect);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
