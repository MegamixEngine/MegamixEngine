<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSquidon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A pseudo miniboss that will shoot homing missiles at megaman.
event_inherited();

healthpointsStart = 16;
healthpoints = healthpointsStart;
contactDamage = 4;
lockTransition = false;

category = "bulky, nature";

doesIntro = false;
rescursiveExplosion = false;

// Enemy specific code
phase = 0;
waitTimer = 0;

place = -1;
missle[0] = noone;
missle[1] = noone;

animBack = false;
imgSpd = 0.08;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // start facing mega man
        case 0:
            calibrateDirection();
            phase = 1;
            break;
        
        // wait to fire next attack
        case 1:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 2)
            {
                imgIndex = imgIndex mod 2;
            }
            waitTimer += 1;
            if (waitTimer &gt;= 60)
            {
                waitTimer = 0;
                phase = 2;
                imgIndex = 2;
            }
            break;
        
        // fire ice cube
        case 2:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 4)
            {
                phase = 1;
                imgIndex = imgIndex mod 4;
                var cube = instance_create(x + sprite_width * 0.35, y + 15, objSquidonIceCube);
                cube.dir = image_xscale;
                
                // see if a missle should be fired
                var i;
                for (i = 0; i &lt; 2; i += 1)
                {
                    var ded = false;
                    if (!instance_exists(missle[i]))
                    {
                        ded = true;
                    }
                    else
                    {
                        if (missle[i].dead == true)
                        {
                            ded = true;
                        }
                    }
                    
                    if (ded)
                    {
                        if (place == -1)
                        {
                            place = i;
                        }
                        
                        missle[i] = noone;
                    }
                }
                
                if (place != -1)
                {
                    phase = 3;
                    imgIndex = 4;
                }
            }
            break;
        
        // shoot missle
        case 3:
            if (!animBack)
            {
                imgIndex += imgSpd * 5;
                if (imgIndex &gt;= 7)
                {
                    imgIndex = 6;
                    animBack = true;
                    var a = instance_create(x + sprite_width * 0.22, y - 17, objSquidonMissile);
                    a.dir = image_xscale;
                    missle[place] = a;
                    place = -1;
                }
            }
            else
            {
                // stay open after firing for a brief moment
                if (waitTimer &gt; 20)
                {
                    imgIndex -= imgSpd * 5;
                    if (imgIndex &lt; 4)
                    {
                        phase = 1;
                        animBack = false;
                        imgIndex = 0;
                        waitTimer = 0;
                    }
                }
                else
                {
                    waitTimer += 1;
                }
            }
            break;
    }
}
else if (dead)
{
    phase = 0;
    place = -1;
    waitTimer = 0;
    animBack = false;
    imgIndex = 0;
    
    if (deadTimer == 2)
    {
        audio_stop_sound(sfxExplosion);
        playSFX(sfxExplosion2);
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage tables
specialDamageValue(objHornetChaser, 6);
specialDamageValue(objGeminiLaser, 5);
specialDamageValue(objIceWall, 5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (objSquidonMissile)
{
    event_user(EV_DEATH);
    itemDrop = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
