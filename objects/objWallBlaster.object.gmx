<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWallBlaster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = true;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;
category = "cannons";

blockCollision = 0;
grav = 0;

// Enemy specific code
xspeed = 0;
yspeed = 0;
timer = 0;

currentAngle = 90;

animTimer = 0;
animImage = 0;

shootTimer = 0;
shootTimerMax = 120;
shooting = false;
shootCount = 0;
shootImage = 0;
currentShootCount = 0;

image_speed = 0;
image_index = 0;

init = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup
if (init == 0)
{
    init = 1;
}

event_inherited();

if (entityCanStep())
{
    // Animation
    animTimer += 1;
    if (animTimer &gt;= 7)
    {
        animTimer = 0;
        if (animImage == 0)
            animImage = 1;
        else
            animImage = 0;
    }
    
    
    // Determine angle
    if (instance_exists(target))
    {
        if ((spriteGetXCenterObject(target) &lt;= x &amp;&amp; image_xscale == -1)
            || (spriteGetXCenterObject(target) &gt;= x &amp;&amp; image_xscale == 1))
        {
            var newAngle = point_direction(x, spriteGetYCenter(), spriteGetXCenterObject(target),
                spriteGetYCenterObject(target));
            var angleSpd = 5;
            
            if (abs(newAngle - currentAngle) &gt; angleSpd &amp;&amp; abs(abs(newAngle - currentAngle) - 360) &gt; angleSpd)
            {
                var angleDir;
                if ((newAngle &gt; currentAngle &amp;&amp; !(currentAngle &lt; 270 &amp;&amp; newAngle &gt;= 270)) || (newAngle &lt;= 90 &amp;&amp; currentAngle &gt;= 270))
                    angleDir = 1;
                else
                    angleDir = -1;
                
                currentAngle += angleDir * angleSpd;
            }
            else
                currentAngle = newAngle;
            
            currentAngle = wrapAngle(currentAngle);
        }
    }
    
    
    // Start shooting
    if (shooting == false)
    {
        if (instance_exists(target))
        {
            if ((spriteGetXCenterObject(target) &lt;= x &amp;&amp; image_xscale == -1)
                || (spriteGetXCenterObject(target) &gt;= x &amp;&amp; image_xscale == 1))
            {
                timer += 1;
                if (timer &gt;= shootTimerMax)
                {
                    timer = 0;
                    shooting = true;
                    shootTimer = 0;
                    currentShootCount = 0;
                    
                    shootCount = choose(3, 3, 3, 3, 3, 2, 2, 1, 1);
                    shootTimerMax = irandom_range(60, 120);
                }
            }
            else
                timer = 0;
        }
    }
    
    
    // Shooting
    if (shooting == true)
    {
        var interval = 30;
        if (shootTimer % interval == 0)
        {
            if (currentShootCount &gt;= shootCount)
                shooting = false;
            else
            {
                // Create the bullet
                var useImage = floor(image_index / 4);
                
                var xx, yy;
                switch (useImage)
                {
                    case 0:
                        xx = 13;
                        yy = -3;
                        break;
                    case 1:
                        xx = 18;
                        yy = 3;
                        break;
                    case 2:
                        xx = 24;
                        yy = 8;
                        break;
                    case 3:
                        xx = 27;
                        yy = 19;
                        break;
                    case 4:
                        xx = 24;
                        yy = 30;
                        break;
                    case 5:
                        xx = 18;
                        yy = 35;
                        break;
                    case 6:
                        xx = 13;
                        yy = 41;
                        break;
                    default:
                        xx = 27;
                        yy = 19;
                        break;
                }
                
                var ID = instance_create(x + image_xscale * (-sprite_get_xoffset(sprite_index) + xx), y - sprite_get_yoffset(sprite_index) + yy, objEnemyBullet);
                ID.dir = wrapAngle(90 - ((useImage + 1) * 22.5));
                ID.spd = 2;
                
                ID.xspeed = cos(degtorad(ID.dir)) * ID.spd * image_xscale;
                ID.yspeed = -sin(degtorad(ID.dir)) * ID.spd;
                
                currentShootCount += 1;
            }
        }
        
        if (shooting == true)
        {
            if (shootTimer % interval &lt; interval / 2)
                shootImage = 1;
            else
                shootImage = 0;
            
            shootTimer += 1;
        }
    }
    else
        shootImage = 0;
    
    
    // Determine animation frame
    var angleImage, interval = 180 / 7;
    if (image_xscale == 1)
    {
        var useAngle;
        if (currentAngle &gt;= 0 &amp;&amp; currentAngle &lt; 270)
            useAngle = 90 - currentAngle;
        else
            useAngle = 360 - currentAngle + 90;
        
        angleImage = floor(useAngle / interval);
    }
    else
    {
        var useAngle = currentAngle - 90;
        angleImage = floor(useAngle / interval);
    }
    
    image_index = (min(angleImage, 6) * 4) + animImage + (shootImage * 2);
}
else
{
    if (dead == true)
    {
        timer = 0;
        currentAngle = 90;
        animTimer = 0;
        animImage = 0;
        shooting = false;
        shootTimer = 0;
        shootTimerMax = 120;
        currentShootCount = 0;
        shootCount = 0;
        shootImage = 0;
        image_speed = 0;
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,-1</point>
    <point>9,9</point>
  </PhysicsShapePoints>
</object>
