<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPointan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This cursor enemy will cycle through 3 patterns, once he finishes he will move to his inital position
// and start over.
event_inherited();
healthpointsStart = 3;
category = "floating";
contactDamage = 2;
grav = 0;
blockCollision = false;
despawnRange = 8;
facePlayerOnSpawn = false;

//@cc 0(default): square, 1: vertical line, 2: horizontal line.
initialPattern = 0;

pattern = 0;
vdir = 0;
nextX = 0;
nextY = 0;
prevX = 0;
prevY = 0;
phase = 0;
timer = 0;

windowDir = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // wait a bit before creating windows 
            timer += 1;
            if (x == xstart &amp;&amp; y == ystart)
                despawnRange = 8;
            if (timer &gt; 30)
            {
                timer = 0;
                windowDir = -1;
                vdir = 1;
                if (instance_exists(target))
                {
                    if (target.x &gt;= x)
                        windowDir = 1;
                    if (target.bbox_bottom &lt; bbox_top + 16)
                        vdir = -1;
                }
                prevX = x;
                prevY = y;
                switch (pattern)
                {
                    case 0:
                        nextX = x - 32 * windowDir;
                        nextY = y + 32 * vdir;
                        break;
                    case 1:
                        nextX = x - 16 * windowDir;
                        nextY = y + 64 * vdir;
                        break;
                    case 2:
                        nextX = x - 64 * windowDir;
                        nextY = y + 16 * vdir;
                        break;
                }
                phase = 1;
                timer = 0;
                playSFX(sfxPointanSelect);
            }
            break;
        case 1: // Move to a certain point before creating windows 
            despawnRange = -1;
            timer += 0.05;
            if (timer &gt; 1)
                timer = 1;
            if (x != nextX &amp;&amp; y != nextY)
            {
                x = lerp(prevX, nextX, timer);
                y = lerp(prevY, nextY, timer);
            }
            else
            {
                phase = 2;
                timer = 0;
            }
            break;
        case 2: // Make Windows 
            if (timer == 0)
            {
                despawnRange = -1;
                var _y = y - 16 * (vdir == 1);
                var _x = x - 16 * (windowDir == -1);
                playSFX(sfxPointanMake);
                switch (pattern)
                {
                    case 0:
                        var i = instance_create(_x, _y, objPointanWindow);
                        i.type = 1;
                        i = instance_create(_x + 16 * windowDir, _y, objPointanWindow);
                        i.dir = windowDir;
                        i.delay = 30;
                        i = instance_create(_x + 16 * windowDir, _y - 16 * vdir, objPointanWindow);
                        i.type = 1;
                        i.delay = 60;
                        i = instance_create(_x, _y - 16 * vdir, objPointanWindow);
                        i.dir = windowDir;
                        i.delay = 90;
                        break;
                    case 1:
                        for (var j = 0; j &lt; 4; j++)
                        {
                            var i = instance_create(_x, _y - j * 16 * vdir, objPointanWindow);
                            i.delay = j * 30;
                            i.dir = windowDir;
                        }
                        break;
                    case 2:
                        for (var j = 0; j &lt; 4; j++)
                        {
                            var i = instance_create(_x + j * 16 * windowDir, _y, objPointanWindow);
                            i.delay = j * 30;
                            i.type = 1;
                        }
                        break;
                }
            }
            if (timer &gt;= 0)
                timer += 1;
            if (timer &gt;= 60 * 3.5)
            {
                pattern += 1;
                if (pattern &gt; 2)
                {
                    pattern = 0;
                }
                if (pattern == initialPattern)
                {
                    timer = -0.01;
                    prevX = x;
                    prevY = y;
                }
                else
                {
                    phase = 0;
                    timer = 0;
                }
            }
            if (timer &lt; 0)
            {
                timer -= 0.05;
                if (timer &lt; -1)
                    timer = -1;
                x = lerp(prevX, xstart, abs(timer));
                y = lerp(prevY, ystart, abs(timer));
                if (x == xstart &amp;&amp; y == ystart)
                {
                    phase = 0;
                    timer = 0;
                }
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    pattern = initialPattern;
    timer = 0;
}
phase = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the selection square
event_inherited();
if (!dead &amp;&amp; phase == 1)
{
    var width = abs(prevX - x);
    var height = abs(prevY - y);
    var top = (prevY &lt; y) * prevY + (prevY &gt;= y) * y;
    var bottom = (prevY &gt;= y) * prevY + (prevY &lt; y) * y;
    var left = (prevX &lt; x) * prevX + (prevX &gt;= x) * x;
    var right = (prevX &gt;= x) * prevX + (prevX &lt; x) * x;
    draw_sprite(sprPointanSelectionSquare, 0, left, top);
    draw_sprite(sprPointanSelectionSquare, 2, left, bottom);
    draw_sprite(sprPointanSelectionSquare, 4, right, bottom);
    draw_sprite(sprPointanSelectionSquare, 6, right, top);
    
    for (var i = 1; i &lt; floor(width / 4); i += 1)
    {
        draw_sprite(sprPointanSelectionSquare, 7, left + i * 4, top);
        draw_sprite(sprPointanSelectionSquare, 3, left + i * 4, bottom);
    }
    for (var i = 1; i &lt; floor(height / 4); i += 1)
    {
        draw_sprite(sprPointanSelectionSquare, 1, left, top + i * 4);
        draw_sprite(sprPointanSelectionSquare, 5, right, top + i * 4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
