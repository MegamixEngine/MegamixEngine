<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDamageSpike</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
while (place_meeting(x, y, objSolid))
{
    with (instance_place(x, y, objSolid))
        instance_destroy();
}
image_xscale = 7;
image_yscale = 1;
canHit = false;
destroyTimer = 0;
despawnRange = -1;
respawn = false;
stopOnFlash = false;
resetDepth = false;
if (depth == -2)
{
    depth = 1000000;
    resetDepth = true;
}
f = 0; // facade
solidBlock = noone;
isSolid = false;
killMega = true;
tileNumber = 0;
alarm[0] = 1;
blockCollision = 1;
grav = 0;
contactDamage = 4;
subGroup = false;
startingY = 0;

tileBG = makeArray();
tileWidth = makeArray();
tileHeight = makeArray();
tileX = makeArray();
tileLeft = makeArray();
tileTop = makeArray();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (solidBlock)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (subGroup == false)
{
    for (var getX = 0; getX * 16 &lt; image_xscale * sprite_get_width(sprite_index); getX += 1)
    {
        for (var getY = 0; getY * 16 &lt; image_yscale * sprite_get_height(sprite_index); getY += 1)
        {
            var myTile = tile_layer_find(depth, x + 8 + 16 * getX, y + 8 + 16 * getY);
            if (tile_exists(myTile))
            {
                tileBG[tileNumber] = tile_get_background(myTile);
                tileLeft[tileNumber] = tile_get_left(myTile);
                tileTop[tileNumber] = tile_get_top(myTile);
                tileWidth[tileNumber] = tile_get_width(myTile);
                tileHeight[tileNumber] = tile_get_height(myTile);
                tileX[tileNumber] = tile_get_x(myTile) - x;
                tileY[tileNumber] = tile_get_y(myTile) - y;
                tileNumber += 1;
            }
            else
            {
                instance_destroy();
            }
        }
    }
    startingY = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (isSolid)
{
    if (!instance_exists(solidBlock))
    {
        if (killMega)
        {
            // if mega man is inside block when spawned, KILL HIM!
            with (instance_place(x, y, objMegaman))
            {
                event_user(EV_DEATH);
            }
            killMega = false;
        }
        else
            solidBlock = instance_create(x, y, objSolidIndependent);
    }
    with (solidBlock)
    {
        image_xscale = other.image_xscale * sprite_get_width(other.sprite_index) / 16;
        image_yscale = other.image_yscale * sprite_get_height(other.sprite_index) / 16;
        
        // visible = true;
    }
}
else
{
    with (solidBlock)
        instance_destroy();
}
with (solidBlock)
{
    x = other.x;
    y = other.y;
}
if (entityCanStep())
{
    destroyTimer += 1;
    if (destroyTimer == 128)
        instance_destroy();
    if (destroyTimer == 4)
    {
        if (!checkSolid(0, 16, 1, 1))
        {
            var inst = instance_create(x, y + 16, object_index);
            inst.subGroup = true;
            with (inst)
            {
                startingY = other.startingY;
                for (var getX = 0; getX * 16 &lt; image_xscale * sprite_get_width(sprite_index); getX += 1)
                {
                    for (var getY = 0; getY * 16 &lt; image_yscale * sprite_get_height(sprite_index); getY += 1)
                    {
                        {
                            myTile = tile_layer_find(depth, x + 8 + 16 * getX, startingY + 8 + 16 * getY);
                            tileBG[tileNumber] = tile_get_background(myTile);
                            tileLeft[tileNumber] = tile_get_left(myTile);
                            tileTop[tileNumber] = tile_get_top(myTile);
                            tileWidth[tileNumber] = tile_get_width(myTile);
                            tileHeight[tileNumber] = tile_get_height(myTile);
                            tileX[tileNumber] = tile_get_x(myTile) - x;
                            tileY[tileNumber] = tile_get_y(myTile) - startingY;
                            tileNumber += 1;
                            isSolid = true;
                        }
                    }
                }
            }
        }
    }
}
if (resetDepth)
    depth = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (subGroup)
{
    for (var i = 0; i &lt; tileNumber; i += 1)
        draw_background_part(tileBG[i], tileLeft[i], tileTop[i], tileWidth[i], tileHeight[i], floor(x + tileX[i]), floor(y + tileY[i]));
}
else
{
    if (destroyTimer mod 2 == 0)
    {
        for (var i = 0; i &lt; tileNumber; i += 1)
            draw_background_part(tileBG[i], tileLeft[i], tileTop[i], tileWidth[i], tileHeight[i], floor(x + tileX[i]), floor(y + 16 + tileY[i]));
    }
}

// drawSelf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
