<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWilyCastle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LEVELS

levels = 0;

level[(levels ++)] = "lvlMM4Wily1"
level[(levels ++)] = "lvlMM5Dark1"
level[(levels ++)] = "lvlMM6MrX4"
level[(levels ++)] = "lvlMM9Wily3"
level[(levels ++)] = "lvlMM10Wily4"

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MISC.

image_speed = 0;
direction = 0; //Direction to start with

phase = 1;
timer = 0;
subphase = 1;

canSkip = 1;

// Path detection
setup = 1;

pathLength = 0;
pathStart = 0;
pathEnd = 0;
pathDots = -1;
pathDraw = 0;

layer = 1000000;

path[0] = -1;

// - - - - - - - - -

//Check how many levels have been beaten
global.castleStagesBeaten = 0;

for (var i = 0; i &lt; levels; i ++;)
{
    if (indexOf(global.elementsCollected, level[i] + "0") &gt;= 0)
    {
        global.castleStagesBeaten ++;
    }
    else
    {
        break;
    }
}

resetReturnLayers();
setReturnPoint(0,0,1);
global.checkpointName = "[dummy]";
global.lockExitButton = true;

// failsafe
if (global.castleStagesBeaten &gt;= levels)
{
    stopMusic();
    room_goto(rmCredits);
    
    global.returnLayer[global.returnLayers - 1] = rmStageSelect;
    global.stage = "rmStageSelect";
    global.lockExitButton = false;
    
    global.elementsCollected = arrayCopyDeleteIndexes(global.elementsCollected,
        indexOf(global.elementsCollected, level[levels - 1] + "0"));
}
else
{
    global.stage = roomExternalGetName(room);
}

saveLoadGame(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CUTSCENE HANDLE

timer ++;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

switch(phase)
{

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    case 1: //Animation sequence
        
        switch (subphase)
        {
        
            case 1: // Dark 
            
                if (timer &gt;= 400)
                {
                    image_index = 1;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                
            case 2: // First Flash 
            
                if (timer &gt;= 8)
                {
                    background_color = c_white;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                
            case 3: // First Flash stop 
                
                if (timer &gt;= 8)
                {
                    background_color = c_black;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                
            case 4: // Second Flash 
                
                if (timer &gt;= 8)
                {
                    background_color = c_white;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                
            case 5: // Second Flash stop 
            
                if (timer &gt;= 8)
                {
                    background_color = c_black;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                
            case 6: // Third Flash 
            
                if (timer &gt;= 8)
                {
                    background_color = c_white;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                
            case 7: // Third Flash stop 
            
                if (timer &gt;= 8)
                {
                    background_color = c_black;
                    
                    subphase ++;
                    timer = 0;
                }
                
                break;
                            
            case 8: // Make dark / show dots
            
                if (timer &gt;= 8)
                {
                    with (objWilyCastleDot)
                    {
                        visible = 1;
                    }
                    
                    pathDraw = pathStart
                    
                    for (var i = 0; i &lt;= pathDraw; i ++;)
                    {
                        tile_set_visible(path[i], 1);
                    }
                    
                    phase ++;
                    timer = 0;
                }
                
                break;
                
        }
        
        break;
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 2: //Start pathLength
        
        if (timer &gt;= 96)
        {
            loopSFX(sfxCastlePath);
            
            timer = 0;
            phase ++;
        }
        
        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 3: // Progress path
        
        if (timer &gt;= 4)
        {
            timer = 0;
            
            pathDraw ++;
            
            if (pathDraw &gt;= pathEnd)
            {
                phase ++;
                audio_stop_sound(sfxCastlePath);
            }
            else
            {
                tile_set_visible(path[pathDraw], 1);
            }
        }
        
        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        
    case 4: // Go to level
        
        if (timer &gt;= 96)
        {
            event_user(0);
            phase ++;
        }
        
        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//Skipping
if (canSkip)
{
    if (global.keyPause[0])
    {
        event_user(0);
        audio_stop_all();
        canSkip = 0;
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GO TO LEVEL

var myRoom = -1;
var load = level[global.castleStagesBeaten];

if (asset_get_type(load) == asset_room) //Internal
{
    myRoom = asset_get_index(load);
}
else //External
{
    if (roomExternalFindLocation(load) != load) //Exists?
    {
        myRoom = getRoom(load);
    }
}

if (myRoom &gt;= 0)
{
    goToLevel(myRoom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PATH SETUP

//Set starting position
if (pathLength == 0)
{
    with (objWilyCastleDot)
    {
        if (start)
        {
            other.xm = x;
            other.ym = y;
        }
    }
}

var stop = 0;

//Get path
while (true)
{
    var preDirection = direction;
    var stepDistance = 8;
    
    //Collision point
    var cx = (xm + (stepDistance / 2));
    var cy = (ym + (stepDistance / 2));
    
    var foundPath = tile_layer_find(layer, cx, cy);
    var foundDot = collision_point(cx, cy, objWilyCastleDot, false, false);
    
    // - - - - - - - - - - - - - -
    
    if (foundDot) //Found dot
    {
        pathDots ++;
        
        // sets start of pathLength
        if (pathDots == global.castleStagesBeaten)
        {
            pathStart = pathLength;
        }
        
        // sets end of pathLength
        if (pathDots == global.castleStagesBeaten + 1)
        {
            pathEnd = pathLength;
            foundDot.image_speed = 0.1;
        }
    }
    
    // - - - - - - - - - - - - - -
    
    if (foundPath) //Get new direction
    {
        var type = floor(tile_get_left(foundPath) / stepDistance);
        
        switch(direction)
        {
            case 0: //Right
                
                if (type == 2)
                {
                    direction = 270;
                }
                if (type == 4)
                {
                    direction = 90;
                }
                
                break;
                
            case 90: //Up
                
                if (type == 2)
                {
                    direction = 180;
                }
                if (type == 3)
                {
                    direction = 0;
                }
                
                break;
                
            case 180: //Left
                
                if (type == 3)
                {
                    direction = 270;
                }
                if (type == 5)
                {
                    direction = 90;
                }
                
                break;
                
            case 270: //Down
                
                if (type == 4)
                {
                    direction = 180;
                }
                if (type == 5)
                {
                    direction = 0;
                }
                
                break;
                
        }
        
        path[pathLength] = foundPath;
        tile_set_visible(foundPath, 0);
        
        pathLength ++;
    }
    else
    {
        stop = 1;
    }
    
    // - - - - - - - - - - - - - -
    
    // Move
    xm += lengthdir_x(stepDistance, direction);
    ym += lengthdir_y(stepDistance, direction);
    
    if (stop)
    {
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawSelf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
