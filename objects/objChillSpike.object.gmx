<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChillSpike</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = 0;
grav = 0;

stopOnFlash = false;
contactDamage = 2;
reflectable = 0;

imageTimer = 0;
imageReset = 0;
imageMax = 2;

hasGravity = true;

ground = false;
toWall = false;
flag = false;

spreadAttack = false;
gravStr = 0.25;
image_speed = 0;

// if yspeed == -5
// yspeed = ySpeedAim(y, objChillSpikeDetector.y, gravAccel);
image_index = imageReset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    if (!toWall &amp;&amp; !flag &amp;&amp; !spreadAttack)
    {
        yspeed = -3;
        xspeed = xSpeedAim(x, y, objChillSpikeDetector.x, objChillSpikeDetector.y, yspeed, gravStr);
        flag = true;
    }
    else if (!flag &amp;&amp; spreadAttack)
    {
        var angle;
        angle = direction;
        xspeed = cos(degtorad(angle)) * 6;
        yspeed = -sin(degtorad(angle)) * 6;
        gravStr = 0;
        flag = true;
        with (objChillSpikeDetector)
        {
            instance_destroy();
        }
    }
    else if (!flag)
    {
        yspeed = ySpeedAim(y, objChillSpikeDetector.y - 24, gravStr);
        xspeed = xSpeedAim(x, y, objChillSpikeDetector.x, objChillSpikeDetector.y, yspeed, gravStr);
        gravStr = 0.20;
        flag = true;
        with (objChillSpikeDetector)
        {
            instance_destroy();
        }
    }
    
    imageTimer += 1;
    if (hasGravity)
    {
        grav = gravStr;
        blockCollision = 1;
    }
    
    if (imageTimer == 3 &amp;&amp; image_index &lt; imageMax)
    {
        image_index += 1;
        imageTimer = 0;
    }
    
    if (imageTimer == 3 &amp;&amp; image_index == imageMax)
    {
        image_index = imageReset;
        imageTimer = 0;
    }
    
    if (ground &amp;&amp; !toWall)
    {
        playSFX(sfxChillSpikeLand);
        var cS = instance_create(x, y + 9, objChillSpikeSpike);
        cS.respawn = false;
        instance_destroy();
    }
    if (xspeed == 0 &amp;&amp; toWall)
    {
        playSFX(sfxChillSpikeLand);
        var cS = instance_create(x + speed + (9 * image_xscale), y,
            objChillSpikeSpike);
        cS.sprite_index = sprChillSpikeWall;
        cS.image_xscale = image_xscale * -1;
        cS.respawn = false;
        for (var i = 0; i &lt; 16; i += 1)
        {
            with (cS)
            {
                if (!checkSolid(0, 0, 1, 1))
                {
                    x -= image_xscale;
                }
            }
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMegaman">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sorry that a collision event had to be used......BUT IT WAS THE ONLY WAY

event_inherited();

if (!other.isFrozen)
{
    playSFX(sfxChillSpikeLand);
    with (other)
    {
        global.playerHealth[playerID] -= 2;
        freezeTimer = 60;
        isFrozen = 1;
        xspeed = 0;
        yspeed = 0;
        playerHandleSprites('Normal');
        playerPalette();
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
