<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM10Suzy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Also known as Octopus Battery. Will periodically move in the direction set in creation code (default is right).
// When it starts moving, it will move until it hits a wall, then rest for a bit, and move back in the opposite direction.
// Wash, rinse, repeat.

// Creation code (all optional):
// dir = "h"/"v" ("h" = horizontal (default); "v" = vertical)
// startDir = -1/1 (1 makes the suzy move right/down first (default); -1 makes the suzy move left/up first)

event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;
enemyDamageValue(objThunderBeam, 5);

grav = 0;

// Enemy specific code
init = 1;

dir = "h";
startDir = 1;

beginStartDir = startDir;

moveTimer = 0;
moving = false;
firsttime = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    init = 0;
    beginStartDir = startDir;
}

event_inherited();

if (entityCanStep())
{
    if (!moving)
    {
        moveTimer += 1;
        if (moveTimer == 10)
        {
            image_index = 0; // After touching a wall, we want the eye to close slowly (half-open the first 10 frames)
        }
        if (moveTimer == 110)
        {
            image_index = 1; // eye half-open
        }
        else if (moveTimer &gt;= 120)
        {
            image_index = 2;
            moving = true;
            if (firsttime)
            {
                if (dir == "h")
                {
                    if (checkSolid(-4, 0, 1, 1))
                    {
                        startDir = 1;
                    }
                    else if (checkSolid(4, 0, 1, 1))
                    {
                        startDir = -1;
                    }
                    else
                    {
                        if (instance_exists(target) &amp;&amp; target.x &lt; x)
                        {
                            startDir = -1;
                        }
                        else
                        {
                            startDir = 1;
                        }
                    }
                }
                else
                {
                    if (checkSolid(0, -4, 1, 1))
                    {
                        startDir = 1;
                    }
                    else if (checkSolid(0, 4, 1, 1))
                    {
                        startDir = -1;
                    }
                    else
                    {
                        if (instance_exists(target) &amp;&amp; target.y &lt; y)
                        {
                            startDir = -1;
                        }
                        else
                        {
                            startDir = 1;
                        }
                    }
                }
            }
            firsttime = 0;
        }
    }
    else
    {
        if ((xspeed == 0 &amp;&amp; dir == "h") || (yspeed == 0 &amp;&amp; dir == "v"))
        {
            moving = false;
            moveTimer = 0;
            image_index = 1;
            startDir = -startDir;
        }
    }
    
    if (moving)
    {
        if (dir == "h")
        {
            xspeed = startDir * 3;
        }
        else
        {
            yspeed = startDir * 3;
        }
    }
}
else if (dead)
{
    moveTimer = 0;
    startDir = beginStartDir;
    moving = false;
    image_index = 0;
    firsttime = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
