<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRembakun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 5;

category = "flying";

blockCollision = 0;
grav = 0;

facePlayerOnSpawn = true;

// Enemy specific code
missileDrop = -1;
moveDelay = 0;
imgIndex = 0;
imgSpd = 0.25;

// shooting variables
cooldownTimer = 0;
cooldownMax = 10;
canShoot = false;
direct = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    moveDelay += 1;
    imgIndex += imgSpd;
    
    if (missileDrop &gt; 0)
    {
        image_index = ((imgIndex mod 2) + 2 * missileDrop)
    }
    else
    {
        image_index = imgIndex mod 2;
    }
    
    // Rembakun moves an additional pixel extra every few frames. this replicates that.
    if (moveDelay == 0)
    {
        xspeed = 1 * image_xscale;
    }
    if (moveDelay == 3)
    {
        xspeed = 2 * image_xscale;
        moveDelay = -1;
    }
    cooldownTimer += 1;
    if (cooldownTimer &gt;= cooldownMax &amp;&amp; missileDrop &lt; 6)
    {
        // Change missile number, and flag on the fact the enemy can shoot.
        canShoot = true;
        cooldownTimer = 0;
        missileDrop += 1;
    }
    
    // generate missile depending on what number missile drop is.
    if (canShoot == true)
    {
        var inst;
        var scaleX;
        scaleX = image_xscale;
        switch (missileDrop)
        {
            case 2:
                inst = instance_create(x + (image_xscale * 4), y + 8,
                    objRembakunMissile);
                with (inst)
                    image_xscale = scaleX;
                break;
            case 4:
                inst = instance_create(x + (image_xscale * 4), y + 8,
                    objRembakunMissile);
                with (inst)
                    image_xscale = scaleX;
                break;
            case 6:
                inst = instance_create(x + (image_xscale * 4), y + 8,
                    objRembakunMissile);
                with (inst)
                    image_xscale = scaleX;
                break;
        }
        canShoot = false;
    }
}
else if (dead)
{
    direct = 1 * image_xscale;
    cooldownTimer = 0;
    missileDrop = -1;
    moveDelay = 0;
    image_index = 0;
    imgIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
