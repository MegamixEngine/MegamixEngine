<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGlooper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation Code (All optional)
// shotMax = &lt;number&gt; // how long Glooper waits before firing.
event_inherited();
respawn = true;
healthpointsStart = 8;
healthpoints = healthpointsStart;
category = "nature";
contactDamage = 2;
facePlayer = true;

// Enemy specific code
animTimer = 0;
animMax = 12;
shotTimer = 0;
shotMax = 16;
shooting = false;
img = 0;
hasFired = false;
bubble = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    animTimer += 1;
    shotTimer += 1;
    if (instance_exists(objGloop))
    {
        shotTimer = 0;
        image_index = 0;
    }
    
    // if mega man hasn't been glooped and there doesn't exist a gloop bubble, fire.
    if (!instance_exists(objGloop) &amp;&amp; !instance_exists(bubble))
    {
        if (shotTimer &gt;= shotMax &amp;&amp; image_index == 0 &amp;&amp; !hasFired)
        {
            image_index = 1;
            shooting = true;
            animTimer = 0;
        }
        
        // while image is less than four, increase it
        if (animTimer &gt;= animMax &amp;&amp; image_index &gt;= 1 &amp;&amp; image_index &lt; 4 &amp;&amp; shooting)
        {
            image_index += 1;
            animTimer = 0;
        }
        
        // if image is equal to four, create gloop bubble.
        if (image_index == 4 &amp;&amp; !hasFired)
        {
            animMax = 24; // glooper remains on firing frame for double the length of normal.
            bubble = instance_create(x, y - 8, objGloopBall);
            bubble.xspeed = 2 * image_xscale;
            hasFired = true;
        }
    }
    else // otherwise Glooper cannot fire.
    {
        if (image_index == 0)
        {
            shotTimer = 0; 
            shooting = false;  
            hasFired = false;  
            animMax = 12;          
        }     
        // image_index = 0;
    }
    
    // if Glooper has fired, return animation speed to normal and set image to 1.
    if (animTimer &gt;= animMax &amp;&amp; image_index == 4)
    {
        animMax = 12;
        image_index = 1;
        shooting = false;
        animTimer = 0;
    }
    
    // as long as glooper is not firing and has already fired, reduce his image_index until it has been reset.
    if (animTimer &gt;= animMax &amp;&amp; image_index &gt;= 0 &amp;&amp; !shooting &amp;&amp; hasFired)
    {
        image_index -= 1;
        animTimer = 0;
        if (image_index == 0)
            hasFired = false;
    }
}
else if (dead)
{
    image_index = 0;
    animTimer = 5;
    shooting = false;
    hasFired = false;
    shotTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
