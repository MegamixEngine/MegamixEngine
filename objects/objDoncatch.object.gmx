<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDoncatch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// A hammerheaded enemy that smacks the ground and sends debris flying up and down. The
// debris is also affected by gravity-affecting objects, such as water and 0.5 Grav switches.

event_inherited();

healthpointsStart = 4;
contactDamage = 4;

facePlayerOnSpawn = true;
image_index = 1;

category = "rocky";

imageTimerEndpoint = 9; // 6;

// @cc - use this to change how fast Doncatch walks
moveSpeed = 1;

// @cc - use this to change how close Mega Man has to be for Doncatch to attack
dist = 54;

imagePhaseDir = 1;
imageTimer = imageTimerEndpoint;
shooting = false;
timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (!shooting)
    {
        if (instance_exists(target))
        {
            // Figure out how to improve positioning.
            if (ground &amp;&amp; abs(x - target.x) &lt;= dist) // Preparing to attack.
            {
                xspeed = 0;
                image_index = 1;
                imagePhaseDir = 1;
                shooting = true;
            }
            else // Walking along.
            {
                calibrateDirection();
                xspeed = moveSpeed * image_xscale;
                imageTimer += 1;
                if (imageTimer &gt;= imageTimerEndpoint)
                {
                    imageTimer = 0;
                    image_index += imagePhaseDir;
                    if (image_index &gt;= 2 || image_index &lt;= 0)
                    {
                        imagePhaseDir = -imagePhaseDir;
                    }
                }
            }
        }
        else
        {
            if (ground) // Preparing to attack.
            {
                xspeed = 0;
                image_index = 1;
                imagePhaseDir = 1;
                shooting = true;
            }
        }
    }
    
    if (shooting) // Hammer time.
    {
        timer += 1;
        if (timer == 90 / 2 - imageTimerEndpoint * 2)
        {
            image_index = 3;
        }
        if (timer == 90 / 2 - imageTimerEndpoint * 1)
        {
            image_index = 4;
        }
        if (timer == 90 / 2)
        {
            image_index = 5;
            if (positionCollision(x + 10 * image_xscale, bbox_bottom + 2))
            {
                var shot1 = instance_create(x + 10 * image_xscale, bbox_bottom, objDoncatchDebris);
                var shot2 = instance_create(x + 10 * image_xscale, bbox_bottom, objDoncatchDebris);
                var shot3 = instance_create(x + 10 * image_xscale, bbox_bottom, objDoncatchDebris);
                var shot4 = instance_create(x + 10 * image_xscale, bbox_bottom, objDoncatchDebris);
                shot1.version = 1;
                shot2.version = 2;
                shot3.version = 3;
                shot4.version = 4;
            }
        }
        if (timer == 90 / 2 + imageTimerEndpoint * 1)
        {
            image_index = 4;
        }
        if (timer == 90 / 2 + imageTimerEndpoint * 2)
        {
            image_index = 3;
        }
        if (timer == 90 / 2 + imageTimerEndpoint * 3)
        {
            image_index = 1;
        }
        if (timer &gt;= 90)
        {
            shooting = false;
            timer = 0;
        }
    }
}
else if (dead)
{
    image_index = 1;
    imagePhaseDir = 1;
    timer = 0;
    imageTimer = imageTimerEndpoint;
    shooting = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
