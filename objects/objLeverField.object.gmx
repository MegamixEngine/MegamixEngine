<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLeverHide</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
  Place many of these over a large area to be disabled when
  the lever is pulled. Only set creation code variables on one
  of the field objects in the area -- the information will automatically
  propagate to its neighbours.
  
  To have adjacent fields with different properties, declare the
  information on all the field objects at the boundary between
  the two fields.
*/

event_inherited();

contactDamage = 0;
canHit = false;
bubbleTimer = -1;

shiftVisible = 1;

active = false;
myinstance = noone;
myindex = noone;

image_alpha = 0;

sprite_index = sprLeverField;

TILE_DEPTH_UNSET = 4.035234; // special value for unset tiles

//@cc this value must match that of the associated objLever
tag = "";

//@cc if this is set, will cause an object to spawn when activated
// (will disable tile interaction)
object = noone;

//@cc set this to be the depth of the tile layer to make disappear
tile_depth = TILE_DEPTH_UNSET;

otheruptag = noone;
otherstate = noone;

// time since created:
createTime = 0;

// has propagated tag and depth to other fields?
propagated = false;

myTile = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.frozen &amp;&amp; !global.timeStopped &amp;&amp; createTime &gt; 1)
{
    if (active)
    {
        image_alpha = min(image_alpha + 0.1, 1);
        if (((image_alpha &gt;= 0.5 || object != noone)
            || createTime &lt; 3) &amp;&amp; myinstance == noone &amp;&amp; myindex != noone)
        {
            // activate object:
            myinstance = instance_create(x, y, myindex);
            
            // ladders need special treatment
            if (myindex == objLadder)
            {
                combineObjects(objLadder, false, true);
            }
            
            // custom creation code
            if (otheruptag != noone)
            {
                myinstance.uptag = otheruptag;
            }
            if (otherstate != noone)
            {
                myinstance.state = otherstate;
            }
            
        }
    }
    else
    {
        image_alpha = max(image_alpha - 0.1, 0);
        if ((image_alpha &lt; 0.5 &amp;&amp; object == noone)
            || (image_alpha == 0 &amp;&amp; object != noone)
            &amp;&amp; instance_exists(myinstance))
        {
            with (myinstance)
            {
                instance_destroy();
            }
            myinstance = noone;
        }
    }
    
    // custom objects set alpha:
    if (object != noone &amp;&amp; instance_exists(myinstance))
    {
        myinstance.image_alpha = image_alpha;
    }
}

if (instance_exists(objSectionSwitcher))
{
    image_alpha = active;
    if (object != noone &amp;&amp; instance_exists(myinstance))
    {
        myinstance.image_alpha = image_alpha;
    }
}

createTime += 1;
depth = tile_depth;

if (myTile &gt;= 0)
{
    tile_set_alpha(myTile, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find tile underneath
var t
t = tile_layer_find(tile_depth, x + 8, y + 8);
splitTile(t);

t = tile_layer_find(tile_depth, x + 8, y + 8);
myTile = t;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// find object underneath field

// set depth to proper value
if (tile_depth == TILE_DEPTH_UNSET)
{
    tile_depth = 1000000; // replacement tile depth
}
depth = tile_depth;

if (object != noone) // Set custom object
{
    myindex = object;
}

if (myindex == noone) // Set tile object
{
    var myobj = 0;
    for (var i = 1; i &lt;= 7; i += 1)
    {
        var obj;
        switch (i)
        {
            case 1:
                obj = objSolid;
                break;
            case 2:
                obj = objIce;
                break;
            case 3:
                obj = objSpike;
                break;
            case 4:
                obj = objLadder;
                break;
            case 5:
                obj = objTopSolid;
                break;
            case 6:
                obj = objWater;
                break;
            case 7:
                obj = objStandSolid;
                break;
        }
        var in_pos = instance_position(x + 8, y + 8, obj);
        if (instance_exists(in_pos))
        {
            myobj = in_pos;
        }
    }
    
    if (myobj)
    {
        myindex = myobj.object_index;
        
        with (myobj)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// propagate tag

if (tag == "")
{
    exit;
}
if (propagated)
{
    exit;
}

propagated = true;

for (var x_offset = -1; x_offset &lt;= 1; x_offset += 1)
{
    for (var y_offset = -1; y_offset &lt;= 1; y_offset += 1)
    {
        // skip diagonals and center:
        if (abs(x_offset) + abs(y_offset) != 1)
        {
            continue;
        }
        
        var ix = x + 8 + 16 * x_offset;
        var iy = y + 8 + 16 * y_offset;
        
        var o = instance_position(ix, iy, object_index);
        if (instance_exists(o) &amp;&amp; o != id)
        {
            // propagate tag if other's tag is blank
            if (o.tag == "")
            {
                with (o)
                {
                    tag = other.tag;
                    global.leverPropagated = true;
                }
            }
            
            // propagate tile depth to fields with same tag
            if (o.tag == tag)
            {
                if (o.tile_depth == TILE_DEPTH_UNSET)
                {
                    o.tile_depth = tile_depth;
                    global.leverPropagated = true;
                }
            }
        }
    }
}

// find object underneath field
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// propagate tags
print("leverfield");
if (id == object_index.id)
{
    while (true)
    {
        global.leverPropagated = false;
        with (object_index)
        {
            event_user(1);
        }
        if (!global.leverPropagated)
        {
            break;
        }
    }
    
    with (object_index)
    {
        // find objects underneath
        // highly negative depth of this object means it will
        // run before solids combine
        event_user(2);
    }
    
    with (object_index)
    {
        // find tiles underneath
        event_user(3);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
