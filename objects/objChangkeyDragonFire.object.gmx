<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChangkeyDragonFire</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = true;
isTargetable = false;
healthpointsStart = 0;
itemDrop = -1;
contactDamage = 3;
xspeed = 0;
yspeed = 0;

animFrame = 0;
imgSpd = 0.16;
moveTimer = -1;
tackleFire = false; // Is it a Tackle Fire?
fireExists = false; // Has the fire made a Tackle Fire upon landing?
burnOut = false; // Does the fire burn out now?
canFlip = true;
blockCollision = false;
grav = 0;
isOnGround = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step
event_inherited();

if (entityCanStep())
{
    if (tackleFire == false &amp;&amp; !isOnGround)
    {
        if (checkSolid(0, yspeed) &amp;&amp; !checkSolid(0, 0))
        {
            shiftObject(0, yspeed, true);
            yspeed = 0;
            isOnGround = true;
            ycoll = 1;
            animFrame = 4;
            calibrateDirection();
        }
    }
    else if (tackleFire == false)
    {
        ycoll = 0;
    }
    else
    {
        isOnGround = true;
    }
    if (tackleFire == false)
    {
        if (moveTimer == -1)
        {
            moveTimer = 60;
            animFrame = 0;
        }
        
        // Hit floor
        if (isOnGround)
        {
            imgSpd = 0.2;
            xspeed = 0;
            yspeed = 0;
            if (moveTimer &gt; 0)
            {
                moveTimer -= 1;
            }
            
            // Animation
            if (!burnOut &amp;&amp; moveTimer &gt; 0)
            {
                animFrame += imgSpd;
                if (floor(animFrame) &lt; 4 || floor(animFrame) &gt; 5)
                {
                    animFrame = 4;
                }
            }
            else
            {
                burnOut = true;
            }
            
            // Create Tackle Fire on impact
            if (fireExists == false)
            {
                var i = instance_create(x, y, objChangkeyDragonFire);
                i.image_xscale = image_xscale;
                i.tackleFire = true;
                i.isOnGround = true;
                fireExists = true;
                i.moveTimer = -1;
            }
        }
        else
        {
            imgSpd = yspeed / 30;
            animFrame += imgSpd;
            if (floor(animFrame) &gt; 3)
                animFrame = 2;
        }
    } // Tackle Fire code
    else
    {
        if (moveTimer == -1)
        {
            moveTimer = 60;
            animFrame = 6;
        }
        if (moveTimer &gt; 0)
            moveTimer -= 1;
        
        if (!burnOut)
        {
            animFrame += imgSpd;
            if (floor(animFrame) &gt; 7)
                animFrame = 6;
        }
        
        // Move
        if (moveTimer &lt;= 30)
        {
            xspeed = 4 * image_xscale;
        }
        if (checkSolid(xspeed, 0))
            burnOut = true;
    }
    
    // Burn out
    if (burnOut == true)
    {
        imgSpd = 0.2;
        animFrame += imgSpd;
        if (floor(animFrame) &lt; 8)
        {
            animFrame = 8;
        }
        if (floor(animFrame) &gt; 9)
        {
            instance_destroy();
        }
    }
    image_index = floor(animFrame);
}
else if (!insideView())
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if ((other.object_index == objBlackHoleBomb) || (other.object_index == objWaterShield)
    || (other.object_index == objTornadoBlow) || (other.object_index == objRainFlush))
{
    other.guardCancel = 0;
}
else
{
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
