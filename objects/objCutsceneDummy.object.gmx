<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVoltIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

name = '--cutscene dummy--';

noFlicker = true;
canHit = false;
canDamage = false;
respawnRange = -1;
despawnRange = -1;
faction = 7;

cutscene = noone;

// -- Animation Variables
animation = "";
animationCache = "";
animFrame = 0;
animMaxFrame = 99;
animResetFrame = 0;
animFrameLength = 999;
animTimer = 0;

// -- State Behaviour Variables
state = "";
stateCache = "";
substate = 0;
stateTimer = 0;

myMegaman = noone;

customDrawEvent = false;
useShader = false;
inputColours = allocateArray(4, -1000);
outputColours = allocateArray(4, -1000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (myMegaman == noone)
{
	with (cutscene)
	{
		other.myMegaman = myMegaman;
	}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// This object needs to be in a cutscene.
// No cutscene? Then I die.
if (!instance_exists(cutscene)) {
	visible = false;
    instance_destroy();
    exit;
}

if (!entityCanStep())
    exit;

//
// == Animation ==
//

// Reset variables if the animation has changed
if (animation != animationCache) {
    animationCache = animation;
    animFrame = 0;
    animTimer = 0;
    animResetFrame = 0;
    animFrameLength = 99;
}

// Process Animation
if (++animTimer &gt;= animFrameLength) {
    if (animFrame &lt; animMaxFrame)
        animFrame++;
	else
		animFrame = animResetFrame; //Go back to the defined start of the anim. loop
	
	animTimer = 0;
}

event_perform_object(cutscene.object_index, ev_other, ev_user6);

//
// == Actions ==
//

// Reset variables if the state has changed
if (state != stateCache) {
    stateCache = state;
    stateTimer = 0;
    substate = 0;
}

event_perform_object(cutscene.object_index, ev_other, ev_user7);
stateTimer++;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead)
exit;

// this debug message should be left in until
// the spawn system stops breaking every week.
if (spawned == -1)
    show_debug_message(object_get_name(object_index) + " drawn without having ever spawned!");

var _half_frame = ceil(iFrames / 2);
if (!(_half_frame mod 4) &amp;&amp; iFrames)
exit;

// White Flash Effect
if (_half_frame mod 2) {
hitFlashEffect(true, c_white);

if (customDrawEvent)
event_perform_object(cutscene.object_index, ev_other, ev_user8);
else
drawSelf();
    
    hitFlashEffect(false);
    
    exit;
}

if (useShader) {
shaderSetColorreplace(
        inputColours[0], outputColours[0],
        inputColours[1], outputColours[1],
        inputColours[2], outputColours[2],
        inputColours[3], outputColours[3],
    );
}

if (customDrawEvent)
event_perform_object(cutscene.object_index, ev_other, ev_user8);
else
drawSelf();

if (useShader)
shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
