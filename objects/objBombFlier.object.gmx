<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBombFlierCloud</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// When hidden in cloud form, they go in a slow wave pattern. But when hit, the cloud disappears
// and they fly fast and straight like a bullet.
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 2;

category = "flying";

grav = 0;
blockCollision = 0;

facePlayerOnSpawn = true;

// Enemy specific code
phase = 0;

cloudSpeed = 1;
bulletSpeed = 2.5;
sinCounter = 0;

uncoverWaitTimer = 0;

calibrateDirection();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // slower flying in a sine pattern 
            image_index += 20 / 60;
            xspeed = cloudSpeed * image_xscale;
            sinCounter += 0.1;
            yspeed = -(cos(sinCounter) * 1.3);
            break;
        case 1: // shedding cloud animation 
            if (sprite_index == sprBombFlierUncover)
            {
                image_index += 8 / 60; // uncovering animation speed
                if (image_index &gt; image_number - 1)
                {
                    sprite_index = sprBombFlierBullet;
                    image_index = 0;
                    uncoverWaitTimer = 6; // &lt;-- wait time between uncovering and moving forward
                }
                break;
            }
            if (uncoverWaitTimer &gt; 0)
            {
                uncoverWaitTimer -= 1;
            }
            else
            {
                uncoverWaitTimer = 0;
                phase = 2;
                xspeed = bulletSpeed * image_xscale;
            }
            break;
        case 2: // faster flying straight forward 
            image_index += 20 / 60;
            break;
    }
}
else if (dead)
{
    phase = 0;
    sinCounter = 0;
    
    sprite_index = sprBombFlierCloud;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 0)
{
    if (global.damage != 0)
    {
        phase = 1;
        
        xspeed = 0;
        yspeed = 0;
        sinCounter = 0;
        
        sprite_index = sprBombFlierUncover;
        image_index = 0;
        iFrames = 0;
        with (other)
        {
            if ((penetrate &lt; 2) &amp;&amp; (pierces &lt; 2))
            {
                event_user(EV_DEATH);
            }
        }
        other.guardCancel = 2;
        
        //healthpoints += global.damage;
    }
}
else
{
    if (phase != 2)
    {
        other.guardCancel = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
