<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDarspiderPreview</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spider that crawls on ceilings and falls when megaman is close,
// if placed on the ground it will jump towards megaman inmediately.
// When its not on the ceiling it will jump once if megaman is close, otherwise it will jump twice
event_inherited();


healthpointsStart = 2;
healthpoints = 2;
contactDamage = 3;
facePlayer = false;
category = "nature";

// Enemy specific code

sprite_index = sprDarspider;
mask_index = sprDarspider;
x += abs(sprite_get_xoffset(sprDarspider) - sprite_get_xoffset(sprDarspiderPreview));
y -= image_yscale * (abs(sprite_get_yoffset(sprDarspider) - sprite_get_yoffset(sprDarspiderPreview)));
xstart = x;
ystart = y;
onCeiling = 1;
isJumping = 0;
timer = 0;
startYscale = image_yscale;
prevGravDir = 1;
image_speed = 0;
waitTime = 0;
imageIndex = 0;
prevWaitTime = 5;

// Optional Creation Code
leftLimit = 9999;
rightLimit = 9999;


// Setup
ceilingSpeed = 1.25;
ceilingAnimSpeed = 0.175;
landAnimSpeed = 0.25;
isDei = false; // Weather he should act like a deispider, this means it'll randomly choose between 1 or 2 jumps
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ixsc = image_xscale;
image_xscale=1;
event_inherited();
image_xscale=ixsc;
if(!onCeiling)
{
    if(xcoll!=0)
    {
        xspeed=xcoll;
    }

}

if (entityCanStep())
{
    var hasTarget = instance_exists(target);
    var tx = 0;
    var ty = 0;
    var gravityDir = prevGravDir;
    if (hasTarget)
    {
        tx = target.x;
        ty = target.y;
        gravityDir = target.image_yscale;
    }
    prevGravDir = gravityDir;
    if (!isJumping &amp;&amp; onCeiling &amp;&amp; startYscale != gravityDir * -1)
    {
        isJumping = true;
        onCeiling = false;
    }
    
    
    if (onCeiling)
    {
        timer -= 1;
        image_yscale = -gravityDir;
        
        if (!isJumping)
        {
            grav = -0.25 * gravityDir;
            var onLimit = false;
            if (image_xscale &amp;&amp; x &gt; xstart + rightLimit)
            {
                x = xstart + rightLimit;
                onLimit = true;
            }
            else if (image_xscale == -1 &amp;&amp; x &lt; xstart - leftLimit)
            {
                x = xstart - leftLimit;
                onLimit = true;
            }
            if (xcoll != 0 || checkFall(16 * image_xscale, 0) || onLimit) // !checkSolid(16 * image_xscale, 10 * sign(grav),1)
            {
                image_xscale *= -1;
                if (!isDei)
                    timer = 16;
                xspeed = 0;
            }
            if (timer &lt; 0)
            {
                imageIndex += ceilingAnimSpeed;
                if (floor(imageIndex) &gt; 1)
                    imageIndex = 0;
                xspeed = ceilingSpeed * image_xscale;
            }
            var _x = bbox_right;
            var _tx = 0;
            if (hasTarget)
            {
                with (target)
                {
                    if (bbox_left &gt; other.bbox_right)
                    {
                        _tx = bbox_left;
                        _x = other.bbox_right;
                    }
                    else
                    {
                        _tx = bbox_right;
                        _x = other.bbox_left;
                    }
                }
            }
            if (hasTarget &amp;&amp; abs(_x - _tx) &lt; 12)
            {
                imageIndex = 2;
                isJumping = 1;
                xspeed = 0;
                grav = 0.25 * gravityDir;
                ground = false;
                var top = bbox_top;
                if (sign(grav) == -1)
                    top = bbox_bottom;
                var i = instance_create(x, top + 1 * sign(grav), objDarspiderWeb);
                i.parent = id;
                i.grv = grav;
            }
        }
        else
        {
            grav = 0.25 * gravityDir;
            if (ground)
            {
                onCeiling = false;
                isJumping = false;
                timer = 24;
            }
        }
    }
    else
    {
        image_yscale = gravityDir;
        grav = 0.25 * gravityDir;
        var speedLimit = 1.65;
        if (!isJumping)
        {
            timer -= 1;
            
            if (floor(imageIndex) &lt; 4)
            {
                imageIndex = min(4, imageIndex + landAnimSpeed);
            }
            if (isDei &amp;&amp; floor(imageIndex &gt; 4))
            {
                imageIndex += landAnimSpeed;
                if (floor(imageIndex) &gt; 6)
                    imageIndex = 3;
            }
            if (timer &lt;= 0)
            {
                yspeed = -5 * gravityDir;
                xspeed = xSpeedAim(x, y, tx, y, yspeed, grav, speedLimit);
                timer = 0;
                isJumping = true;
                imageIndex = 4;
                if (!isDei)
                {
                    if (abs(xspeed) &gt;= speedLimit &amp;&amp; abs(x - tx) &gt;= 64)
                    {
                        waitTime = 7;
                    }
                    else
                    {
                        waitTime = 25;
                    }
                }
                else
                {
                    waitTime = choose(5, 30);
                    if (prevWaitTime == waitTime &amp;&amp; waitTime == 5)
                    {
                        waitTime = 30;
                    }
                    prevWaitTime = waitTime;
                }
            }
        }
        else
        {
            var animLimit = 5 + !isDei;
            if (floor(imageIndex) &lt; animLimit)
            {
                imageIndex += 0.35;
                if (imageIndex &gt; animLimit)
                    imageIndex = animLimit;
            }
            
            if (ground)
            {
                xspeed = 0;
                isJumping = false;
                imageIndex = 3;
                timer = waitTime;
                if (isDei)
                {
                    imageIndex = 6;
                    playSFX(sfxHeavyLand);
                }
            }
            if (xcoll != 0)
                xspeed = xcoll;
        }
    }
    image_index = floor(imageIndex);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    onCeiling = 1;
    isJumping = 0;
    timer = 0;
    image_yscale = startYscale;
    prevGravDir = 1;
    image_index = 0;
    imageIndex = 0;
    yspeed = 0;
    prevWaitTime = 5;
    ground = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
