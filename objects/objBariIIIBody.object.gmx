<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBariIIIBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bari III Body
event_inherited();
contactDamage = 3;
healthpointsStart = 2;
healthpoints = 2;
respawn = false;
despawnRange = 32;
isSolid = 1;
fnsolid = true;
facePlayer = false;
facePlayerOnSpawn = false;
dieToSpikes = false;
canIce = false;
itemDrop = -1;
col = 0;

// AI
owner = noone;
animFrame = 0;
appear = true;
canShift = true;
index = 0;
killOverride = false;


mask_index = mskBariIIIBody0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    var mIndx = -999999;
    if (!instance_exists(owner))
    {
        exit;
    }
    with (objBariIIIBody)
    {
        if (owner.id == other.owner.id &amp;&amp; index &gt; mIndx)
            mIndx = index;
    }
    if (mIndx != index)
        exit;
    if (true) // Keep the parts toghether
    {
        var i = self.id;
        var minIndex = 99999;
        with (objBariIIIBody)
        {
            if (owner.id == other.owner.id &amp;&amp; index &lt; minIndex)
                minIndex = index;
        }
        while (i != noone)
        {
            with (i)
            {
                if (index == minIndex)
                {
                    i = instance_place(x, y - 4, owner);
                    with (owner)
                    {
                        var xdist = other.x - x;
                        shiftObject(xdist, 0, false);
                        x = other.x;
                        
                        if (i != noone)
                        {
                            var dist = other.bbox_top - 1 - bbox_bottom;
                            
                            // var xdist = other.x-x;
                            shiftObject(0, dist, false);
                            y = other.bbox_top - 1;
                            ground = true;
                            yspeed = 0;
                        }
                    }
                    i = noone;
                    break;
                }
                i = noone;
                if (i != noone)
                { }
                else
                {
                    var minId = index;
                    i = noone;
                    with (objBariIIIBody)
                    {
                        if (owner.id == other.owner.id &amp;&amp; index &lt; minId)
                        {
                            minId = index;
                            i = id;
                            break;
                        }
                    }
                    var pmi = mask_index;
                    
                    if (i != noone)
                    {
                        with (i)
                        {
                            var xdist = other.x - x;
                            shiftObject(xdist, 0, false);
                            x = other.x;
                        }
                        mask_index = mskBariIIIBody2;
                        if (place_meeting(x, y - 2, i))
                        {
                            mask_index = pmi;
                            with (i)
                            {
                                var dist = other.bbox_top - 1 - bbox_bottom;
                                shiftObject(0, dist, false);
                                y = other.bbox_top - 1;
                            }
                        }
                        mask_index = pmi;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (appear)
    {
        if (floor(animFrame) &lt; 2)
        {
            animFrame += 0.2;
            if (animFrame &gt; 2)
                animFrame = 2;
        }
    }
    else
    {
        if (floor(animFrame &gt;= 0))
        {
            animFrame -= 0.2;
            if (animFrame &lt; 0)
            {
                animFrame = 0;
                event_user(0);
                exit;
            }
        }
    }
    var pindx = image_index;
    image_index = floor(animFrame);
    if (image_index == 0)
    {
        mask_index = mskBariIIIBody0;
    }
    else if (image_index == 1)
    {
        mask_index = mskBariIIIBody1;
    }
    else
    {
        mask_index = mskBariIIIBody2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(spawned)
{
    switch (col)
    {
        case 1:
            sprite_index = sprBariIIIBodyOrange;
            break;
        default:
            sprite_index = sprBariIIIBody;
            break;
    }
}
else
{
    event_user(EV_DEATH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = true;
instance_create(x, y, objExplosion);

if (instance_exists(owner))
{
    owner.snap = false;
}
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(owner))
{
    exit;
}
owner.size -= 1;
owner.timer = 0;
owner.shootTimer = 0;
if (dead)
    exit;
if (image_index != 0)
    exit;
y += 4;
if (true) // Keep the parts toghether
{
    var i = self.id;
    var Other = id;
    var minIndex = 99999;
    with (objBariIIIBody)
    {
        if (owner == other.owner.id &amp;&amp; index &lt; minIndex)
            minIndex = index;
    }
    while (i != noone)
    {
        with (i)
        {
            if (index == minIndex)
            {
                i = instance_place(x, y - 4, owner);
                with (owner)
                {
                    var xdist = other.x - x;
                    shiftObject(xdist, 0, false);
                    x = other.x;
                    if (i != noone)
                    {
                        var dist = other.bbox_top - 1 - bbox_bottom;
                        shiftObject(0, dist, false);
                        y = other.bbox_top - 1;
                        ground = true;
                        yspeed = 0;
                    }
                }
                i = noone;
                break;
            }
            i = noone;
            if (i != noone)
            { }
            else
            {
                var maxIndex = index;
                i = noone;
                with (objBariIIIBody)
                {
                    if (owner == other.owner &amp;&amp; index &lt; maxIndex)
                    {
                        i = id;
                        break;
                    }
                }
                with (i)
                {
                    var dist = other.bbox_top - 1 - bbox_bottom;
                    var xdist = other.x - x;
                    shiftObject(xdist, dist, false);
                }
            }
        }
    }
}
owner = noone;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
