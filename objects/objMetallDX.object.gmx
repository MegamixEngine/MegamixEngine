<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMetallDX</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// They fly up to Mega Man and shoot three bullets down on him.
event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "mets, flying";

facePlayerOnSpawn = true;

behaviourType = 1;

// Enemy specific code
radius = 5 * 16; // Five blocks; the radius that MM needs to enter to trigger the shooting of the met
cooldownTimer = 0;
canShoot = true;

animTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(target))
    {
        if (xspeed == 0)
        {
            calibrateDirection();
        }
        if (distance_to_object(target) &lt;= radius)
        {
            if (canShoot)
            {
                canShoot = false;
                image_index = 1;
            }
        }
    }
    
    if (!canShoot)
    {
        if (animTimer &lt;= 0) //==0 &amp;&amp; cooldownTimer &lt;= 120)
        {
            animTimer = 6;
            if (image_index == 5)
            {
                image_index = 6;
            }
            else if (image_index == 6)
            {
                image_index = 5;
            }
        }
        else
        {
            animTimer -= 1;
        }
        
        cooldownTimer += 1;
        
        if (cooldownTimer == 6 &amp;&amp; image_index &lt; 5)
        {
            cooldownTimer = 0;
            image_index += 1;
        }
        else if (cooldownTimer == 8)
        {
            yspeed = -2;
            grav = 0;
            blockCollision = 0;
        }
        else if (cooldownTimer == 30)
        {
            yspeed = 0;
            xspeed = 2 * image_xscale;
        }
        else if (cooldownTimer == 32 &amp;&amp; !collision_line(x, y - 224, x, y + 224,
            target, false, true))
        {
            cooldownTimer -= 1;
        }
        else if (cooldownTimer == 33)
        {
            xspeed = 0;
            
            // Shoot
            var ID;
            ID = instance_create(x, spriteGetYCenter(), objMetallDXBullet);
            ID.dir = 45;
            ID.sprite_index = sprEnemyBullet;
            ID = instance_create(x, spriteGetYCenter(), objMetallDXBullet);
            ID.dir = 0;
            ID.sprite_index = sprEnemyBullet;
            ID = instance_create(x, spriteGetYCenter(), objMetallDXBullet);
            ID.dir = -45;
            ID.sprite_index = sprEnemyBullet;
            
            //playSFX(sfxEnemyShoot);
        }
        else if (cooldownTimer == 60)
        {
            xspeed = 0;
            yspeed = 2;
        }
        else if (cooldownTimer == 62 &amp;&amp; !collision_line(x - 256, y, x + 256, y, target, false, true))
        {
            cooldownTimer -= 1;
        }
        else if (cooldownTimer == 63)
        {
            yspeed = 0;
            xspeed = 2 * image_xscale;
        }
    }
}
else if (dead)
{
    grav = 0.25;
    blockCollision = 1;
    cooldownTimer = 0;
    canShoot = true;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_index == 0)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
