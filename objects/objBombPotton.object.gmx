<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBombPotton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 1;
contactDamage = 3;
grav = 0;
blockCollision = 0;
despawnRange = 4;
facePlayerOnSpawn = false;
category = "flying, nature";

//@cc Explosion lenght
explosionLenght = 3;

//@cc if false the explision will damage other enemies
onlyDamageMines=true;

//@cc Change colours: 0 (default) = green, 1 = blue
col = 0;

phase = 0;
timer = 0;
deccel = 0;
newX = -9999;

animFrame = 0;
animOffset = 0;

init = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (init)
{
    switch (col)
    {
        case 1:
            sprite_index = sprBombPottonBlue;
            break;
        default:
            sprite_index = sprBombPotton;
            break;
    }
    init = 0;
}

if (entityCanStep())
{
    animFrame += 0.2;
    if (floor(animFrame) &gt; 1)
        animFrame = 0;
    if (phase == 0)
    {
        animOffset = 0;
        if (yspeed &lt;= 0 || y &gt;= ystart)
        {
            grav = 0;
            yspeed = 0;
            phase = 1;
            timer = 0;
            newX = -9999;
        }
    }
    else if (phase == 1)
    {
        if (newX == -9999)
        {
            var last = noone;
            var dir = image_xscale;
            with (objBombPottonStopper)
            {
                if (!(other.bbox_top &lt;= bbox_bottom &amp;&amp; other.bbox_bottom &gt;= bbox_top) || place_meeting(x, y, other))
                    continue;
                if (dir == 1)
                {
                    if (x &lt;= other.x)
                        continue;
                    if (last == noone || (last != noone &amp;&amp; x &lt; last.x))
                    {
                        last = self;
                    }
                }
                else
                {
                    if (x &gt;= other.x)
                        continue;
                    if (last == noone || (last != noone &amp;&amp; x &gt; last.x))
                    {
                        last = self;
                    }
                }
            }
            if (last != noone)
            {
                newX = last.x;
            }
            else
            {
                newX = -666;
            }
            deccel = -999;
        }
        else
        {
            if (deccel == -999 &amp;&amp; abs(x - newX) &lt; 32)
            {
                if (abs(xspeed) &lt; 3)
                    xspeed = 3 * image_xscale;
                deccel = (xspeed * xspeed) / (2 * abs(x - newX));
                deccel *= image_xscale * -1;
            }
            if (newX != -666 &amp;&amp; /*( sign(newX-x) == -image_xscale ||*/ (abs(x - newX) &lt; 16) &amp;&amp; (xspeed == 0 || sign(xspeed) != image_xscale)) //))
            {
                phase = 2;
                timer = 0;
                xspeed = 0;
            }
            if (deccel == -999 &amp;&amp; (newX == -666 || phase == 1) &amp;&amp; abs(xspeed) &lt; 3)
            {
                xspeed += image_xscale * 0.25;
                if (abs(xspeed) &gt; 3)
                    xspeed = 3 * sign(xspeed);
            }
            if (deccel != -999 &amp;&amp; phase == 1)
            {
                xspeed += deccel;
            }
        }
    }
    else if (phase == 2)
    {
        if (timer == 0)
        {
            var i = instance_create(x - 2 * image_xscale, y + 6, objBombPottonBomb);
            animOffset = 1.99999;
            i.onlyDamageMines=onlyDamageMines;
            i.remaining = explosionLenght - 1;
            if (col == 1)
            {
                i.image_index = 1;
            }
        }
        timer += 1;
        if (timer &gt; 30)
        {
            timer = 0;
            phase = 1;
            newX = -9999;
        }
    }
    if (floor(animOffset) &gt; 0)
    {
        animOffset -= 0.1;
        if (floor(animOffset) &lt;= 0)
            animOffset = 0;
    }
    image_index = floor(animOffset) * 2 + floor(animFrame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    if (instance_exists(target) &amp;&amp; ((image_xscale == 1 &amp;&amp; target.x &gt; x) || (image_xscale == -1 &amp;&amp; target.x &lt; x)))
    {
        y = view_yview;
        yspeed = 5.678;
        grav = -(yspeed * yspeed) / (2 * abs(y - ystart));
    }
    else
    {
        dead = true;
        beenOutsideView = true;
    }
    animFrame = 0;
    animOffset = 0;
    phase = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
