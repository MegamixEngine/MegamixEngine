<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHanabiranFlower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

cAngle = 0;
cDistance = 8;
addAngle = 22.5;

blockCollision = false;
contactDamage = 4;
iFrames = 0;

hasFired = false;

curX = x;
curY = y;

parent = noone;

xspeed = 0;
yspeed = 0;
spd = 2;
grav = 0;

attackTimer = 0;
attackTimerMax = 8;

image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    if (instance_exists(parent))
    {
        attackTimer++;
        
        if (xspeed == 0 &amp;&amp; yspeed == 0)
        {
            x = round(curX + cos(degtorad(cAngle)) * cDistance);
            y = round(curY + sin(degtorad(cAngle)) * cDistance);
            image_index = -cAngle / 22.5;
        }
        else
        {
            image_index = cAngle / 22.5;
        }
        if (!hasFired)
        {
            if (attackTimer == attackTimerMax)
            {
                cAngle += addAngle;
                
                if (cAngle &gt;= 360)
                {
                    cAngle -= 360;
                }
                attackTimer = 0;
            }
            curX = parent.x + parent.headX[parent.image_index - 5];
            curY = parent.y;
        }
        else if (xspeed == 0 &amp;&amp; yspeed == 0)
        {
            if (instance_exists(target))
            {
                cAngle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                    spriteGetXCenterObject(target),
                    spriteGetYCenterObject(target));
            }
            else
            {
                cAngle = 0;
            }
            aimAtTarget(spd);
        }
        
        if (!insideView() || parent.dead)
            instance_destroy();
    }
    else
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!hasFired)
{
    with (parent)
    {
        if ((ceil(iFrames / 2) mod 4) || !iFrames)
        {
            if ((ceil(iFrames / 2) mod 2) || (iceTimer &gt; 0))
            {
                var flashcol = c_white;
                if (iceTimer &gt; 0)
                {
                    flashcol = make_color_rgb(0, 120, 255);
                }
                
                hitFlashEffect(true,flashcol);
                with (other)
                {
                    drawSelf();
                }
                draw_sprite_ext(sprHanabiranOverlay, image_index - 5, round(x), round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                hitFlashEffect(false);
                
                if (iceTimer &gt; 0)
                {
                    draw_set_blend_mode(bm_add);
                    with (other)
                    {
                        drawSelf();
                    }
                    draw_sprite_ext(sprHanabiranOverlay, image_index - 5, round(x), round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
                    draw_set_blend_mode(bm_normal);
                }
            }
            else
            {
                with (other)
                {
                    drawSelf();
                }
                draw_sprite_ext(sprHanabiranOverlay, image_index - 5, round(x), round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
            }
        }
    }
}
else
{
    drawSelf();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
