<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTerra</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskTerra</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
contactDamage = 4;

customPose = true;
ground = false;

attackTimer = 0;
hasTriggeredFall = false;
introType = 0;

// Unique variables
imgIndex = 0; // Controls image index
phase = 0; // What phase am I on?
doTeleport = false; // Can I currently teleport?
animTimer = 0; // For teleport flash

// @cc - How close can Mega Man be before I jump back away from him?
mmRadius = 96;

// @cc - Damage inflicted by Spark Chaser
laserDamage = 3;

// @cc - Sound of Spark Chaser
laserSFX = sfxSparkChaser;

// @cc - Regular sprite index
normalSprite = sprite_index;

// @cc - Teleport sprite index
teleportSprite = sprTerraTeleport;

// Health Bar
manualColors = true;
healthBarPrimaryColor[1] = global.nesPalette[$19];
healthBarSecondaryColor[1] = global.nesPalette[$29];

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 6;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objBusterShotHalfChargedProto, 1);
enemyDamageValue(objBusterShotChargedProto, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 4);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 4);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 0);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 0);
enemyDamageValue(objMagicCard, 0);

// MaG48HMML
enemyDamageValue(objFlameMixer, 2);
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 4);
enemyDamageValue(objHomingSniper, 0);

// MaG24HMML
enemyDamageValue(objWaterWave, 2);
enemyDamageValue(objSuperArmBlockProjectile, 6);
enemyDamageValue(objSuperArmDebris, 6);
enemyDamageValue(objChillSpike, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 4);
enemyDamageValue(objIceSlasher, 0);

reflectedDamage = -1;
if (reflectedDamage &gt; -1) 
enemyDamageValue(prtEnemyProjectile,reflectedDamage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // Terra's custom intro
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
        grav = gravAccel;
    }
    else if (isIntro)
    {
        // custom intro:
        if (!hasTriggeredFall)
        {
            imgIndex = 7;
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            hasTriggeredFall = true;
            y = ystart;
            attackTimer++;
            
            // Intro animation
            if (attackTimer == 4)
            {
                imgIndex = 8;
                playSFX(getGenericSFX(SFX_TELEIN,-1));
            }
            if (attackTimer == 8)
            {
                imgIndex = 9;
            }
            if (attackTimer == 12)
            {
                imgIndex = 7;
            }
            if (attackTimer == 16)
            {
                imgIndex = 0;
            }
            if (attackTimer == 40)
            {
                imgIndex = 2;
            }
            if (attackTimer == 52)
                imgIndex = 1;
            if (attackTimer == 70)
            {
                imgIndex = 2;
            }
            if (attackTimer == 82)
                imgIndex = 3;
            if (attackTimer == 120)
            {
                
                canFillHealthBar = true;
                isIntro = false;
                attackTimer = 0;
                grav = gravStart;
                blockCollision = blockCollisionStart;
            }
        }
    }
}

// Actual fight data
if (entityCanStep())
{
    if (isFight)
    {
        switch (phase)
        {
            case 0: // Choose next attack
                attackTimer++;
                if (attackTimer &gt;= 10)
                {
                    imgIndex = 1;
                    if (instance_exists(objTerraTimeStop)) // Attack if MM's frozen
                        phase = 1;
                    else
                        phase = choose(1,2);
                }
                break;
            case 1: // Fire Spark Chaser
                attackTimer++;
                if (attackTimer == 15) // Shoot
                {
                    with (instance_create(x+33*image_xscale, y+4, objTerraSparkChaser))
                    {
                        parent = other.id;
                        startDir = 180 * (other.image_xscale == -1);
                        contactDamage = other.laserDamage;
                        moveSFX = other.laserSFX;
                        playSFX(moveSFX);
                    }
                }
                if (attackTimer == 30) // Stand back up
                {
                    imgIndex = 0;
                    calibrateDirection();
                }
                if (attackTimer &gt; 30) // Wait for laser to vanish
                {
                    if (!instance_exists(objTerraSparkChaser)) &amp;&amp; (ground)
                    {
                        attackTimer = 0;
                        phase = 0;
                        exit;
                    }
                    
                    if (instance_exists(target)) // Mega Man has germs - jump away from him!
                    {
                        if (abs(target.x - x) &lt;= mmRadius)
                        {
                            imgIndex = 4;
                            xspeed = -1 * image_xscale;
                            yspeed = -4;
                            phase = 3;
                            //attackTimer = 0;
                        }
                    }
                }
                break;
            case 2: // Fire freeze ray
                attackTimer++;
                if (attackTimer == 15) // Shoot
                {
                    with (instance_create(x+33*image_xscale, y+4, objTerraFreezeRay))
                    {
                        image_xscale = other.image_xscale;
                        dir = 180 * (image_xscale == -1);
                    }
                }
                if (attackTimer == 30) // Wait for ray to vanish
                {
                    imgIndex = 0;
                    calibrateDirection();
                }
                if (attackTimer &gt; 30) // Always use Spark Chaser next
                {
                    if (instance_exists(objTerraTimeStop)) || (!instance_exists(objTerraFreezeRay)) //(attackTimer == 180)
                    {
                        imgIndex = 1;
                        attackTimer = 10;
                        phase = 1;
                    }
                }
                break;
            case 3: // Jump when Mega Man is close
                if ((image_xscale == -1) &amp;&amp; (x &gt;= view_xview+view_wview-16)) ||
                   ((image_xscale == 1) &amp;&amp; (x &lt;= view_xview+16))
                {
                    xspeed = 0;
                    doTeleport = true;
                }
                else // Keep moving back if we can
                {
                    if (xcoll != 0)
                    {
                        xspeed = -1 * image_xscale;
                    }
                }
                
                if (ycoll != 0) // After landing...
                {
                    xspeed = 0;
                    if (doTeleport) // High jump if we can teleport
                    {
                        yspeed = -8;
                        imgIndex = 4;
                        attackTimer = 0;
                        doTeleport = false;
                        phase = 4;
                    }
                    else // If we're not far enough to teleport, return to previous phase
                    {
                        imgIndex = 0;
                        calibrateDirection();
                        phase = 1;
                    }
                }
                break;
            case 4: // High jump teleport
                if (yspeed == 0) || (y &lt;= view_yview + 16) // Start flashing
                {
                    if (grav != 0)
                    {
                        grav = 0;
                        yspeed = 0;
                        canHit = false;
                    }
                    attackTimer++;
                    
                    if (attackTimer &lt; 90) // Pre-teleport flash
                    {
                        var animTable = makeArray(4,5,6);
                        imgIndex = animTable[animTimer div 1];
                        animTimer++;
                        if (animTimer &gt;= 3)
                            animTimer = 0;
                    }
                    if (attackTimer == 20) //Begin teleport animation
                    {
                        sprite_index = teleportSprite;
                        iFrames = 0;
                        animTimer = 0;
                        canDamage = false;
                        imgIndex = 0;
                        phase = 5;
                        attackTimer = 0;
                        playSFX(sfxEnkerCharge);
                    }
                }
                break;
            case 5: // Teleport
                if (sprite_index == teleportSprite)
                {
                    if (imgIndex &lt; 10)
                        imgIndex += 0.4;
                    else // Do all this after we've actually vanished
                    {
                        attackTimer++;
                        
                        if (attackTimer == 89) // Warp to other side of the screen
                        {
                            if (instance_exists(target))
                            {
                                if (target.x &gt; view_xview + 128)
                                {
                                    x = view_xview + 48;
                                    image_xscale = 1;
                                }
                                else
                                {
                                    x = (view_xview + view_wview) - 48;
                                    image_xscale = -1;
                                }
                            }
                        }
                        if (attackTimer == 90)
                        {
                            imgIndex = 9;
                        }
                        if (attackTimer == 94) // Reappear
                        {
                            imgIndex = 4;
                            sprite_index = normalSprite;
                            canDamage = true;
                        }
                    }
                }
                else // After I've teleported...
                {
                    attackTimer++;
                    if (attackTimer &gt; 94) &amp;&amp; (attackTimer &lt; 114) // Post-teleport flash
                    {
                        var animTable = makeArray(4,5,6);
                        imgIndex = animTable[animTimer div 1];
                        animTimer++;
                        if (animTimer &gt;= 3)
                            animTimer = 0;
                    }
                    if (attackTimer == 114) // Drop to ground
                    {
                        imgIndex = 4;
                        grav = 0.25;
                        canHit = true;
                        animTimer = 0;
                    }
                    if (ycoll != 0) // Once I've landed on the ground...
                    {
                        imgIndex = 0;
                        phase = 0;
                        attackTimer = 0;
                        calibrateDirection();
                    }
                }
                break;
        }
    }
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index == objPharaohShot)
{
    with (objPharaohShot)
    {
        if (sprite_index = sprPharaohShotCharged)
        {
            extraDamage = 4;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with (objTerraSparkChaser)
    instance_destroy();
with (objTerraFreezeRay)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
