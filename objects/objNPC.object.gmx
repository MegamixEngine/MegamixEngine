<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVoltIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>maskNPC</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// for tweaking its physics, use the creation code variables of prtEntity

// option[0-4] = "string here" (sets the option you can choose, anywhere between 1 to 5)
// option_text[0-4] = "string here" (sets the text they will say after choosing this option)
// option_script_on_talk_start[0-4] (script to execute after their dialogue starts upon choosing this option)
// option_script_on_talk_end[0-4] (script to execute after their dialogue finishes upon choosing this option)
event_inherited();

respawnRange = -1;
despawnRange = -1;

contactDamage = 0;
canHit = false;

active = false;

//@cc sets the name in their dialogue box (if none is provided, the textbox is compressed)
name = 'Volt Man';

//@cc sets the color of the name in their dialogue box
name_color = c_white;

//@cc sets the text in their dialogue box (can support an array of text)
text = 'I have nothing to say.';

//@cc sets the sprite used for the mugshot in the dialogue box
 //NOTE: if this is set to sprMegaman, then the textbox name and mugshot is overridden by the player's name and mugshot
mugshot_sprite = sprGenericMugshots; //

//@cc the starting frame of the mugshot animation
mugshot_start = 0;

//@cc the ending frame of the mugshot animation
mugshot_end = 0;

//@cc the speed of the mugshot animation
mugshot_speed = 0;

//Used for conversations in same npc

//@cc alt name for 2nd person talking
name_alt = getPlayerName("Mega Man");

//@cc alt name color for 2nd person talking
name_color_alt = getPlayerNameColor();

//@cc sets the sprite used for 2nd mugshot in dialogue box
mugshot_sprite_alt = -1;

//@cc the starting frame of the 2nd mugshot animation
mugshot_start_alt = 0;

//@cc the ending frame of the 2nd mugshot animation
mugshot_end_alt = 0;

//@cc the speed of the 2nd mugshot animation
mugshot_speed_alt = 0;

//@cc the skin for their textbox
textbox_skin = "regular";

//@cc sfx when text is typing (-1 = no sound)
text_blip = -1;

//@cc how fast their text gets typed (0.5 means it takes 2 frames for one char to get typed)
text_speed = 0.5;

//@cc set the position of the textbox (0 - top, 1- bottom)
text_position = 0;

//@cc can advance in text manually
text_can_skip = true;

// options;
for (var i = 0; i &lt;= 4; i += 1) {
    option[i] = "";
    option_text[i] = ""; // Array of text supported here too
    option_script_on_talk_start[i] = 0;
    option_script_on_talk_end[i] = 0;
    option_code_on_talk_start[i] = "";
    option_code_on_talk_end[i] = "";
}

// idle animation:

//@cc sets the sprite they use for their idle animation) (becomes the default of all of the other animations if the rest aren't set
idle_sprite = sprite_index;

//@cc the starting frame of their idle animation
idle_start = 0;

//@cc the ending frame of their idle animation
idle_end = sprite_get_number(idle_sprite) - idle_start;

//@cc the speed of the idle animation
idle_speed = 0.1;

// idle talking:

//@cc sets the sprite of their talking animation (default is the same as the idle animation)
talk_sprite = sprVoltThrowShield;

//@cc the starting frame of their talking animation
talk_start = 0;

//@cc the ending frame of their talking animation
talk_end = sprite_get_number(talk_sprite) - talk_start;

//@cc the speed of the talk animation
talk_speed = idle_speed;

//@cc if the talk animation will loop or not
talk_loop = true;

// collision

//@cc sets the mask used for collision (default: knight man)
mask = maskNPC;
mask_index = mask;
standardPhysics = true;

//@cc distance ahead that mega man checks when pressing up to talk
talk_distance = 12;

// details:

//@cc constantly turns to face the player as the player moves around
face_player = false;

//@cc even if face_player is true, will not turn to face if player is closer than this
face_player_distance = 8;

//@cc if true, turns towards the player when talked to, and returns to previous direction when done [unless face_player is true]
face_player_on_talk = true;

//@cc script to execute when talked to
script_on_talk_start = 0;

//@cc script to execute when finished talking
script_on_talk_end = 0;

//@cc code to execute when talked to
code_on_talk_start = "";

//@cc code to execute when finished talking
code_on_talk_end = "";

//@cc if set, save to cutscene enum block. Make sure they're added to the cutscene script.
// Cutscenes.CUTSCENE_NAME
save_on_talk_end = -1;
//@cc sets the text in their dialogue box to change afters if not -1(can support an array of text)
save_text_change = -1;

// private:

_prev_direction = 1;
prev_index = 0; // Used for mugshots

option_chosen = -1;
option_spoken = false;

_im = 0;

showarrow = 0;
npcID = id;

playerID = 0;
behaviourType = 1;
//@cc
arrow_x = 0; // if not 0, then the arrow is drawn in a certain position instead of automatically determined.
arrow_y = 0; // if not 0, then the arrow is drawn in a certain position instead of automatically determined.

text_array_pos = 0;
option_text_array_pos = 0;
animationOverride = false; //if you need a npc to override the npc animation code, set to true;


enemyLock = noone; //if set to a object, npc location is set;
lockX = true; // lock to above x
lockY = false; //lock to above y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_inherited();

if (!global.frozen &amp;&amp; !dead) 
{
    if (instance_exists(enemyLock))
    {
        if (lockX)
            x = enemyLock.x;
        if (lockY)
            y = enemyLock.y;
    }
    // Idle animation / facing the player (only stationary npcs)
    if (object_get_name(object_index) != "objNPCMobile") {
        if (face_player) {
            xtarg = x;
            
            if (instance_exists(target))
                xtarg = target.x;
            
            if (abs(x - xtarg) &gt; face_player_distance)
                calibrateDirection();
        }
    }
    
    with (target) { // Initiate talking
        if (!playerIsLocked(PL_LOCK_PAUSE)) {
            if (place_meeting(x + (other.talk_distance * image_xscale), y, other)) {
                with (other) {
                    if (ground || !standardPhysics) {
                        if (global.keyUpPressed[other.playerID] &amp;&amp; !other.climbing) {
                            var textbox;
                            
                            playerID = other.playerID;
                            text_array_pos = 0;
                            option_text_array_pos = 0;
                            
                            /*if (is_array(text))
                                textbox = spawnTextBoxUsingArray(text_position, 0, name, name_color, text);
                            else
                                textbox = spawnTextBoxSingleString(text_position, 0, name, name_color, text);*/
                            
                             
                            if (mugshot_sprite != sprMegaman)
                            {
                                if (is_array(text))
                                {
                                    if (!is_array(text[0]))
                                        textbox = spawnTextBoxUsingArray(text_position, 0, name, name_color, text);
                                    else
                                        textbox = spawnTextBoxUsingArray(text_position, 0, name, name_color, text[0]);
                                }
                                else
                                    textbox = spawnTextBoxSingleString(text_position, 0, name, name_color, text);
                                    
                                addMugshot(mugshot_sprite, mugshot_start, mugshot_end, mugshot_speed);
                                
                            }
                            else
                            {
                                if (is_array(text))
                                {
                                    if (!is_array(text[0]))
                                        textbox = spawnTextBoxUsingArray(text_position, 0, getPlayerName("Mega Man"), getPlayerNameColor(), text);
                                    else
                                        textbox = spawnTextBoxUsingArray(text_position, 0, getPlayerName("Mega Man"), getPlayerNameColor(), text[0]);
                                }
                                else
                                    textbox = spawnTextBoxSingleString(text_position, 0, getPlayerName("Mega Man"), getPlayerNameColor(), text);
                                    
                                addMugshot(-1, 0, 0, 0);
                                
                            }
                            setTextboxSkin(textbox_skin);
                            setTextboxTyping(text_speed, 4, text_blip);
                            if (!text_can_skip)
                                textbox.canSkipText = false;
                            textbox.playerID = other.playerID;
                            
                            if !(is_array(text) &amp;&amp; is_array(text[0]))
                            {
                                var option_count = array_length_1d(option);
                                for (var i = 0; i &lt; option_count; i++) {
                                    if (option[i] == "")
                                        break;
                                    
                                    addChoice(option[i]);
                                }
                            }
                            
                            active = true;
                            option_spoken = false;
                            _prev_direction = image_xscale;
                            
                            if (face_player_on_talk)
                                calibrateDirection();
                            with (objMegaman)
                            {
                                if (playerID == other.playerID)
                                    calibrateDirection();
                            }
                            
                            event_user(1); // start dialogue
                            //global.frozen = 1; // this is redundant...
                        }
                    }
                }
            }
        }
    }
}

if (!animationOverride)
{
    if (!active) 
    {
        if (object_index != objNPCMobile &amp;&amp; !object_is_ancestor(object_index, objNPCMobile))
        {
            sprite_index = idle_sprite;
            
            if (!global.frozen)
                animationLoop(idle_start, idle_end, idle_speed);
        }
    }
    else 
    {
        sprite_index = talk_sprite;
        
        if (talk_loop || (image_index &lt; talk_end &amp;&amp; !talk_loop))
            animationLoop(talk_start, talk_end, talk_speed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle two-person option text
var chosen_option_text = option_text[option_chosen],
    textbox;

if (is_array(chosen_option_text))
{
    if (is_array(chosen_option_text[0]))
    {
        option_text_array_pos ++;
        if (option_text_array_pos &lt; array_length_1d(chosen_option_text))
        {
            canSpawnOptionTextbox = false;
            
            if (option_text_array_pos % 2 == 0)
            {
                textbox = spawnTextBoxUsingArray(text_position, 3, name, name_color, chosen_option_text[option_text_array_pos]);
                addMugshot(mugshot_sprite, mugshot_start, mugshot_end, mugshot_speed, textbox);
            }
            else
            {
                textbox = spawnTextBoxUsingArray(text_position, 3, name_alt, name_color_alt, chosen_option_text[option_text_array_pos]);
                addMugshot(mugshot_sprite_alt, mugshot_start_alt, mugshot_end_alt, mugshot_speed_alt, textbox);
            }
            
            setTextboxSkin(textbox_skin, textbox);
            setTextboxTyping(text_speed, 4, text_blip, textbox);
            
            textbox.image_index = prev_index;
            textbox.playerID = playerID;
        }
    }
}

active = false;
global.frozen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on dialogue box destroyed
var canExecute = false,
    executeLocked = false;
    
if (option_text[0] != "" &amp;&amp; option_spoken &amp;&amp; !global.frozen &amp;&amp; !executeLocked &amp;&amp; !active) {
    executeLocked = true;
    canExecute = true;
}

if (is_array(text))
{
    if (is_array(text[0]))
    {
        if (text_array_pos &lt; array_length_1d(text))
            exit;
    }
}

if (option_spoken)
{
    var chosen_option_text = option_text[option_chosen];

    if (is_array(chosen_option_text))
    {
        if (is_array(chosen_option_text[0]))
        {
            if (option_text_array_pos &lt; array_length_1d(chosen_option_text))
                exit;
        }
    }
}

active = 0;
global.frozen = 0;

// return to previous orientation, whether it was the same or not -- unless face_player is true
if (!face_player)
    image_xscale = _prev_direction;
    
if (script_on_talk_end != 0 &amp;&amp; option_chosen == -1)
    script_execute(script_on_talk_end);
else if (option_chosen != -1 &amp;&amp; option_spoken &amp;&amp; option_script_on_talk_end[option_chosen] != 0 &amp;&amp; canExecute)
    script_execute(option_script_on_talk_end[option_chosen]);

if (code_on_talk_end != "" &amp;&amp; option_chosen == -1)
    stringExecutePartial(code_on_talk_end);
else if (option_chosen != -1 &amp;&amp; option_spoken &amp;&amp; option_code_on_talk_end[option_chosen] != "" &amp;&amp; canExecute)
    stringExecutePartial(option_code_on_talk_end[option_chosen]);
    
if (save_on_talk_end != -1)
{
    arrayAppendUnique(global.cutscenesPlayed, save_on_talk_end);
    saveLoadGame(true, false, false);
    save_on_talk_end = -1;
    if (save_text_change != -1)
    {
        text = save_text_change;
    }
    //playSFX(sfxHonk);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start dialogue
// sprite_index = talk_sprite;
// image_speed = talk_speed;
active = true;

if (script_on_talk_start != 0)
    script_execute(script_on_talk_start);

if (code_on_talk_start != "")
    stringExecutePartial(code_on_talk_start);

global.frozen = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end dialogue
var canSpawnOptionTextbox = true;

if (is_array(text))
{
    if (is_array(text[0]))
    {
        text_array_pos ++;
        if (text_array_pos &lt; array_length_1d(text))
        {
            canSpawnOptionTextbox = false;
            
            if (text_array_pos % 2 == 0)
            {
                textbox = spawnTextBoxUsingArray(text_position, 0, name, name_color, text[text_array_pos]);
                addMugshot(mugshot_sprite, mugshot_start, mugshot_end, mugshot_speed, textbox);
                active = true;
            }
            else
            {
                textbox = spawnTextBoxUsingArray(text_position, 0, name_alt, name_color_alt, text[text_array_pos]);
                addMugshot(mugshot_sprite_alt, mugshot_start_alt, mugshot_end_alt, mugshot_speed_alt, textbox);
            }
            
            if (text_array_pos == array_length_1d(text) - 1)
            {
                var option_count = array_length_1d(option);
                for (var i = 0; i &lt; option_count; i++) {
                    if (option[i] == "")
                        break;
                                    
                    addChoice(option[i], textbox);
                }
            }
            
            setTextboxSkin(textbox_skin, textbox);
            setTextboxTyping(text_speed, 4, text_blip, textbox);
            
            textbox.image_index = prev_index;
            textbox.playerID = playerID;
            
            global.frozen = 1;
        }
    }
}

if (option_chosen != -1 &amp;&amp; !option_spoken &amp;&amp; option_text[option_chosen] != "" &amp;&amp; canSpawnOptionTextbox)
{
    var chosen_option_text = option_text[option_chosen],
        textbox;
    
    /*if (is_array(chosen_option_text))
        textbox = spawnTextBoxUsingArray(text_position, 0, name, name_color, chosen_option_text);
    else
        textbox = spawnTextBoxSingleString(text_position, 0, name, name_color, chosen_option_text);
    
    addMugshot(mugshot_sprite, mugshot_start, mugshot_end, mugshot_speed, textbox);*/
    
    if (mugshot_sprite != sprMegaman)
    {
        if (is_array(chosen_option_text))
        {
            if (is_array(chosen_option_text[0]))
                textbox = spawnTextBoxUsingArray(text_position, 3, name, name_color, chosen_option_text[0]);
            else
                textbox = spawnTextBoxUsingArray(text_position, -1, name, name_color, chosen_option_text);
        }
        else
            textbox = spawnTextBoxSingleString(text_position, -1, name, name_color, chosen_option_text);
        
        addMugshot(mugshot_sprite, mugshot_start, mugshot_end, mugshot_speed, textbox);
        
    }
    else
    {
        if (is_array(chosen_option_text))
        {
            if (is_array(chosen_option_text[0]))
                textbox = spawnTextBoxUsingArray(text_position, 3, getPlayerName("Mega Man"), getPlayerNameColor(), chosen_option_text[0]);
            else
                textbox = spawnTextBoxUsingArray(text_position, -1, getPlayerName("Mega Man"), getPlayerNameColor(), chosen_option_text);
        }
        else
            textbox = spawnTextBoxSingleString(text_position, -1, getPlayerName("Mega Man"), getPlayerNameColor(), chosen_option_text);
            
        addMugshot(-1, 0, 0, 0);
        
    }
    
    setTextboxSkin(textbox_skin, textbox);
    setTextboxTyping(text_speed, 4, text_blip, textbox);
    
    dispelUtilities();
    
    textbox.boxOffset = 0;
    textbox.image_index = prev_index;
    textbox.playerID = playerID;
    
    option_spoken = true;
    
    if (option_script_on_talk_start[option_chosen] != 0)
        script_execute(option_script_on_talk_start[option_chosen]);
        
    if (option_code_on_talk_start[option_chosen] != "")
        stringExecutePartial(option_code_on_talk_start[option_chosen]);
        
    active = true;
    global.frozen = 1;
    

    // exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code setup stuff
if (string_length(name) &gt; 27)
    name = string_copy(name, 0, 27);

// make custom idle sprites the default sprites for unset sprites
if (idle_sprite != sprVoltIdle) {
    if (talk_sprite == sprVoltThrowShield)
        talk_sprite = idle_sprite;
    
    // Changes the sprite so we don't see the NPC as Volt Man.
    if (sprite_index == sprVoltIdle)
        sprite_index = idle_sprite;
    
    // set the mask
    if (mask != maskNPC)
        mask_index = mask;
        
    image_index = idle_start;
    if (face_player)
        calibrateDirection();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
var mePlayer = instance_nearest(x,y,objMegaman);
with (target)
{ // Initiate talking
    if (!playerIsLocked(PL_LOCK_PAUSE))
    {
        if (place_meeting(x + (other.talk_distance * image_xscale), y, other))
        {
            with (other)
            {
                var prompt = "up";
                var xx = bboxGetXCenter() - 4;
                if (arrow_x != 0)
                    xx = arrow_x;
                
                var yy = bbox_top - 12;
                if (arrow_y != 0)
                    yy = arrow_y;
                
                drawButtonPrompt(prompt, xx, yy, 1,mePlayer.playerID);
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
