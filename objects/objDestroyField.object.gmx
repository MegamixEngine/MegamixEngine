<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDestroyField</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroys objects and tiles in the area at room start time.

//@cc destroy instances of prtEntity?
destroyEntities = false;

//@cc destroy any object (including prtEntity?), except collision objects (objSolid, objSpike, etc.)
destroyObjects = false;

//@cc destroy solids
destroySolids = true;

//@cc delete tiles
destroyTiles = true;

//@cc what layer of tiles to delete
destroyTilesDepth = 1000000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(id))
{
    exit;
}

var solids;
solids[0] = objSolid;
solids[1] = objLadder;
solids[2] = objTopSolid;

// destroy all objects
if (destroyObjects)
{
    with (all)
    {
        if (indexOf(solids, object_index) == -1)
            continue;
        if (id != other.id &amp;&amp; place_meeting(x, y, other))
        {
            instance_destroy();
        }
    }
} // destroy just entities
else if (destroyEntities)
{
    with (prtEntity)
    {
        if (place_meeting(x, y, other))
        {
            instance_destroy();
        }
    }
}

// destroy solids &amp; co.
if (destroySolids)
{
    for (var i = 0; i &lt; array_length_1d(solids); i++)
    {
        with (solids[i])
        {
            if (place_meeting(x, y, other))
            {
                instance_destroy();
            }
        }
    }
}

// delete tiles
if (destroyTiles)
{
    for (var _x = roundTo(bbox_left, 8) + 4; _x &lt; roundTo(bbox_right, 8); _x += 8)
    {
        for (var _y = roundTo(bbox_top, 8) + 4; _y &lt; roundTo(bbox_bottom, 8); _y += 8)
        {
            tile_layer_delete_at(destroyTilesDepth, _x, _y);
        }
    }
}

// no need for this to stick around
instance_destroy();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
