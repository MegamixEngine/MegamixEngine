<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEnergyElement</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPickup</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

despawnRange = -1;

faction = 3;
contactDamage = 0;
canHit = false;

stopOnFlash = false;

respawnupondeath = 1;
grabable = 0;

jumped = 0;

sparkletimer = 0;
primarycol = 0;
secondarycol = 0;

timer = 0;

name = "";

alreadyCollected = false;
energyElementLock = false;

script = scrNoEffect;
code = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (yspeed &gt; 0)
    {
        jumped = 0;
    }
    
    if (y &gt;= global.sectionBottom - 8)
    {
        yspeed = -9;
        jumped = 1;
    }
    
    if (instance_exists(target))
    {
        if (xspeed == 0)
        {
            if (jumped &amp;&amp; yspeed &lt; 0)
            {
                xspeed = arcCalcXspeed(yspeed, grav, bboxGetXCenter(), bboxGetYCenter(), target.x, target.y);
            }
        }
        
        // move to player if inside solid object
        if (checkSolid(0, 0,1,1))
        {
            aimAtPoint(4, view_xview + (view_wview/2), view_yview + (view_hview/2));
            /*var cy = y - target.y;
            var cx = x - target.x;
            
            if (abs(cy) &gt; 4)
            {
                y -= cy;
            }
            else if (abs(cx) &gt; 4)
            {
                x -= cx;
            }*/
        }
    }
    
    if (!timer)
    {
        if (!(sparkletimer mod 6))
        {
            if (!indexOf(global.elementsCollected, name))
            {
                primarycol = choose(global.primaryCol[0], global.secondaryCol[0], c_white, make_color_rgb(255, 228, 164));
                do
                {
                    secondarycol = choose(global.primaryCol[0], global.secondaryCol[0], c_white, make_color_rgb(255, 228, 164));
                }
                    until (primarycol != secondarycol)
                
                if (!(sparkletimer mod 12))
                {
                    with (instance_create(bboxGetXCenter(), bboxGetYCenter(), objSlideDust))
                    {
                        sprite_index = sprShine;
                        image_xscale = choose(1, -1);
                        direction = irandom(360);
                        rotationMovement(xstart, ystart, irandom_range(5, 12), 0);
                    }
                }
            }
            else // element already collected
            {
                alreadyCollected = true;
                primarycol = global.nesPalette[0];
                secondarycol = global.nesPalette[13];
            }
        }
        
        sparkletimer++;
    }
    else
    {
        timer++;
        
        if (timer &gt;= 360) // players beam out
        {
            playerFreeMovement(energyElementLock);
            
            with (objMegaman)
            {
                var i = instance_create(x, y, objMegamanExit);
                i.pid = playerID;
                i.cid = costumeID;
                
                visible = 0;
                instance_destroy();
            }
            
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!timer)
{
    playMusic('Mega_Man_10.nsf', "VGM", 19, 0, 0, false, 1);
    playSFX(sfxElementGrab);
    
    for (var j = 0; j &lt; global.playerCount; j += 1) // Refill stuff
    {
        global.playerHealth[j] = 28;
        for (var i = 0; i &lt;= global.totalWeapons; i += 1)
        {
            global.ammo[j, i] = 28;
        }
    }
    
    energyElementLock = playerLockMovement();
    
    
    visible = 0;
    timer = 1;
    
    // global effect of attaining the element
    if (!alreadyCollected)
    {
        arrayAppend(global.elementsCollected, name);
        script_execute(script);
        stringExecutePartial(code);
        
        // update count of number of elements collected:
        global.energyElements = array_length_1d(global.elementsCollected) - numberOf(global.elementsCollected, "");
    }
    
    // save the game file
    saveLoadGame(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    drawSelf();
    draw_sprite_ext(sprite_index, 1, round(x), round(y), image_xscale, image_yscale, image_angle, primarycol, image_alpha);
    draw_sprite_ext(sprite_index, 2, round(x), round(y), image_xscale, image_yscale, image_angle, secondarycol, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
