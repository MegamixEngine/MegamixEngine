<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNibul</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A flying enemy that waits in position, races toward the player, and then retreats out of reach. Its attack carries an unusual toxin.
/// The toxin makes the player move slower and jump higher (similar to Fooley from GB V). Using creation code, you can reskin Nibul to its cousin Jupibul.
/// If you use this enemy, make sure the toxin effect will go to good use. Otherwise, consider Sibul from GB V or Hornet Racer from CFTF instead.

event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "flying, nature";
grav = 0;

blockCollision = 0;
facePlayerOnSpawn = true;

// Enemy Specific Code
moveTimer = 120;
phase = 0;
init = 1;

// @cc - Sets Nibul's sprite: 0 = Nibul, 1 = Jupibul
col = 0;

// @cc - Sets toxin duration
toxinTimerMax = 360;

targX = 0;
targY = 0;
toxin = false;
imgIndex = 0;
imgSpd = 0.5;
toxinTimer = toxinTimerMax;
drawTimer = 4;
animBack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Animation
    if (animBack == false)
    {
        imgIndex += imgSpd;
        if (imgIndex &gt;= 3)
        {
            imgIndex = 1;
            animBack = true;
        }
    }
    else
    {
        imgIndex -= imgSpd;
        if (imgIndex &lt; 0)
        {
            imgIndex = 1;
            animBack = false;
        }
    }
    
    // Movement
    switch (phase)
    {
        case 0:
            if (instance_exists(target)) || (targX != 0 &amp;&amp; targY != 0)
                moveTimer--;
            if (moveTimer &gt; 0)
                calibrateDirection();
            
            if (moveTimer &lt;= 0)
            {
                if (moveTimer == 0)
                {
                    if (instance_exists(target))
                    {
                        targX = target.x;
                        targY = target.y;
                    }
                }
                moveTowardPoint(targX, targY, 3);
                
                if (distance_to_point(targX, targY) &lt; 3) // else
                {
                    yspeed = -2;
                    xspeed = 0;
                    phase = 1;
                }
            }
            break;
            case 1:
                if (bbox_top &lt;= view_yview)
                {
                    calibrateDirection();
                    
                    yspeed = 0;
                    moveTimer = 120;
                    phase = 0;
                    targX = 0;
                    targY = 0;
                }
                break;
    }
        
    // Toxin effects
    if (toxin) &amp;&amp; (instance_exists(target))
    {
        with (target)
        {
            // if there is no status effect object for current player, create one.
            if (!instance_exists(objToxinHandler))
                instance_create(x,y,objToxinHandler);
        }
        
        toxinTimer--;
        if (toxinTimer == 0)
        {
            toxin = false;
            with (objToxinHandler)
                instance_destroy();
        }
    }
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    imgIndex = 0;
    phase = 0;
    moveTimer = 120;
    targX = 0;
    targY = 0;
    toxin = false;
    toxinTimer = toxinTimerMax;
    animBack = false;
    drawTimer = 4;
    if (col)
        sprite_index = sprJupibul;
}
else
{
    with (objToxinHandler)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!toxin)
{
    with (other)
    {
        if (!instance_exists(objToxinHandler))
        {
            with(instance_create(x,y,objToxinHandler))
            {
                parent = other.id;
                inkStatus = other.inked;
                gravOriginal = other.gravfactor;
            }
        }
    }
    toxin = true;
    with (objNibul) // Set all active Nibuls to use synchronised variables
    {
        toxin = true;
        toxinTimer = other.toxinTimerMax;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
