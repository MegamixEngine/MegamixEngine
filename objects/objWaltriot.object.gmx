<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWaltriot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Put this enemy on a wall or he will commit seppuku
// Note: don't change its image_xscale/image_yscale in the editor, rotate it instead
// Note: make sure its aligned with the solid you want it to move on

event_inherited();
healthpointsStart = 2;
healthpoints = 2;
contactDamage = 3;
blockCollision = false;
facePlayerOnSpawn = false;
grav = 0;
image_xscale = 1;
image_yscale = 1;

// Creation code:

//@cc movement speed
spd = 1.65; // Speed

//@cc how much it moves in each direction(from it's perspective) -1 -&gt;unlimited
leftLimit = 32;

//@cc
rightLimit = 32;

//@cc How many pixels it moves before launching a missile
shootAfter = 128;

//@cc direction in which it will move when it spawns(from its perspective);
//@cc 1:right, -1:left;
startDir = 1;

//@cc Color
//@cc 0:blue, 1:pink
col = 0;

phase = 0;
timer = 0;
dir = 1;
pixelsMoved = 0;
myMissile = noone;
animFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xprevious = x;
yprevious = y;
event_inherited();

if (entityCanStep())
{
    var myRad = degtorad(image_angle + 90);
    if (!checkSolid(-cos(myRad) * 8, sin(myRad) * 8))
    {
        event_user(EV_DEATH);
        exit;
    }
    
    var xdir = cos(degtorad(image_angle));
    var ydir = -sin(degtorad(image_angle));
    var destRX = xstart + xdir * rightLimit;
    var destRY = ystart + ydir * rightLimit;
    var destLX = xstart - xdir * leftLimit;
    var destLY = ystart - ydir * leftLimit;
    
    var stop = false;
    var reverse = false;
    if (xspeed != 0 || yspeed != 0)
    {
        if (rightLimit != -1 &amp;&amp; dir == 1 &amp;&amp; sign(destRX - x) == -sign(dir * xdir) &amp;&amp; sign(destRY - y) == -sign(dir * ydir))
        {
            stop = true;
            reverse = true;
            x = destRX;
            y = destRY;
        }
        else if (leftLimit != -1 &amp;&amp; dir == -1 &amp;&amp; sign(destLX - x) == -sign(dir * xdir) &amp;&amp; sign(destLY - y) == -sign(dir * ydir))
        {
            stop = true;
            reverse = true;
            x = destLX;
            y = destLY;
        }
    }
    timer += 1;
    if (!instance_exists(myMissile) &amp;&amp; timer == 30 &amp;&amp; pixelsMoved &gt;= shootAfter)
    {
        myMissile = instance_create(x + cos(myRad) * 8, y - sin(myRad) * 8, objWaltriotMissile);
        myMissile.angle = round(wrapAngle(image_angle + 90) / 45) * 45;
        myMissile.newAngle = myMissile.angle;
        myMissile.col = col;
        animFrame = 1;
        pixelsMoved = 0;
        playSFX(sfxMissileLaunch);
    }
    if (timer &gt; 60)
    {
        xspeed = spd * xdir * dir;
        yspeed = spd * ydir * dir;
        timer = 61;
    }
    else if (animFrame == 0 &amp;&amp; timer &gt; 30)
    {
        timer = 61;
    }
    
    if (xspeed != 0 || yspeed != 0)
    {
        if (checkSolid(xspeed, yspeed, 1) || !checkSolid(16 * dir * xdir - 8 * cos(myRad), 16 * dir * ydir + 8 * sin(myRad), 1))
        {
            stop = true;
            reverse = true;
        }
    }
    if (!instance_exists(myMissile) &amp;&amp; (xspeed != 0 || yspeed != 0))
    {
        if (!stop)
            pixelsMoved += abs(x - xprevious) + abs(y - yprevious);
        if (pixelsMoved &gt;= shootAfter)
        {
            stop = true;
        }
    }
    
    if (animFrame &gt; 0)
    {
        if (floor(animFrame) != 2)
        {
            animFrame += 0.135;
        }
        else
            animFrame += 0.05;
        if (floor(animFrame) &gt; 4)
        {
            animFrame = 0;
        }
    }
    if (stop)
    {
        xspeed = 0;
        yspeed = 0;
        timer = 0;
        if (reverse)
            dir *= -1;
    }
    image_index = col * 5 + floor(animFrame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
phase = 0;
timer = 0;
dir = sign(startDir);
image_xscale = 1;
image_yscale = 1;
pixelsMoved = shootAfter;
myMissile = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
