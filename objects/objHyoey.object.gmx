<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHyoey</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
doesIntro = false;

healthpointsStart = 9;
healthpoints = healthpointsStart;
contactDamage = 6;

blockCollision = false;
grav = 0;

category = "flying";
facePlayer = true;

// Enemy specific code
phase = 0;
image_speed = 1;
moveTimer = 120;
shootTimer = 60;
accel = 0.05;
cosCounter = 0;
sinCounter = 0;
dives = 0;
ySpePrev = 0;
missile = noone;
safety = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            if (dives &gt; 0)
            {
                sinCounter += .065;
                ySpePrev = sign(yspeed);
                yspeed = sin(sinCounter) * 1.3;
                
                if (sign(yspeed) != ySpePrev)
                {
                    dives--;
                }
            }
            else
            {
                cosCounter += .135;
                yspeed = -(cos(cosCounter) * 0.5);
                
                moveTimer--;
                if (moveTimer &lt;= 0)
                {
                    xspeed += accel * image_xscale;
                    yspeed = 0;
                    phase = 1;
                }
            }
            break;
        case 1: // Bob up and down 
            cosCounter += .135;
            yspeed = -(cos(cosCounter) * 0.5);
            
            // Move horizontally
            if (xspeed != 2 * image_xscale)
            {
                xspeed += accel * image_xscale;
            }
            
            // Failsafes against going offscreen
            if ((bbox_left &lt; view_xview + 32) &amp;&amp; (image_xscale == -1))
            {
                if (xspeed != 0)
                {
                    xspeed += 0.10;
                }
            }
            
            if ((bbox_right &gt; (view_xview + view_wview) - 32) &amp;&amp; (image_xscale == 1))
            {
                if (xspeed != 0)
                {
                    xspeed -= 0.10;
                }
            }
            
            // If not moving, attack
            if (xspeed == 0)
            {
                phase = 0;
                moveTimer = 60;
                if (sign(yspeed) == 1)
                {
                    dives = 6;
                }
                else
                {
                    dives = 7;
                }
            }
            break;
    }
    
    shootTimer--;
    if (shootTimer == 0)
    {
        var i = instance_create(x + 10 * image_xscale, y + 10, objEnemyBullet);
        i.xspeed = 2 * image_xscale;
        i.yspeed = 2;
        playSFX(sfxEnemyShootClassic);
    }
    if (shootTimer == -10)
    {
        var i = instance_create(x + 10 * image_xscale, y + 10, objEnemyBullet);
        i.xspeed = 2 * image_xscale;
        i.yspeed = 2;
        playSFX(sfxEnemyShootClassic);
    }
    if (shootTimer == -20)
    {
        var i = instance_create(x + 10 * image_xscale, y + 10, objEnemyBullet);
        i.xspeed = 2 * image_xscale;
        i.yspeed = 2;
        playSFX(sfxEnemyShootClassic);
    }
    
    if (shootTimer == -60)
    {
        if (!instance_exists(missile)) &amp;&amp; (instance_exists(target))
        {
            var i = instance_create(x + 10 * image_xscale, y + 10, objHyoeyMissile);
            if (image_index == -1)
            {
                i.image_index = 5;
            }
            else
            {
                i.image_index = 7;
            }
            missile = i.id;
            i.parent = id;
            i.direction = point_direction(x, y, target.x, target.y);
            playSFX(sfxMissileLaunch);
        }
        shootTimer = 180;
    }
    
    // Play audio as long as Hyoey can move
    if (!audio_is_playing(sfxHeliButonHover))
    {
        playSFX(sfxHeliButonHover);
    }
}
else
{
    // Stop audio if time is stopped/Hyoey is dead
    //audio_stop_sound(sfxHeliButonHover);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
