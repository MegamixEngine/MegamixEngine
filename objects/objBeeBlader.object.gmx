<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBeeBlader</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// image_xscale = 1 or -1 //(Use editor for this!!) determines starting direction of mini boss.

event_inherited();
respawn = true;
introSprite = sprBeeBladerTeleport;
healthpointsStart = 28;
healthpoints = healthpointsStart;
contactDamage = 3;
blockCollision = 0;
grav = 0;
category = "flying, nature";

// Enemy specific code
storeXScale = image_xscale;
setSide = 0;
phase = 0;
attackTimer = 0;
attackTimerMax = 8;
bullet[0] = noone;
bullet[1] = noone;
bullet[2] = noone;
cAngle = 90;
cDistance = 2;
addAngle = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep()
    &amp;&amp; introTimer &lt;= 0)
{
    image_index += 0.4;
    
    if (storeXScale == 0)
        storeXScale = image_xscale;
    
    if (phase == 0)
        y = ystart + cos(degtorad(cAngle)) * cDistance;
    
    cAngle += addAngle;
    
    if (cAngle &gt;= 360)
        cAngle -= 360;
    
    attackTimer += 1;
    if (attackTimer == attackTimerMax)
    {
        bullet[0] = instance_create(x + 12 * image_xscale, y + 8, objBeeBladerProjectile);
        bullet[0].xspeed = 0.5 * image_xscale;
        bullet[0].yspeed = -0.25;
        bullet[1] = instance_create(x + 12 * image_xscale, y + 8, objBeeBladerProjectile);
        bullet[1].xspeed = 0.75 * image_xscale;
        bullet[1].yspeed = 0;
        bullet[2] = instance_create(x + 12 * image_xscale, y + 8, objBeeBladerProjectile);
        bullet[2].xspeed = 0.5 * image_xscale;
        bullet[2].yspeed = 0.25;
        playSFX(sfxEnemyShoot);
        setSide = 32;
    }
    if ((attackTimer &gt; attackTimerMax &amp;&amp; !instance_exists(bullet[0]) &amp;&amp; !instance_exists(bullet[1]) &amp;&amp; !instance_exists(bullet[2])) &amp;&amp; phase == 0)
    {
        yspeed = -6;
        grav = 0.325;
        for (var i = 32; i &lt; 256; i += 1)
        {
            if (checkSolid(i*image_xscale, -8) || x + i &gt;= view_xview + view_wview - 16 &amp;&amp; image_xscale == 1 || x - i &lt;= view_xview + 16 &amp;&amp; image_xscale == -1  )
            {
                setSide = i;
                break;
            }
        }
        var aimDir = 1;
        if (image_xscale == -1)
        {
            aimDir = -1;
        }
        if (image_xscale == 1)
        {
            aimDir = 1;
        }
        
        xspeed = xSpeedAim(x, y, x + setSide * aimDir, y, yspeed, grav);
        phase = 1;
    }
    if (phase == 1 &amp;&amp; y &gt;= ystart &amp;&amp; yspeed &gt;= 0)
    {
        image_xscale *= -1;
        yspeed = 0;
        xspeed = 0;
        grav = 0;
        attackTimer = 0;
        phase = 0;
        setSide = 32;
    }
}
else if (!insideView())
{
    image_index = 0;
    y = ystart;
    x = xstart;
    if (storeXScale != 0)
    {
        image_xscale = storeXScale;
    }
    
    // shootTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
