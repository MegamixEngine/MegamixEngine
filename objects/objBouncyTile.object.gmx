<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBouncyTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>objSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add these to make your level bouncy
event_inherited();
image_speed = 0;

for (var i = 0; i &lt; global.playerCount; i += 1)
{
    global.BounceXVel[i] = 0;
    global.MeBounce[i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // Animation
    if (image_index &gt; 0 &amp;&amp; image_index &lt; image_number - (1 / 3))
    {
        image_index += (1 / 3);
    }
    else if (image_index &gt;= image_number - (1 / 3))
    {
        image_index = 0;
    }
    
    // bounce mega man
    with (objMegaman)
    {
        if (!teleporting &amp;&amp; !showReady)
        {
            with (other)
            {
                var meg = other.id;
                var pid = other.playerID;
                if (place_meeting(x, y - 1, meg) &amp;&amp; meg.yspeed &gt;= 0)
                {
                    meg.yspeed = -8.5;
                    playSFX(sfxSpring);
                    image_index = 1 / 3;
                    global.BounceXVel[pid] = (meg.x - (x + 8)) / 6;
                    global.MeBounce[pid] = id;
                }
                if (place_meeting(x, y + 3, meg) &amp;&amp; meg.yspeed &lt;= 0)
                {
                    meg.yspeed = 2;
                    playSFX(sfxSpring);
                    image_index = 1 / 3;
                    global.BounceXVel[pid] = (meg.x - (x + 8)) / 6;
                    global.MeBounce[pid] = id;
                }
                if (place_meeting(x + 2, y, meg) || place_meeting(x - 2, y, other))
                {
                    playSFX(sfxSpring);
                    image_index = 1 / 3;
                    global.BounceXVel[pid] = (meg.x - (x + 8)) / 4;
                    global.MeBounce[pid] = id;
                }
            
                if (global.BounceXVel[pid] != 0 &amp;&amp; global.MeBounce[pid] == id)
                {
                    global.BounceXVel[pid] = global.BounceXVel[pid] / 1.1;
                    if (instance_exists(meg))
                    {
                        with (meg)
                        {
                            if (climbing)
                            {
                                global.BounceXVel[pid] = 0;
                            }
                            if (ground &amp;&amp; abs(global.BounceXVel[pid]) &lt; 0.2)
                            {
                                global.BounceXVel[pid] = 0;
                            }
                            shiftObject(global.BounceXVel[pid], 0, 1);
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
