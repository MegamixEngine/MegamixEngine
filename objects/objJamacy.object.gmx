<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJamacy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// They scurry about on the ground, climbing down ladders in their path.
event_inherited();

respawn = true;

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 2;

facePlayerOnSpawn = true;

// Enemy specific code
imgIndex = 0;
imgSpd = 0.1;

// @cc - Changes colour (0 = peach w/ red light (default); 1 = orange w/ blue light;)
col = 0;

climbing = 0;
ground = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    xSpeedTurnaround();
    
    // Get from ladder on ground
    if (climbing)
    {
        if (ycoll * image_yscale &gt; 0)
        {
            climbing = 0;
            sprite_index = sprJamacy;
        }
    }
    
    // Dismount Ladder
    if (climbing)
    {
        yspeed = 1.5;
        if (!place_meeting(x, y, objLadder))
        {
            climbing = 0;
            sprite_index = sprJamacy;
            yspeed = 0;
        }
    } // Mount Ladder
    else if (!(position_meeting(round(bbox_left) + abs(xspeed), bbox_bottom + 1, objSolid)
        &amp;&amp; position_meeting(round(bbox_right) - abs(xspeed), bbox_bottom + 1, objSolid)))
    {
        if (position_meeting(round(bbox_left) /*+ abs(xspeed )*/ , bbox_bottom + 1, objLadder)
            &amp;&amp; position_meeting(round(bbox_right) /*- abs(xspeed )*/ , bbox_bottom + 1, objLadder))
        {
            climbing = 1;
            y += 1;
            sprite_index = sprJamacyClimbing;
            yspeed = 1.5;
        }
    }
    
    // Set speed
    if (!ground || climbing)
    {
        xspeed = 0;
    }
    else
    {
        xspeed = image_xscale * 1.5;
    }
    
    if (climbing)
    {
        grav = 0;
    }
    else
    {
        grav = 0.25;
    }
    
    // Animation
    imgIndex += imgSpd;
    if (imgIndex &gt;= 2)
    {
        imgIndex = 0;
    }
}
else if (dead)
{
    grav = 0.25;
    climbing = 0;
    sprite_index = sprJamacy;
    imgIndex = 0;
}
image_index = floor(imgIndex) + (2 * col);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
