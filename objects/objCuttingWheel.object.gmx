<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCuttingWheel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A spiked wheel. The basic version immediately drops from the air, bounces slightly, and rolls slowly forward.
/// The "Chase" version is the same, except it moves faster and careens back and forth in an effort to hit the player.
/// The "Stationary" version stays in place. It is effectively a damage spike, except you can destroy or damage boost through it.
/// By default, the basic and "Chase" versions stop when they hits a wall. With creation code, you can set them to be destroyed instead.
/// Basic is best in horizontal scrolling sections or with a custom spawner; "Chase" and "Stationary" are more all-purpose.

event_inherited();

healthpointsStart = 8;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "grounded";

facePlayerOnSpawn = true;

behaviourType = 1;

// Enemy specific code
image_speed = 0.3;

action = 0;

maxSpeed = 3;
accel = 0.1;
grav = 0;

xs = 0;
ys = 0;
mode = "";

if (object_index == objCuttingWheel)
{
    mode = 'forward';
}
if (object_index == objCuttingWheelChase)
{
    mode = 'chase';
}
if (object_index == objCuttingWheelStationary)
{
    mode = 'stationary';
}

killOnCollide = false; //if set, cutting wheel is destroyed when hitting wall
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ys = yspeed;
xs = xspeed;

event_inherited();

if (entityCanStep())
{
    if (ys &gt; 0 &amp;&amp; yspeed == 0 &amp;&amp; ground)
    {
        action = 2;
        yspeed = -ys * 0.5;
        if (yspeed &gt; -0.25)
        {
            yspeed = 0;
        }
    }
    if (xs &gt; 0 &amp;&amp; xspeed == 0)
    {
        xspeed = -xs;
        image_xscale = sign(xspeed);
    }
    
    if (!action)
    {
        calibrateDirection();
        if (instance_exists(target) &amp;&amp; mode != 'stationary')
        {
            if (abs(target.x - x) &lt;= 48)
            {
                action = 1;
                grav = 0.25;
                playSFX(sfxWheelCutter2);
            }
        }
    }
    if (action)
    {
        if (action == 2)
        {
            if (mode == 'chase')
            {
                if (instance_exists(target))
                {
                    calibrateDirection();
                    if (target.x &gt; x)
                    {
                        if (xspeed &lt; maxSpeed)
                        {
                            xspeed += accel;
                        }
                    }
                    else
                    {
                        if (xspeed &gt; -maxSpeed)
                        {
                            xspeed -= accel;
                        }
                    }
                }
            }
            if (mode == 'forward')
            {
                if (image_xscale == 1)
                {
                    if (xspeed &lt; 1)
                    {
                        xspeed += accel;
                    }
                }
                else
                {
                    if (xspeed &gt; -1)
                    {
                        xspeed -= accel;
                    }
                }
            }
        }
    }
    
    if (killOnCollide &amp;&amp; xcoll != 0)
    {
        itemDrop = -1;
        event_user(EV_DEATH);
    }
}
else if (dead)
{
    action = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
