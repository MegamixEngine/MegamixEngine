<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTarget</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// A target from MM10's Challenge mode.
// By default, it activates and deactivates at regular intervals so you can practice aiming and timing your shots.
// However, it can be customized for more creative purposes, such as turning switches on and off.

event_inherited();

isSolid = 0;

grav = 0;
blockCollision = 0;
bubbleTimer = -1;

healthpoints = 1;
healthpointsStart = healthpoints;
contactDamage = 0;
canDamage = false;
killOverride = false;

//respawnRange = -1;
//despawnRange = -1;
//This was probably why the first screen was lagging so bad.

itemDrop = -1;

// Please touch
startPhase = 1; //@cc 0 = starts inactive (cannot be hit); 1 = starts active (can be hit)
activeTime = 160; //@cc How long the target stays active, so you can hit it; -1 = stays active indefinitely
inactiveTime = 160; //@cc How long the target stays inactive, so you can't hit it; -1 = stays inactive indefinitely

alarm[0] = activeTime; //@cc How long the target stays active for the first cycle only; -1 = stays active indefinitely
alarm[1] = inactiveTime; //@cc How long the target stays inactive for the first cycle only; -1 = stays inactive indefinitely

inactiveOnHit = false;//@cc does getting hit make us inactive rather than die? Note this will make the target effectively invincible.

isSwitch = false; //@cc Does destroying the target toggle a switch? (Use with objSwitchHandler)
switchType = 2; //@cc 0 = always switches off; 1 = always switches on; 2 = toggles between off and on
myFlag = 10; //@cc Use the same value for the switchable object(s) linked to this target

// Please don't touch
animTimer = 0;
phase = startPhase;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Target is now active for the specified amount of time
alarm[0] = activeTime;
alarm[1] = -1;
phase = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Target is now inactive for the specified amount of time
alarm[0] = -1;
alarm[1] = inactiveTime;
phase = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if phase = 0
    {
        canHit = false;
        isTargetable = false;
        
        image_index = 4;
        animTimer = 0;
    }
    else
    {   
        canHit = true;
        isTargetable = true;
        
        animTimer += 1;
        
        if animTimer &gt;= 10
        {
            image_index += 1;
            animTimer = 0;
        }
        
        if image_index &gt; 3
        {
            image_index = 0;
        }
    }
}
else
{
    if (dead)
    {
        phase = startPhase;
        animTimer = 0;
        alarm[0] = activeTime;
        alarm[1] = inactiveTime;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (inactiveOnHit)
{
    healthpoints = healthpointsStart;
    event_perform(ev_alarm,0);
    event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isSwitch == true
{
    if switchType = 0
    {
        global.flagParent[myFlag].active = 0;
    }
    else if switchType = 1
    {
        global.flagParent[myFlag].active = 1;
    }
    else
    {
        global.flagParent[myFlag].active = 1 - global.flagParent[myFlag].active;
    }
    playSFX(sfxSidewayElevatorButton);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
