<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChillMask</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform_object(prtEntity, ev_create, 0);
i = 0;

hitWall = false;
hitFloor = false;
shuntedIntoRoof = false;
delay = 0;

// these determine what the detector does

aimAtMegaman = false; // whether or not the detector should find mega man's x position
center = false; // whether or not the detector should stay in the middle of the room (this disables all code)
spreadAttack = false; // this determines whether or not this detector is used for the spread attack. this can be combined with aimAtMegaman to find the nearest floor.

target = objMegaman;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(objChillMan))
{
    instance_destroy();
    exit;
}

// this section of code finds the nearest wall in the direction fo chillman
if (!center)
{
    if (!aimAtMegaman &amp;&amp; !spreadAttack)
    {
        if (!checkSolid(8 * image_xscale, 0, 1, 1))
        {
            for (i = 0; i &lt; 256; i += 1)
            {
                x += (1 * image_xscale);
                if (checkSolid(8 * image_xscale, 0, 1, 1))
                {
                    hitWall = true;
                    break;
                }
            }
        }
        if (!hitWall &amp;&amp; checkSolid(8 * image_xscale, 0, 1, 1))
        {
            hitWall = true;
        }
    }
    else if (aimAtMegaman)
    {
        shuntedIntoRoof = false;
        if
            (!spreadAttack) // if spread attack is true, the following code to target mega man is skipped. this is so it can still find the floor.
        {
            if (instance_exists(objChillMan))
            {
                if (instance_exists(target))
                {
                    image_xscale = target.image_xscale;
                    x = target.x - image_xscale;
                }
                else
                {
                    x = objChillMan.x + (objChillMan.image_xscale * 64);
                }
            }
        }
        y = view_yview + view_hview - 32;
        hitFloor = false;
        for (i = 0; i &lt; 256; i += 1)
        {
            if (y &lt;= view_yview + 16)
            {
                i = 0;
                delay = 0;
                shuntedIntoRoof = true;
                break;
            }
            
            if (checkSolid(0, 0, 1, 1) &amp;&amp; hitFloor == false)
                y -= 1;
            else if (!checkSolid(0, 0, 1, 1) &amp;&amp; hitFloor == false)
                hitFloor = true;
            else
                break;
        }
        if (!shuntedIntoRoof)
        {
            i = 0;
            delay = 4;
        }
    }
    else if (spreadAttack
        &amp;&amp; !aimAtMegaman) // this code finds both the nearest wall and the floor.
    {
        shuntedIntoRoof = false;
        y = view_yview + view_hview - 32;
        hitFloor = false;
        for (i = 0; i &lt; 256; i += 1)
        {
            if (y &lt;= view_yview + 16)
            {
                i = 0;
                delay = 0;
                shuntedIntoRoof = true;
                break;
            }
            
            if (checkSolid(0, 0, 1, 1) &amp;&amp; hitFloor == false)
                y -= 1;
            else if (!checkSolid(0, 0, 1, 1) &amp;&amp; hitFloor == false)
                hitFloor = true;
            else
                break;
        }
        if (!shuntedIntoRoof)
        {
            i = 0;
            delay = 4;
        }
        if (!checkSolid(4 * image_xscale, 0, 1, 1))
        {
            for (i = 0; i &lt; 256; i += 1)
            {
                x += (1 * image_xscale);
                if (checkSolid(4 * image_xscale, 0, 1, 1))
                {
                    hitWall = true;
                    break;
                }
            }
        }
        if (!hitWall &amp;&amp; checkSolid(4 * image_xscale, 0, 1, 1))
        {
            hitWall = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
