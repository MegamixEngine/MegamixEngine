<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShirokumachineGTV</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// image_xscale = 1 or -1 //(Use editor for this!!) // change what direction Shiro is locked in the entire fight.

event_inherited();
respawn = true;
introSprite = sprShirokumachineTeleport;
healthpointsStart = 32;
healthpoints = healthpointsStart;
contactDamage = 8;
blockCollision = 1;
grav = 0.15;
facePlayerOnSpawn = false;
category = "bulky, nature";

// Enemy specific code
image_speed = 0;
image_index = 0;
storeXScale = 0;
phase = 0;

// event triggers
attackTimer = 0;
attackTimerMax = 90;
bullet = noone;

// creation code variables

//@cc if 0, shiro will use both attacks, otherwise if 1 he'll only use the ice ball attack.
variant = 0;

//@cc determines the amount of shards to create.
shardsCreated = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep()
    &amp;&amp; introTimer &lt;= 0)
{
    attackTimer++;
    
    var halfAttack = attackTimerMax / 2;
    var quarterAttack = attackTimerMax / 4;
    
    switch (phase)
    {
        case 0: // spawn ice ball 
            if (attackTimer == round(halfAttack))
            {
                playSFX(sfxTigerRoar);
            }
            if (attackTimer &gt;= halfAttack &amp;&amp; attackTimer &lt; attackTimerMax)
            {
                image_index = (attackTimer / 4) mod 3;
                
                if (attackTimer mod 8 == 0)
                {
                    instance_create(x + (17 + irandom(6)) * image_xscale, y - 5 + irandom(4), objSlideDust);
                }
                
                if (attackTimer == round(halfAttack + quarterAttack))
                {
                    with (instance_create(x + 20 * image_xscale, y - 3, objShiroIceBall))
                    {
                        parent = other.id;
                        other.bullet = id;
                        image_xscale = other.image_xscale;
                    }
                }
            }
            if (attackTimer == attackTimerMax)
            {
                image_index = 0;
                attackTimer = 0;
                phase = 1;
            }
            break;
        case 1: // knock ice ball 
            if (attackTimer == 20)
            {
                image_index = 4;
            }
            if (attackTimer == 24)
            {
                image_index = 5;
            }
            if (attackTimer == 28)
            {
                image_index = 6;
                if (instance_exists(bullet))
                {
                    with (bullet)
                    {
                        playSFX(sfxCurlingerBounce);
                        hitByBear = true;
                        xspeed = 2 * image_xscale;
                    }
                }
            }
            if (attackTimer == 36)
            {
                image_index = 0;
                attackTimer = -16;
                if (variant == 1) // depending on variant, either continue attack pattern or reset
                {
                    phase = 0;
                }
                else
                {
                    phase = 2;
                }
            }
            break;
        case 2: // summon ice shards 
            if (attackTimer == round(halfAttack))
            {
                playSFX(sfxTigerRoar);
                screenShake(halfAttack, 1, 1);
            }
            if (attackTimer &gt;= halfAttack &amp;&amp; attackTimer &lt; halfAttack + quarterAttack)
            {
                image_index = (attackTimer / 4) mod 3;
            }
            if (attackTimer &gt;= halfAttack + quarterAttack)
            {
                if ((attackTimer / 4) mod 4 &lt; 3)
                {
                    image_index = 7 + (attackTimer / 4) mod 4;
                }
                else
                {
                    image_index = 8;
                }
            }
            if (attackTimer == attackTimerMax)
            {
                var tarX;
                if (instance_exists(target))
                {
                    tarX = target.x;
                }
                else
                {
                    tarX = x - 64 * image_xscale;
                }
                
                instance_create(tarX, view_yview + 16, objShiroShard);
                for (var i = shardsCreated mod 2; i &lt; shardsCreated; i += 2)
                {
                    instance_create(tarX + ceil(i / 2) * 32, view_yview + 16, objShiroShard);
                    instance_create(tarX - ceil(i / 2) * 32, view_yview + 16, objShiroShard);
                }
                attackTimer = -16;
                phase = 0;
            }
            break;
    
    
    
    }
}
else if (!insideView())
{
    image_index = 0;
    y = ystart;
    x = xstart;
    attackTimer = 0;
    phase = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objStompyProjectile)
{
    if (parent == other.id)
    {
        instance_destroy();
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
