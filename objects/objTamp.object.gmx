<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTamp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 6;
healthpoints = healthpointsStart;
contactDamage = 4;

grav = 0;
facePlayerOnSpawn = true;
category = "semi bulky";

imgSpd = 0.2;
moveTimer = 30;
warpDelay = 30;
phase = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            moveTimer--;
            if (moveTimer &lt;= 0)
            {
                yspeed = -1;
                
                image_index += imgSpd;
                if (image_index &gt;= 2)
                {
                    image_index = 0;
                }
                
                warpDelay--;
                if (warpDelay == 0)
                {
                    yspeed = 0;
                    phase = 1;
                    warpDelay = 30;
                    moveTimer = 10;
                }
            }
            break;
        // warp out
        case 1:
            if (image_index == 0)
            {
                image_index = 2;
                canDamage = false;
                canHit = false;
                playSFX(sfxPortal);
            }
            else
            {
                image_index += imgSpd;
                if (image_index &gt;= 5)
                {
                    image_alpha = 0;
                    phase = 2;
                }
            }
            break;
        
        // warp In
        case 2:
        warpDelay--;
        if (warpDelay == 0)
        {
            image_alpha = 1;
            if (instance_exists(target))
            {
                var newY = target.y - 64;
                if (!insideSection(target.x, newY))
                    newY = global.sectionTop + 8;
                shiftObject(0, newY - y, true);
                shiftObject(target.x - x, 0, true);
            }
            canDamage = true;
            canHit = true;
        }
        if (warpDelay &lt; 0)
        {
            image_index -= imgSpd;
            calibrateDirection();
            
            if (image_index == 2)
            {
                image_index = 0;
                phase = 3;
                warpDelay = 4; // Reusing warpDelay as a timer for next phase
            }
        }
        break;
    case 3:
        moveTimer--;
        if (moveTimer &lt;= 0)
        {
            yspeed = 3;
            if (ground)
            {
                warpDelay--;
                if (warpDelay &gt; 0)
                {
                    image_index = 5;
                }
                else
                {
                    playSFX(sfxHeavyLand);
                    phase = 0;
                    image_index = 0;
                    moveTimer = 30;
                    warpDelay = 30;
                }
            }
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>healthpoints = healthpointsStart;
image_index = 0;
yspeed = 0;
canDamage = true;
canHit = true;
moveTimer = 30;
warpDelay = 30;
phase = 0;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
