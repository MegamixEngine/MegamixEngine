<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRounderV2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
event_perform_object(prtRail, ev_create, 0);

numberOfRounder = 1;
healthIndex = 1;
hitInvun = 1;
introType = 2;

totalHealth = 28;
actualHealth = -1;
healthpointsStart = actualHealth;
healthpoints = actualHealth;
healthBarHealth = -(actualHealth * (numberOfRounder - 1));
pose = sprRounderV2;
poseImgSpeed = 4 / 60;
contactDamage = 4;
attackTimer = 0;
attackTimerMax = 110;
shotsFired = 0;
phase = 0;
delay = 0;
hasFired = false;
startingDirection = -1;
mySpeed = 0.5;
grav = 0;
blockCollision = 0;
init = 1;
dir = "none"; // left, up, down, right
startDir = dir;

// distance from the x and y position to check by
xOffset = 0;
yOffset = -8;
fallMomentum = 0.25;

// Health Bar
healthBarPrimaryColor[1] = 29;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_6.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 3);

// MaGMML2
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 2);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 2);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 4);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpoints = 0;

for (var i = 0; i &lt; numberOfRounder; i += 1)
{
    if (instance_exists(rounder[i]))
    {
        with (rounder[i])
        {
            other.healthpoints += actualHealth;
        }
    }
}
if (entityCanStep())
{
    if (isFight == true)
    {
        // this sets up crash man's movement variables.
        image_speed = 0;
        event_perform_object(prtRailPlatform, ev_step, 0);
        attackTimer += 1;
        
        // rounder has no different patterns other than to move around the rail. here are all of its events!
        if (attackTimer mod attackTimerMax &lt; attackTimerMax - 15)
            image_index = 0 + ((attackTimer / 5) mod 2);
        if (attackTimer mod attackTimerMax == attackTimerMax - 15 || attackTimer mod attackTimerMax == attackTimerMax - 5)
            image_index = 2;
        if (attackTimer mod attackTimerMax == attackTimerMax - 10)
        {
            image_index = 3;
            
            // alternating behavior on difficulty modes
            if (global.difficulty == DIFF_HARD)
            {
                instance_create(x, y, choose(objFireTellyShot, objRounderV2Bomb));
                
                if (shotsFired mod 3 == 0 &amp;&amp; shotsFired != 0) // every fourth shot after switching directions
                {
                    i = instance_create(x, y, objDachoneBullet);
                    with (i)
                    {
                        contactDamage = 2;
                        image_index = 2;
                        xspeed = 2;
                        yspeed = 2;
                    }
                    i = instance_create(x, y, objDachoneBullet);
                    with (i)
                    {
                        contactDamage = 2;
                        image_xscale = -1;
                        image_index = 2;
                        xspeed = 2;
                        yspeed = -2;
                    }
                    i = instance_create(x, y, objDachoneBullet);
                    with (i)
                    {
                        contactDamage = 2;
                        image_index = 2;
                        xspeed = -2;
                        yspeed = -2;
                    }
                    i = instance_create(x, y, objDachoneBullet);
                    with (i)
                    {
                        contactDamage = 2;
                        image_xscale = -1;
                        image_index = 2;
                        xspeed = -2;
                        yspeed = 2;
                    }
                    
                    playSFX(sfxDachoneLaser);
                }
            }
            else
            {
                instance_create(x, y, objRounderV2Bomb);
            }
            
            shotsFired += 1;
        }
        if (shotsFired == 6) // after 6 shots turn around.
        {
            shotsFired = 0;
            if (dir == "left")
            {
                dir = "right";
            }
            if (dir == "right")
            {
                dir = "left";
            }
            if (dir == "up")
            {
                dir = "down";
            }
            if (dir == "down")
            {
                dir = "up";
            }
        }
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// if not hitting in the center, reflect
if (!collision_rectangle(x - 16, y - 12,
    x + 16, y - 8, other.id, false, false))
{
    other.guardCancel = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objHarmfulExplosion)
    instance_destroy();
with (objRounderV2Bomb)
    instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

actualHealth -= global.damage;
if (actualHealth &lt;= 0 &amp;&amp; healthpoints &gt; 0)
{
    event_user(EV_DEATH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform_object(prtRailPlatform, ev_other, ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objRounderV2)
{
    healthIndex = 1;
    
    numberOfRounder = instance_number(objRounderV2);
    healthpointsStart = totalHealth;
    healthpoints = totalHealth;
    actualHealth = ceil(totalHealth / numberOfRounder);
    var i;
    for (i = 0; i &lt; instance_number(objRounderV2); i += 1)
    {
        rounder[i] = instance_find(objRounderV2, i);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hl = healthpoints;
healthpoints = totalHealth;
event_inherited();
healthpoints = hl;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
