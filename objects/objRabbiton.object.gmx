<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRabbiton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code (all optional)
// back = &lt;boolean&gt; (false = appears in front; true = appears behind you)

event_inherited();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;
category = "nature";

despawnRange = 32;

// Enemy specific code
back = false;

chasing = false;
phase = 0;
range = 64;
timer = 0;

xSpd = 1.5;
ySpd = 4;

animBack = 0;
animPauseTimer = 0;
imgSpd = 0.2;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(xcoll!=0)
{
    xspeed=xcoll;
}


if (entityCanStep())
{
    switch (phase)
    {
        // skii, and wait to do stuff
        case 0: // turn around if we hit a wall 
            if (xspeed == 0)
            {
                phase = 2;
            }
            
            // animation
            if (animPauseTimer &lt;= 0)
            {
                if (!animBack)
                {
                    imgIndex += imgSpd;
                    if (imgIndex &gt;= 5)
                    {
                        imgIndex = 4;
                        animBack = true;
                        animPauseTimer = 6;
                    }
                }
                else
                {
                    imgIndex -= imgSpd;
                    if (imgIndex &lt; 0)
                    {
                        imgIndex = 0;
                        animBack = false;
                        animPauseTimer = 6;
                    }
                }
            }
            else
            {
                animPauseTimer -= 1;
            }
            
            // trigger actions
            timer += 1;
            if (timer &gt;= 50) // decide whether to do an action after a certain amount of time
            {
                timer = 0;
                
                if (choose(false, false, true) &amp;&amp; instance_exists(target)) // chance to do an action
                {
                    if ((image_xscale == 1 &amp;&amp; x &lt;= target.x - range)
                        || (image_xscale == -1 &amp;&amp; x &gt;= target.x + range))
                    {
                        // jump
                        phase = 1;
                        imgIndex = 8;
                        animPauseTimer = 0;
                        yspeed = -ySpd;
                        ground = false;
                        
                        if (chasing)
                        {
                            xSpd += image_xscale * 2.5;
                        }
                        else
                        {
                            xSpd += image_xscale;
                        }
                        
                        xspeed = xSpd;
                    }
                    else if ((image_xscale == 1 &amp;&amp; target.x &lt; x)
                        || (image_xscale == -1 &amp;&amp; target.x &gt; x))
                    {
                        // turn
                        phase = 2;
                        animPauseTimer = 0;
                        imgIndex = 5;
                        
                        if (chasing)
                        {
                            if (xspeed != 0)
                            {
                                xspeed -= image_xscale;
                            }
                        }
                        else
                        {
                            xspeed /= 3;
                        }
                    }
                }
            }
            break;
        
        // twirl and jump
        case 1:
            imgIndex += imgSpd * 2;
            if (imgIndex &gt;= 12)
            {
                imgIndex = 8 + imgIndex mod 12;
            }
            if (ground)
            {
                if (timer &lt; 1)
                {
                    yspeed = -ySpd;
                    ground = false;
                    timer += 1;
                }
                else
                {
                    phase = 0;
                    timer = 0;
                    
                    if (chasing)
                    {
                        xSpd -= image_xscale * 2.5;
                    }
                    else
                    {
                        xSpd -= image_xscale;
                    }
                }
            }
            xspeed = xSpd; // don't lose all speed by hitting a wall
            break;
        
        // turn
        case 2: // loop animaion 
            imgIndex += imgSpd * 2;
            if (imgIndex &gt;= 7)
            {
                imgIndex = 5 + imgIndex mod 7;
            }
            
            // wait to turn
            timer += 1;
            if (timer &gt;= 30)
            {
                phase = 0;
                imgIndex = 0;
                
                image_xscale = -image_xscale;
                
                if (chasing)
                {
                    if (xspeed != 0)
                    {
                        // drift the other way
                        xspeed += image_xscale;
                    }
                    else
                    {
                        // go at a slow speed backwards
                        xspeed = image_xscale;
                    }
                }
                else
                {
                    xSpd = abs(xSpd) * image_xscale;
                    xspeed = xSpd;
                }
            }
            break;
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    // reset variables
    chasing = false;
    phase = 0;
    timer = 0;
    animPauseTimer = 0;
    imgIndex = 0;
    
    // match speed of the vehicle
    if (instance_exists(target))
    {
        if (instance_exists(target.vehicle))
        {
            chasing = true;
            
            if (target.vehicle.x &gt; view_xview[0] &amp;&amp; target.vehicle.x &lt; view_xview[0] + view_wview[0]
                &amp;&amp; target.vehicle.y &gt; view_yview[0]
                &amp;&amp; target.vehicle.y &lt; view_yview[0] + view_hview[0])
            {
                if (target.vehicle.object_index == objMegaman8Sled)
                    xSpd = target.vehicle.maxSpeed * target.vehicle.image_xscale;
                else
                    xSpd = abs(target.vehicle.xspeed) * target.vehicle.image_xscale;
                
                // set drift speed
                if (back)
                {
                    xSpd += target.vehicle.image_xscale;
                }
                else
                {
                    xSpd -= target.vehicle.image_xscale;
                }
            }
        }
    }
    
    // other speed stuff
    if (!chasing)
    {
        // not on a vehicle
        calibrateDirection();
        
        if (back)
        {
            image_xscale = -image_xscale;
        }
        
        xSpd = 1.5 * image_xscale;
    }
    else if (xSpd == 0)
    {
        // bro, you can't skate in place. That's silly. This is a very serious fan project, obviously.
        xSpd = target.vehicle.image_xscale / 2;
    }
    
    // determine facing direction (done like this so you don't get any moon-skating rabbiton if the vehicle is slow enough)
    if (xSpd &gt; 0)
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
    
    // back position setup
    if (back)
    {
        if (x &lt; view_xview[0] + view_wview[0] / 2)
        {
            x = view_xview[0] + view_wview[0];
        }
        else
        {
            x = view_xview[0];
        }
    }
    
    xspeed = xSpd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
