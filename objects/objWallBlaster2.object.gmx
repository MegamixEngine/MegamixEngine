<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWallBlaster2Col1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code (all optional)
// col = &lt;number&gt; (0 = red and green; 1 = green and red; 2 = orange and green)
// dir = &lt;number&gt; (1 = face right (default); -1 = face left (default);

event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "cannons";

grav = 0;
blockCollision = false;

// creation code
col = 0;

// enemy specific code
phase = 0;
shootTimer = 0;

turnSet = 1;
imgSpd = 0.2;
imgIndex = 0;

delay = 75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            if (instance_exists(target))
            {
                if (sign(image_xscale) == sign(target.x - x))
                {
                    shootTimer += 1;
                    if (shootTimer &gt;= delay) // &lt;-- wait time between shots here
                    {
                        phase = 1;
                        shootTimer = 0;
                        imgIndex = 2 * turnSet;
                    }
                    
                    var megaDir = point_direction(x, y, target.x, target.y);
                    
                    if (image_xscale &gt; 0)
                    {
                        if (megaDir &gt; 22.5 &amp;&amp; megaDir &lt; 180)
                        {
                            turnSet = 0;
                        }
                        else if (megaDir &lt; 337.5 &amp;&amp; megaDir &gt;= 180)
                        {
                            turnSet = 2;
                        }
                        else
                        {
                            turnSet = 1;
                        }
                    }
                    else
                    {
                        if (megaDir &lt; 157.5)
                        {
                            turnSet = 0;
                        }
                        else if (megaDir &gt; 202.5)
                        {
                            turnSet = 2;
                        }
                        else
                        {
                            turnSet = 1;
                        }
                    }
                }
            }
            if (shootTimer &gt;= (delay - 4))
            {
                imgIndex = (turnSet * 3) + 2;
            }
            else
            {
                imgIndex = turnSet * 3;
            }
            break;
        case 1:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 3 * turnSet + 2 &amp;&amp; shootTimer == 0)
            {
                shootTimer = 1; // I used shootTimer as a boolean   :P
                
                var shotX = x;
                if (turnSet == 1)
                {
                    shotX += sprite_width * 0.5;
                }
                else
                {
                    shotX += sprite_width * 0.3;
                }
                
                var shotY = y;
                if (turnSet == 0)
                {
                    shotY -= sprite_height * 0.4;
                }
                else if (turnSet == 2)
                {
                    shotY += sprite_height * 0.4;
                }
                
                var shotDir = 0;
                if (image_xscale &gt; 0)
                {
                    if (turnSet == 0)
                    {
                        shotDir = 45;
                    }
                    if (turnSet == 1)
                    {
                        shotDir = 0;
                    }
                    if (turnSet == 2)
                    {
                        shotDir = 315;
                    }
                }
                else
                {
                    if (turnSet == 0)
                    {
                        shotDir = 135;
                    }
                    if (turnSet == 1)
                    {
                        shotDir = 180;
                    }
                    if (turnSet == 2)
                    {
                        shotDir = 225;
                    }
                }
                
                var i = instance_create(shotX, shotY, objEnemyBullet);
                i.sprite_index = sprEnemyBulletMM6;
                i.speed = 1.3;
                i.direction = shotDir;
                playSFX(sfxEnemyShoot);
            }
            if (imgIndex &gt;= 3 * turnSet + 3 &amp;&amp; shootTimer == 1)
            {
                phase = 0;
                imgIndex = 3 * turnSet;
                shootTimer = 0;
            }
            break;
    }
}
else if (dead)
{
    phase = 0;
    shootTimer = 0;
    turnSet = 0;
    imgIndex = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// creation code setup
switch (col)
{
    case 0:
        sprite_index = sprWallBlaster2Col1;
        break;
    case 1:
        sprite_index = sprWallBlaster2Col2;
        break;
    case 2:
        sprite_index = sprWallBlaster2Col3;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
