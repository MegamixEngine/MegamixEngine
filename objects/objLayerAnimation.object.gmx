<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLayerAnimation</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/*
animLength = how many frames
animTime = interval before change
animateOnTransition = will stop animations during the transition
animationLayer = Layer animated tiles start at (your animated tiles should start on this layer)
animationReverse = Will cause animation to go backwards upon reaching the end
animDir = Determines if animations go forwards or backwards - maybe don't use this if animationReverse is true
cumulativeLayers = determines if the previous layers stay visible instead of being hidden
decreasingDepth = determines if the animation layers decrease in depth instead of increase


Note: This only works for tiles on a 16x16 grid

see the example level for how to set this up.
*/

animLength = 1;

for (i = 1; i &lt;= animLength; i += 1)
{
    animTime[i - 1] = 1;
}

animationLayer = 1;
animateOnTransition = false;
animationReverse = false;
cumulativeLayers = false; // whether the previous layers of the animation stay visible instead of being hidden
decreasingDepth = false; // whether the next layers decrease in depth instead of increase

timer = 0;
tileID = 0;
animDir = 1;
setup = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.frozen)
{
    if (!instance_exists(objSectionSwitcher))
    {
        exit;
    }
    else if (!animateOnTransition)
    {
        exit;
    }
}

if (setup)
{
    setup = false;
    if (cumulativeLayers)
    {
        // reset all layers
        for (var i = 0; i &lt; animLength; i++)
        {
            tile_layer_hide(animationLayer + i - i * 2 * decreasingDepth);
        }
        
        tile_layer_show(animationLayer);
    }
}

if (timer &lt; animTime[tileID])
{
    timer += 1;
}
else
{
    timer = 0;
    if (animDir == 1)
    {
        if (tileID &lt; animLength - 1)
        {
            if (!cumulativeLayers) { tile_layer_hide(animationLayer + tileID - tileID * 2 * decreasingDepth); }
            tileID += 1;
            tile_layer_show(animationLayer + tileID - tileID * 2 * decreasingDepth);
        }
        else
        {
            if (!cumulativeLayers)
            {
                tile_layer_hide(animationLayer + tileID - tileID * 2 * decreasingDepth);
            }
            else
            {
                // reset all layers
                for (var i = 0; i &lt; animLength; i++)
                {
                    tile_layer_hide(animationLayer + i - i * 2 * decreasingDepth);
                }
            }
            
            if (!animationReverse)
            {
                tileID = 0;
            }
            else
            {
                tileID -= 1;
                animDir = -1;
            }
            
            tile_layer_show(animationLayer + tileID - tileID * 2 * decreasingDepth);
        }
    }
    else
    {
        if (tileID &gt; 0)
        {
            if (!cumulativeLayers) { tile_layer_hide(animationLayer + tileID - tileID * 2 * decreasingDepth); }
            tileID -= 1;
            tile_layer_show(animationLayer + tileID - tileID * 2 * decreasingDepth);
        }
        else
        {
            if (!cumulativeLayers)
            {
                tile_layer_hide(animationLayer + tileID - tileID * 2 * decreasingDepth);
            }
            else
            {
                // reset all layers
                for (var i = 0; i &lt; animLength; i++)
                {
                    tile_layer_hide(animationLayer + i - i * 2 * decreasingDepth);
                }
            }
            
            if (!animationReverse)
            {
                tileID = animLength - 1;
            }
            else
            {
                tileID += 1;
                animDir = 1;
            }
            
            tile_layer_show(animationLayer + tileID - tileID * 2 * decreasingDepth);
        }
    }
}

/*
animLength = how many frames
animTime = interval before change
animateOnTransition = will stop animations during the transition
animationLayer = Layer animated tiles start at (your animated tiles should start on this layer)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// it's time to stop
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
