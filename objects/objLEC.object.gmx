<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLEC</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// The Large Enemy Crab (L.E.C) is a sturdy, stationary enemy that sends sturdy, slow-moving bubbles toward the player.
/// Bubbles move along the ground, fall off ledges, and stop when they hit a wall. They can trap a player inside and be popped with enough damage.
/// Functionally similar to Feeber from GB V, but heartier by default and thus harder to deal with. Players may find L.E.C tiresome unless used very creatively.

// Creation Code (All optional)
// shotMax = &lt;number&gt; // how long L.E.C waits before firing.
event_inherited();

respawn = true;
healthpointsStart = 10;
healthpoints = healthpointsStart;
contactDamage = 4;
category = "aquatic, nature";

facePlayer = true;

// Enemy specific code
animTimer = 0;
animMax = 20;
shotTimer = 0;
shotMax = 8;
shooting = false;
img = 0;
bubble = noone;

explosionSprite = sprExplosionWonderswan;

nerf = 0;
ySpeedMul = 1;
bubblePop = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    animTimer += 1;
    shotTimer += 1;
    
    // if not currently shooting, alternate between animation frames 0 and 1.
    if (!shooting)
    {
        if (animTimer == animMax)
        {
            if (image_index == 0)
                image_index = 1;
            else
                image_index = 0;
            animTimer = 0;
        }
    }
    
    // if there isn't a bullet on screen, and there has been enough of a delay, create one.
    if (!instance_exists(bubble))
    {
        // checks whether the shot timer has reached its determined limit and enters shooting mode.
        if (shotTimer &gt;= shotMax &amp;&amp; image_index &lt; 2)
        {
            image_index = 2;
            shooting = true;
        }
        
        // if in shooting mode, increases frame until final frame image.
        if (animTimer &gt;= animMax &amp;&amp; image_index &gt;= 2 &amp;&amp; image_index &lt; 4)
        {
            image_index += 1;
            animTimer = 0;
        }
        
        // upon final frame image, create bubble.
        if (animTimer &gt;= animMax &amp;&amp; image_index &gt;= 4)
        {
            image_index = 0;
            shooting = false;
            bubble = instance_create(x, y - 15, objLECBubble);
            bubble.ySpeedMul = ySpeedMul;
            if nerf &amp;&amp; (shotTimer != 0) {
            bubble.healthpointsStart = 5;
            bubble.healthpoints = 5;
            }
            if bubblePop &amp;&amp; (shotTimer!= 0) {
            bubble.dieToSpikes = 1;
            }
            animTimer = 0;
        }
    }
    else // if there is a bubble in existance, L.E.C cannot fire another one.
        shotTimer = 0;
}
else if (dead)
{
    image_index = 0;
    animTimer = 5;
    shooting = false;
    actionTimer = 0;
    shotTimer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead)
{
    exit;
}

// Special effect when invincibile
if (invincible == true)
{
    d3d_set_fog(true, c_white, 0, 0);
    
    var _ixscale = (image_xscale * 1.075) + (sin(sparkleTimer * 0.15) *.08 * sign(image_xscale));
         _ixscale = roundTo(_ixscale, (1 / sprite_get_width(sprite_index)));
    
    var _iyscale = (image_yscale * 1.025) + (sin(sparkleTimer * 0.15) *.08 * sign(image_yscale));
        _iyscale = roundTo(_iyscale, (1 / sprite_get_height(sprite_index)));
    
    var _ix = x;
        _ix -= (0.5 - (sprite_get_xoffset(sprite_index) / sprite_get_width(sprite_index))) * ((_ixscale - image_xscale) * sprite_get_width(sprite_index));
    
    var _iy = y;
        _iy -= (0.5 - (sprite_get_yoffset(sprite_index) / sprite_get_height(sprite_index))) * ((_iyscale - image_yscale) * sprite_get_height(sprite_index));
    
    draw_sprite_ext(sprite_index, image_index, round(_ix), round(_iy), _ixscale, _iyscale, image_angle, image_blend, image_alpha);
    d3d_set_fog(false, 0, 0, 0);
}

draw_sprite_ext(sprite_index, image_index, round(x), floor(y), 1, image_yscale, image_angle, image_blend, image_alpha);
if ((iFrames mod 2 == 1) || (iceTimer &gt; 0))
{
    var flashcol = c_white;
    if (iceTimer &gt; 0)
        flashcol = make_color_rgb(0, 120, 255);
    d3d_set_fog(true, flashcol, 0, 0);
    draw_sprite_ext(sprite_index, image_index, round(x), floor(y), 1, image_yscale, image_angle, image_blend, image_alpha);
    d3d_set_fog(false, 0, 0, 0);
    if (iceTimer &gt; 0)
    {
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(sprite_index, image_index, round(x), floor(y), 1, image_yscale, image_angle, image_blend, image_alpha);
        draw_set_blend_mode(bm_normal);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
