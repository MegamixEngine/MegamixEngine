<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTadahouPurple</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// creation code (all optional)


event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "cannons";







phase = 0;
attackTimer = 0;

shotsFired = 0;

imgSpd = 0.1;
imgIndex = 0;

// Enemy creation code
facePlayerOnSpawn = true;
facePlayer = false;

attackTimerMax = 160; //how long the enemy waits to shoot
turnAroundWaitDiff = 40; //how long the enemy waits before turning around. set to -1 to never turn around.
// col = &lt;number&gt; (0 = purple (default); 1 = blue; 2 = light blue) 
col = 0; //set to -1 to use custom sprite

originX = sprite_width * 0.4; //bullet creation x offset;
originY = -3; //bullet creation y offset

//bullet setup
childSound[0] = sfxEnemyShoot; //what sound the bullet makes when shot. can be array;
childSmoke[0] = noone; //if defined, create this secondary object ('smoke', doesn't pass other values)
childObject[0] = objEnemyBullet; //what child object to shoot. can be array.
childDamage[0] = 3; //what child damage. can be array. set to 'noone' to use object defaults
childXSpd[0] = 1.4;// &lt;--set child x speed here. can be array to make pattern
childYSpd[0] = 0; //set this or above to 'noone' to use object defaults
childGrav[0] = 0; //set if child gravity is here. can be array. set to 'noone' to use object default
childSprite[0] = noone; //if defined, override Tadahou sprite defaults
childImageSpeed[0] = noone; //if defined, overide object defaults

//Unhardcoding
customCol = sprTadahouPurple
customBullet = sprTadahouShotPurple

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // shooting
    if (attackTimer == attackTimerMax)
    {
        var shotXMod = array_length_1d(childXSpd);
        var shotYMod = array_length_1d(childYSpd);
        var gravMod = array_length_1d(childGrav);
        var iMod = array_length_1d(childImageSpeed);
        var damMod = array_length_1d(childDamage);
        if (childObject[shotsFired mod (array_length_1d(childObject))] != noone)
        {
            var shot = instance_create(x + (originX*image_xscale), y +(originY*image_yscale), childObject[shotsFired mod (array_length_1d(childObject))]);
            
            if (childSmoke[shotsFired mod (array_length_1d(childSmoke))] != noone)
            {
                with (shot)
                {
                    instance_create(x,y,other.childSmoke[other.shotsFired mod (array_length_1d(other.childSmoke))])
                }
            }
            shot.depth = depth + 1;
            if (childXSpd[shotsFired mod shotXMod] != noone)
                shot.xspeed = childXSpd[shotsFired mod shotXMod] * image_xscale; 
            if (childYSpd[shotsFired mod shotYMod] != noone)
                shot.yspeed = childYSpd[shotsFired mod shotYMod] * image_yscale; 
            if (childDamage[shotsFired mod damMod] != noone)
                shot.contactDamage = childDamage[shotsFired mod damMod]; 
            if (childGrav[shotsFired mod gravMod] != noone)
                shot.grav = childGrav[shotsFired mod gravMod]; 
            if (childImageSpeed[shotsFired mod iMod] != noone)
                shot.image_speed = childImageSpeed[shotsFired mod iMod];
            if (childSprite[shotsFired mod (array_length_1d(childSprite))] == noone)
            {
                switch (col)
                {
                    case 0:
                        shot.sprite_index = sprTadahouShotPurple;
                        break;
                    case 1:
                        shot.sprite_index = sprTadahouShotBlue;
                        break;
                    case 2:
                        shot.sprite_index = sprTadahouShotLightBlue;
                        break;
                    case 3:
                        shot.sprite_index = customBullet;
                        break;
                }
            }
            else
            {
                shot.sprite_index = childSprite[shotsFired mod (array_length_1d(childSprite))];
            }
        }
        else
        {
            if (childSmoke[shotsFired mod (array_length_1d(childSmoke))] != noone)
            {

                instance_create(x + (originX*image_xscale), y +(originY*image_yscale),other.childSmoke[other.shotsFired mod (array_length_1d(other.childSmoke))])
                
            }
        }
        if (childSound[shotsFired mod (array_length_1d(childSound))] != noone)
        {
            playSFX(childSound[shotsFired mod (array_length_1d(childSound))]);
        }
        
        shotsFired ++;
        
        
        imgIndex = 1;
        
        attackTimer += 1;
    }
    else if (attackTimer &lt; attackTimerMax)
    {
        attackTimer += 1;
    }
    
    // turn around stuff
    if (turnAroundWaitDiff != -1)
    {
        if (attackTimer == attackTimerMax - turnAroundWaitDiff)
        {
            calibrateDirection();
        }
    }
    
    // shoot animation
    if (attackTimer &gt;= attackTimerMax + 1)
    {
        imgIndex += imgSpd;
        if (imgIndex &gt;= 2)
        {
            imgIndex = 0;
            attackTimer = 0;
        }
    }
    else
    {
        if (ycoll &gt; 0)
        {
            imgIndex = 2;
        }
    }
    
    // land animation
    if (imgIndex &gt;= 2)
    {
        imgIndex += imgSpd;
        if (imgIndex &gt;= 3)
        {
            imgIndex = 0;
        }
    }
}
else if (dead)
{
    attackTimer = 0;
    imgIndex = 0;
    shotsFired = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// creation code setup
switch (col)
{
    default:
    break;
    case 0:
        sprite_index = sprTadahouPurple;
        break;
    case 1:
        sprite_index = sprTadahouBlue;
        break;
    case 2:
        sprite_index = sprTadahouLightBlue;
        break;
    case 3:
        sprite_index = customCol;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
