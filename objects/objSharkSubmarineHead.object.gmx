<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSharkSubmarineHead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtSharkSubmarine</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

yLowOffset = 56;
blinkMultiple = 4; // Interval tracked by blinkTimer.

cannon = noone;

startFiring = false; // Can the cannon shoot yet?
eyeIndex = 0; // 0 = Open, 1 = Half open/closed, 2 = closed.
blinkTimer = blinkMultiple * 2; // Controls blink animation.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Creating the cannon at the start of the fight.
if (!global.frozen)
{
    if (isIntro)
    {
        if (!instance_exists(cannon))
        {
            cannon = instance_create(x - 95 * image_xscale, y + 18 * image_yscale,
                objSharkSubmarineCannon);
            cannon.headShark = id;
            cannon.healthpointsStart = healthpoints;
            cannon.healthpoints = cannon.healthpointsStart;
            cannon.respawn = false;
            cannon.parent = id;
        }
    }
    if (isDying)
    {
        blinkTimer = -1;
        slowdeathTimer++
        if (slowdeathTimer == 20)
        {
            instance_create(x - 5*image_xscale, y+14, objBigExplosion);
            playSFX(sfxMM9Explosion);
        }
        if (slowdeathTimer == 40)
        {
            instance_create(x -92*image_xscale, y-40, objBigExplosion);
            playSFX(sfxMM9Explosion);
            if (!finalDeath)
            {
                event_user(EV_DEATH);
            }
        }
        if (finalDeath)
        {
            if (slowdeathTimer == 60)
            {
                instance_create(x -64*image_xscale, y+24, objBigExplosion);
                playSFX(sfxMM9Explosion);
                
            }
            if (slowdeathTimer == 80)
            {
                instance_create(x -112*image_xscale, y-33, objBigExplosion);
                playSFX(sfxMM9Explosion);
            }
            if (slowdeathTimer == 100)
            {
                instance_create(x -70*image_xscale, y-8, objBigExplosion);
                playSFX(sfxMM9Explosion);
            }
            if (slowdeathTimer == 120)
            {
                instance_create(x -113*image_xscale, y+9, objBigExplosion);
                playSFX(sfxMM9Explosion);
            }
            if (slowdeathTimer == 140)
            {
                instance_create(x -98*image_xscale, y-7, objBigExplosion);
                playSFX(sfxMM9Explosion);
            }
            if (slowdeathTimer == 160)
                with (prtSharkSubmarine)
                    event_user(EV_DEATH);
        }
    }
}

if (isFight) // Keeping track of health.
{
    healthpoints = 0;
    if (instance_exists(cannon))
    {
        healthpoints += cannon.healthpoints;
    }
}

// Attack pattern.
if (entityCanStep())
{
    if (isFight)
    {
        startFiring = true;
        
        if (blinkTimer &lt;= 0) // Eye closed.
        {
            eyeIndex = 2;
        }
        if (blinkTimer == blinkMultiple) // Eye half open.
        {
            eyeIndex = 1;
        }
        if (blinkTimer &gt;= blinkMultiple * 2) // Eye wide open.
        {
            eyeIndex = 0;
        }
        blinkTimer++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objSharkSubmarineLaser)
{
    instance_destroy();
}
eyeIndex = 3;
if (!isDying)
{
    instance_create(x - 79*image_xscale, y-32, objBigExplosion);
    playSFX(sfxMM9Explosion);
    isDying = true;
    iFrames = 0;
    stopSFX(sfxEnemyHit);
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (introTimer &lt;= 0)
{
    if (killed)
        eyeIndex = 2;
    draw_sprite_ext(sprSharkSubmarineEye, eyeIndex, x - 93 * image_xscale,
        round(y) - 5 * image_yscale, image_xscale, image_yscale, image_angle,
        image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
