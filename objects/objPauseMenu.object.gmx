<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPauseMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

playerID = 0;
costumeID = 0;

phase = 0; // 0: increasing the black rectangle's alpha
menuPart = 0;
pageDrawOffset = 0;

//REGULAR MENU SPECIFIC STUFF
option = 0;

weaponOffset = 0;
offsetTimer = -1;

visibleWeapons = 10;

event_user(14);

oldWeapon = global.weapon[0];
resetWeapon = false; // Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened?

tankUsed = 0;

confirm = 0;
hotBarArrangeMode = false;

arrowTimer = 20;

quickScrollTimer = 0;

alterFlashEffect = 0;

// Weapon wheel
wheelBuffer = 0;
wheelDirection = -1;

// ITEM MENU - - - - - - -
rowLength = 9;
visibleRows = 4;

swapStoreOption = 0;
currentItem = 0;

rowDrawOffset = 0;
nextRowDrawOffset = 0;

// sets the order of items in pause screen
itemSortList = makeArray(
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
); // this code looks insane with all the items gutted out. i promise it's useful

items = makeArray();
var index = 0;

for (var i = 0; i &lt; array_length_1d(itemSortList); i ++;)
{
    if (itemData(itemSortList[i], "NAME") != -1)
    {
        if (variable_global_get(itemData(itemSortList[i], "VAR")) != 0)
        {
            items[(index ++)] = itemSortList[i];
        }
    }
}

rows = max(visibleRows, ceil(array_length_1d(items) / rowLength));

// - - - - - - - - - - - - - -

// Stop charging
with (objMegaman)
{
    wheelDirection = 0;
    wheelBuffer = 0;
    
    if (!inked)
    {
        playerPalette();
    }
}

mouse_x_previous = 0;
mouse_y_previous = 0;
badgeSoundAlternator = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Can't control while options menu is open
if (instance_exists(objOptionsMenu))
{
    exit;
}

var prevWeapon = global.weapon[playerID];

// do pause menu
switch (phase)
{
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 0: // Fading out
    
        with (objGlobalControl)
        {
            if (fadeAlpha == 1)
            {
                global.nextRoom = 0;
                other.visible = 1;
                other.phase = 1;
                showhealth = 0;
            }
        }
        
        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    
    case 1: // Fading in
    
        with (objGlobalControl)
        {
            if (fadeAlpha == 0)
            {
                other.phase = 2;
            }
        }
        
        event_user(0); // Moving the selection

        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    
    case 2: // Idle
    
        event_user(menuPart); // Moving the selection
        
        //Switch pages
        if (phase == 2) //Just making sure we haven't changed phases
        {
            var wpnDir = (global.keyWeaponSwitchRightPressed[playerID] - global.keyWeaponSwitchLeftPressed[playerID]);
            
            if (wpnDir != 0)
            {
                var maxParts = 1; //Maximum page index
                
                if (global.nextRoom != -1)
                {
                    var newPart = (menuPart + wpnDir);
                    
                    if (newPart == clamp(newPart, 0, maxParts))
                    {
                        if (menuPart == 0)
                        {
                            swapStoreOption = option;
                        }
                        else
                        {
                            option = swapStoreOption;
                        }
                        
                        menuPart = newPart;
                        phase = 6;
                        playSFX(sfxMenuMove);
                    }
                }
            }
        }

        break;
        
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    case 3: // Fading out
    
        with (objGlobalControl)
        {
            if (fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
            {
                showhealth = 1;
                
                with (other)
                {
                    if (resetWeapon)
                    {
                        global.weapon[playerID] = oldWeapon;
                    }
                    
                    //Weapon has been changed
                    if (global.weapon[playerID] != oldWeapon)
                    {
                        with (objMegaman)
                        {
                            autoFireDelay = 0;
                        }
                        
                        with (prtPlayerProjectile)
                        {
                            if (playerID == other.playerID)
                            {
                                instance_destroy();
                            }
                        }
                    }

                    global.nextRoom = 0;
                    visible = 0;
                }
            }
            else if (fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
            {
                with (other)
                {
                    audio_resume_all();
                    
                    instance_destroy();
                    global.frozen = 0;
                }
            }
        }

        break;

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    case 4: // Waiting for Health and Ammo to be restored
    
        with (objGlobalControl)
        {
            if ((increaseHealth == 0) &amp;&amp; (increaseAmmo == 0))
            {
                with (other)
                {
                    phase = 2; //Return to idle
                    tankUsed = 0;
                    
                    if (optionReturn &gt;= 0)
                    {
                        option = optionReturn;
                    }
                }
            }
        }

        break;

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    case 6: // Swap menu pages
    
        var targetOffset = (256 * menuPart);
        
        var dis = (targetOffset - pageDrawOffset);
        
        //Move towards destination
        pageDrawOffset += (min(abs(dis), 8) * sign(dis));
        
        //Destination reached
        if (pageDrawOffset == targetOffset)
        {
            phase = 2;
            currentItem = 0;
            rowDrawOffset = 0;
        }
        
        break;

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
}

// Update stored player sprite
if (instance_exists(objMegaman))
{
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            //Weapon has changed
            if (prevWeapon != global.weapon[playerID])
            {
                playerPalette();
                
                initChargeTimer = 0;
                chargeTimer = 0;
                performShoot = 0;
                releaseCharge = 0;
                isCharge = 0;
                autoFireDelay = 0;
                fireHeld = false;
            }
            
            other.costumeID = costumeID;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get currently visible weapons

weaponCount = 0;

for (var i = 0; i &lt;= global.totalWeapons; i ++;)
{
    var weapon = global.weaponHotbar[i];
    
    //Not locked?
    if (global.weaponLocked[weapon] &lt; 2 &amp;&amp; !global.weaponHidden[weapon])
    {
        weaponVisible[weaponCount] = weapon;
        
        if (phase != 2)
        {
            //Set which weapon to start the menu at
            if (global.weapon[0] == weapon)
            {
                option = weaponCount;
            }
        }
        
        weaponCount ++;
    }
}

visibleWeapons = min(10, weaponCount); // up to 10 visible
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ITEM MENU

var xDir = (global.keyRightPressed[playerID] - global.keyLeftPressed[playerID]);
var yDir = (global.keyDownPressed[playerID]) - (global.keyUpPressed[playerID]);

// Horizontal movement
if (xDir != 0)
{
    playSFX(sfxMenuMove);

    currentItem += xDir;
    
    if (currentItem % rowLength == 0 &amp;&amp; xDir &gt; 0)
    {
        currentItem -= rowLength;
    }
    else if ((currentItem + 1) % rowLength == 0 &amp;&amp; xDir &lt; 0)
    {
        currentItem += rowLength;
    }
}

// Vertical movement
if (yDir != 0)
{
    playSFX(sfxMenuMove);
    
    currentItem += (yDir * rowLength);

    if (currentItem &lt; 0)
    {
        currentItem += (rows * rowLength);
    }
    else if (currentItem &gt;= (rows * rowLength))
    {
        currentItem -= (rows * rowLength);
    }
    
    nextRowDrawOffset = (floor(currentItem / rowLength) - (2 - (yDir &lt; 0)));
    nextRowDrawOffset = max(nextRowDrawOffset, 0);
    nextRowDrawOffset = min(nextRowDrawOffset, max(0, (rows - visibleRows)));
    nextRowDrawOffset *= 32;
    
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// draw offset update
if (rowDrawOffset != nextRowDrawOffset)
{
    rowDrawOffset += 4 * sign(nextRowDrawOffset - rowDrawOffset);
}

if (currentItem &lt; array_length_1d(items))
{
    var item = items[currentItem];
    
    if (global.keyJumpPressed[playerID])
    {
        // Enable/disable upgrades
        if (itemData(item, "DISABLE"))
        {
            var variable = itemData(item, "VAR");
            
            variable_global_set(variable, -variable_global_get(variable));
            
            playSFX(sfxClamp);
            
            if (string_count("parallel", itemData(item, "DESC")) &gt; 0)
            {
                mm_ds_map_destroy(global.weaponID);
                weaponSetup();
            }
        }
        
        // Use item
        if (itemData(item, "USE"))
        {
            var itemName = itemData(item, "NAME");
            
            var cancelWeapon = false;
            
            /*switch(itemName)
            {
                // This is normally where code would go for usable items, but...
                // Well, all of them have been gutted from the engine files.
                // Idk. Make a case statement. Add your own    
            }*/
            
            if (cancelWeapon)
            {
                if (global.weapon[playerID] != oldWeapon)
                {
                    with (objMegaman)
                    {
                        playerHandleSprites("Normal");
                        autoFireDelay = 0;
                    }
                        
                    with (prtPlayerProjectile)
                    {
                        if (playerID == other.playerID)
                        {
                            instance_destroy();
                        }
                    }
                }
            }
        }
    }
    
    // assign to special key (for Map, Alter Weapons, Compass)
    if (global.keyMapPressed[playerID])
    {
        playSound = 1;
        
        if (itemData(item, "ASSIGN"))
        {
            var variable = itemData(item, "VAR");
            playSound = 0;
            
            if (global.mapKeyQuickItem != variable)
            {
                global.mapKeyQuickItem = variable;
                playSFX(sfxConcretePlatformUp);
            }
            else
            {
                global.mapKeyQuickItem = "";
                playSFX(sfxConcretePlatformDown);
            }
        }
    }
}

// exit
if (global.keyPausePressed[playerID])
{
    global.nextRoom = -1;
    phase = 3;

    playSFX(getGenericSFX(SFX_UNPAUSE));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WEAPON WHEEL EDITOR
var equip   = (global.keyJump[playerID] || global.keySlide[playerID]);
var unequip = global.keyShoot[playerID];

var newDirection = -1;

if (global.WheelEnabled)
{
    if (global.analogStickTilt[playerID, 1] &gt; 0.75)
    {
        newDirection = round(global.analogStickDirection[playerID, 1] / 45) mod 8;
        
        wheelBuffer = max(16, wheelBuffer);
        
        if (global.keyWheelSwitchPressed[playerID])
        {
            equip = 1;
            wheelBuffer = max(48, wheelBuffer);
        }
    }
    else if (global.keyWheelSwitchPressed[playerID])
    {
        wheelBuffer = max(60, wheelBuffer);
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if (newDirection != -1) //Direction selected
{
    wheelDirection = newDirection; // Update direction
    
    if (equip || unequip) //Reassign slot
    {
        var prevWpn = global.wheelSetWep[playerID, wheelDirection];
        var newWpn = -1;
        
        if (!unequip) // Jump - Equip; Shoot- Unequip;
        {
            newWpn = global.weapon[playerID];
        }
        
        if (newWpn != prevWpn)
        {
            global.wheelSetWep[playerID, wheelDirection] = newWpn;
            
            if (newWpn &gt;= 0)
            {
                playSFX(sfxWeaponWheelEquip);
            }
            else
            {
                playSFX(sfxWeaponWheelSelect);
            }
        }
    }
}

if (wheelBuffer) // Make the buffer run out
{
    wheelBuffer --;
    exit; //Prevent next event to be executed
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REGULAR MENU

var maximum = 28;

hotBarArrangeMode ++;
hotBarArrangeMode *= global.keyShoot[playerID]
hotBarArrangeMode *= !tankUsed; // Not during W-Tank
hotBarArrangeMode *= (option != 0); //Can rearrange the base weapon

// X-direction
var xDir = (global.keyRightPressed[playerID] - global.keyLeftPressed[playerID]);

// Y-direction
var yDir = (global.keyDown[playerID] - global.keyUp[playerID]);

var quickScrollTimerStart = 24;

if (yDir == 0) //No direction is held
{
    quickScrollTimer = quickScrollTimerStart; // &lt;-- time until quick scroll here
}
else
{
    if (quickScrollTimer != quickScrollTimerStart) // Activate during first frame
    {
        var wpnOptions = (weaponCount - 1);
        var newOption = (option + yDir);
        
        // Cancel out if on the ends
        if (newOption != clamp(newOption, 0, wpnOptions))
        {
            yDir = 0;
        }
        
        if (quickScrollTimer &gt; 0) // Cancel if timer isn't run out
        {
            yDir = 0;
        }
        else // Reset timer
        {
            quickScrollTimer = 6; // slight pause between scrolls
        }
    }

    quickScrollTimer --;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var ioption = option;

if (yDir != 0)
{
    if (option &lt; weaponCount)
    {
        while(true)
        {
            option += yDir;
            
            if (hotBarArrangeMode) //Keep within range
            {
                if (option != clamp(option, 1, (weaponCount - 1)))
                {
                    option = ioption;
                }
            }
            else //Cycle
            {
                option = modf(option, weaponCount);
            }
            
            //Check if the current weapon isn't disabled or if it is the buster
            if (!global.weaponLocked[weaponVisible[option]] || option == 0)
            {
                break;
            }
        }
        
        //Swap weapons
        if (hotBarArrangeMode)
        {
            if (option != ioption)
            {
                var swapIndex1 = indexOf(global.weaponHotbar, weaponVisible[option]);
                var swapIndex2 = indexOf(global.weaponHotbar, weaponVisible[ioption]);
                
                if ((swapIndex1 != -1) &amp;&amp; (swapIndex2 != -1))
                {
                    if (swapIndex1 != swapIndex2)
                    {
                        swap(global.weaponHotbar, swapIndex1, swapIndex2);
                        event_user(14); //Refresh
                    }
                }
            }
        }
    }
    else
    {
        option -= (3 * (1 - ((option &lt;= weaponCount + 3) * 2)));
    }
}

if (xDir != 0)
{
    if (option &lt; weaponCount) // horizontal movements while on the weapon list
    {
        option = (weaponCount + 2) - xDir;
    }
    else // horizontal movements while on the misc selections
    {
        if ((option == weaponCount + 1 &amp;&amp; xDir &lt; 0) // loop back to weapon list
         || (option == weaponCount + 3 &amp;&amp; xDir &gt; 0)
         || (option == weaponCount + 4 &amp;&amp; xDir &lt; 0)
         || (option == weaponCount + 6 &amp;&amp; xDir &gt; 0))
        {
            option = 0;
        }
        else
        {
            option += xDir;
        }
    }
}

// Option has changed
if (option != ioption)
{
    playSFX(sfxMenuMove);
    confirm = 0;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Resets weapon order (currently commented out due to the controls overlapping with the page-switching)
// Check if either have been pressed
/*if (global.keyWeaponSwitchRightPressed[playerID] || global.keyWeaponSwitchLeftPressed[playerID])
{
    //But both must be held
    if (global.keyWeaponSwitchRight[playerID] &amp;&amp; global.keyWeaponSwitchLeft[playerID])
    {
        for (var i = 0; i &lt;= global.totalWeapons; i ++;)
        {
            if (global.weaponHotbar[i] != i)
            {
                global.weaponHotbar[i] = i;
                playSFX(sfxMenuSelect);
            }
        }
    
        event_user(14);
        
        option = 0;
    }
}*/

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Select the weapon/tank
if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID]) &amp;&amp; (global.nextRoom == 0)
{
    var infiniteTanks = infiniteTanksEnabled();
        
    // The weapons
    if ((option &gt;= 0) &amp;&amp; (option &lt; weaponCount))
    {
        var weapon = weaponVisible[option];
        var canSelect = 1;
        
        if (tankUsed == 2) //Use W-Tank
        {
            //Can't recharge the health bar :)
            if (option == 0)
            {
                canSelect = 0;
            }
            
            //Is weapon already full?
            if (global.ammo[playerID, weapon] &gt;= maximum)
            {
                canSelect = 0;
            }
            
            if (canSelect)
            {
                phase = 4;
                
                with (objGlobalControl)
                {
                    increaseHealth = 0;
                    increaseAmmo   = maximum;
                    increaseWeapon = weapon;
                    increasePID    = other.playerID;
                }

                if (!infiniteTanks)
                {
                    global.wTanks     = max((global.wTanks - 1), 0);
                }
                
            }
        }
        else
        {
            // Check when using vehicles
            if (option != 0)
            {
                with (objMegaman)
                {
                    if (playerID == other.playerID)
                    {
                        if (instance_exists(vehicle))
                        {
                            if (!vehicle.weaponsAllowed)
                            {
                                canSelect = 0;
                            }
                        }
                    }
                }
            }
            else
            {
                if (global.lockBuster)
                    canSelect = 0;
            }
    
            if (canSelect)
            {
                global.nextRoom = -1;
                phase = 3;
                
                playSFX(getGenericSFX(SFX_UNPAUSE));
            }
        }
        
        if (!canSelect)
        {
            playSFX(sfxError);
        }
    }
                
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    var optionReduced = (option - (weaponCount + 1));
    
    
    // Everything past the weapons
    switch (optionReduced)
    {
    
    // Tanks
    case 0: // E-Tank
    case 1: // W-Tank
    case 2: // M-Tank
        
        var myTanks
        = ((global.eTanks) * (optionReduced == 0))
        + ((global.wTanks) * (optionReduced == 1))
        + ((global.mTanks) * (optionReduced == 2));
        
        if (myTanks) or (infiniteTanks)
        {
            //Check if we can use a tank
            var canUseTank = 0;
            
            //Health
            if ((optionReduced == 0) || (optionReduced == 2)) //E- &amp; M-Tank
            {
                if (global.playerHealth[playerID] &lt; maximum)
                {
                    canUseTank = 1;
                }
            }
            
            //Ammo
            if ((optionReduced == 1) || (optionReduced == 2)) //W- &amp; M-Tank
            {
                for (var i = 1; i &lt; weaponCount; i ++;)
                {
                    var weapon = weaponVisible[i];
                    
                    if (!global.weaponLocked[weapon] &amp;&amp; !(weapon == 0 &amp;&amp; global.lockBuster))
                    {
                        if (ceil(global.ammo[playerID, weapon]) &lt; maximum)
                        {
                            canUseTank = 1;
                        }
                    }
                }
            }
            
            if (canUseTank) //Effect
            {
                tankUsed = (optionReduced + 1);
                
                switch (optionReduced)
                {
                    case 0: //E-Tank
                        
                        option = 0;
                        optionReturn = -1;
                        phase = 4;
                        
                        with (objGlobalControl)
                        {
                            increaseHealth = maximum;
                            increaseAmmo   = 0;
                            increaseWeapon = 0;
                            increasePID    = other.playerID;
                        }
                        
                        if (!infiniteTanks)
                        {
                            global.eTanks     = max((global.eTanks - 1), 0);
                        }
                        break;
                        
                    // - - - - - - - - - - - - - - - - - - - - - - - -
                        
                    case 1: //W-Tank
                        
                        option = 0; // Go back to weapon column so we can select a weapon to fill
                        optionReturn = -1;
                        
                        playSFX(sfxMenuSelect);
                        
                        break;
                    
                    // - - - - - - - - - - - - - - - - - - - - - - - -
                        
                    case 2: //M-Tank
                        
                        optionReturn = option;
                        option = -1;
                        phase = 4;
                        
                        with (objGlobalControl)
                        {
                            increaseHealth = maximum;
                            increaseAmmo   = maximum;
                            increaseWeapon = -1;
                            increasePID    = other.playerID;
                        }
                        
                        if (!infiniteTanks)
                        {
                            global.mTanks     = max((global.mTanks - 1), 0);
                        }
                        break;
                        
                }
            }
            else
            {
                playSFX(sfxError);
            }
        }
    
        break;
                        
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                      
    case 3: // Options
    
        with (instance_create(x, y, objOptionsMenu))
        {
            playerID = other.playerID;
        }
        playSFX(sfxMenuSelect);
        
        break;
                        
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                      
    case 4: // Retry
    
        
        if (confirm)
        {
            global.nextRoom = global.checkpoint;
            global.endMusicOnRoomEnd = 1;
            global.levelSong = "";
            global.levelTrackNumber = 0;
        }
        else
        {
            confirm = 1;
        }
        
        playSFX(sfxMenuSelect);
        
        break;
                        
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                        
    case 5: // Exit
        
        if (confirm)
        {
            if (global.stageIsHub)
            {
                resetReturnLayers();
            }
            
            returnFromLevel(true, true);
            playSFX(sfxMenuSelect);
        }
        else
        {
            if (global.lockExitButton)
            {
                playSFX(sfxError);
            }
            else
            {
                confirm = 1;
                playSFX(sfxMenuSelect);
            }
        }
            
        break;
                        
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            
    }
}

// Set weapon
if (option &gt;= 0)
{
    if (option &lt; weaponCount)
    {
        global.weapon[playerID] = weaponVisible[option];
        
        // Which weapon to focus
        weaponOffset = (option - floor(visibleWeapons * 0.5));
        
        var maxFocus = (weaponCount - visibleWeapons - 1);
        
        weaponOffset = clamp(weaponOffset, 0, maxFocus);
    }
    else
    {
        tankUsed = 0;
        
        global.weapon[playerID] = 0;
    }
}

// Snap focus in position if close enough - Or if out of bounds
if ((abs(weaponOffset - offsetTimer) &lt; 0.05) || (offsetTimer &lt; 0))
{
    offsetTimer = weaponOffset;
}
else
{
    //Slowly move into place
    offsetTimer += ((weaponOffset - offsetTimer) / 8);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SETUP

// center in screen on nonstandard resolutions
x = view_xview + ((view_wview[0] - 256) / 2) - pageDrawOffset;
y = view_yview + ((view_hview[0] - 224) / 2);

if (phase == 0)
{
    exit;
}

// Draw itself
drawSelf();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REGULAR MENU

if (pageDrawOffset != 256)
{

    draw_set_color(c_white);
    
    var col;
    col[0, 0] = global.nesPalette[$0];
    col[1, 0] = global.nesPalette[$10];
    col[2, 0] = c_white;
    
    col[0, 1] = global.primaryCol[playerID];
    col[1, 1] = global.secondaryCol[playerID];
    col[2, 1] = c_white;
    
    col[0, 2] = make_color_rgb(255, 228, 164);
    col[1, 2] = c_white;
    col[2, 2] = c_white;
    
    if (alterFlashEffect) // FLASH
    {
        alterFlashEffect --;
        
        col[0, 0] = col[1, 0];
        col[1, 0] = c_white;
        
        col[0, 1] = col[1, 1];
        col[1, 1] = c_white;
    }
    
    
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    
    
    // WEAPON ICONS/BARS - WEAPON-WHEEL
    
    var wSep = 18; // Seperation between icons
    
    var surfw = 112;
    var surfh = 198;
    var surface = mm_surface_create(surfw, surfh);
    
    surface_set_target(surface);
    draw_clear_alpha(c_white, 0);
    
    draw_set_halign(fa_left);
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // WEAPON-WHEEL
    if (wheelBuffer &gt; 0) // Draw weapon wheel editor
    {
        var xCenter =  (surfw / 2);
        var yCenter = ((surfh / 2) - 16);
        
        draw_set_halign(fa_center);
        draw_text(xCenter, (yCenter - 72), "- WHEEL   #   EDITOR -");
        draw_set_halign(fa_left);
        
        draw_set_color(make_color_rgb(0, 64, 88));
        draw_circle((xCenter - 1), (yCenter - 1), 39, 0);
        
        draw_set_color(c_black);
        draw_circle((xCenter - 1), (yCenter - 1), 39 / (pi / 2), 0);
        
        var dir = global.analogStickDirection[playerID, 1];
        var dis = global.analogStickTilt[playerID, 1] * 12;
        
        draw_set_color(make_color_rgb(0, 136, 136));
        
        var cx = (xCenter - 1) + lengthdir_x(dis, dir);
        var cy = (yCenter - 1) + lengthdir_y(dis, dir);
        
        draw_circle(cx, cy, 12, 0);
        
        draw_set_color(c_white);
        
        drawWeaponIcon(global.weapon[playerID], playerID, global.costumeID[? global.costumeSelected[playerID]], (xCenter - 8), (yCenter - 8), 1);
        
        drawWeaponWheel(playerID, xCenter, yCenter, wheelDirection);
        
        //Button prompts
        var xx = 8;
        var yy = yCenter + 64;
        
        //Assign
        var buttons = makeArray("jump", "slide", "wheel2", "shoot");
        
        var buttonCount = array_length_1d(buttons);
        
        for (var i = 0; i &lt; buttonCount; i ++;)
        {
            if (i &lt; 2)
            {
                draw_text((xx + 10), yy, ",");
            }
            
            drawButtonPrompt(buttons[i], xx, yy,false, playerID);
            
            xx += 16;
            
            if (i == 2)
            {
                draw_text(xx, yy, "Assign");
                
                xx = 8;
                yy += 16;
            }
            else if (i == 3)
            {
                draw_text(xx, yy, "Unassign");
            }
        }
        
        arrowTimer = 0;
    }
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // WEAPONS
    else
    {
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        var yOff = -round((offsetTimer mod 1) * wSep) + 1;
        var weaponStart = max(floor(offsetTimer), 0);
        var weaponEnd   = min(ceil(offsetTimer + visibleWeapons), (weaponCount - 1));
        
        for (var i = weaponStart; i &lt;= weaponEnd; i ++;)
        {
            var xx = 2;
            var yy = yOff;
            
            var w = weaponVisible[i];
            var current = (option == i);
            
            // Icon
            drawWeaponIcon(w, playerID, global.costumeID[? global.costumeSelected[playerID]], xx, yy, current, 1, 0);
            
            if (current)
            {
                buttonx = (xx - 10);
                buttony = yy;
            }
            
            xx += 20;
            
            if (!global.weaponLocked[w] &amp;&amp; !(w == 0 &amp;&amp; global.lockBuster))
            {
                // Name
                draw_set_color(col[!current, (current * 2) - (current * !(hotBarArrangeMode mod 8 &lt; 4))]);
    
                wname = global.weaponName[w];
                
                dot = string_pos(" ", wname);
                if (dot)
                {
                    wname = string_insert(".", string_delete(wname, 2, dot - 1), 2);
                }
                var wType = 0;
                switch (wname)
                {
                    case "R.BIKE":wType++;
                    case "R.JET":wType++;
                    case "R.COIL":wType++;
                    case "M.BUSTER":
                    
                    /*if (global.customCostumeEquipped[playerID] &amp;&amp; global.customCostumeTextLengths[playerID,wType+2] &gt; 0)
                    {
                        customCostume_DrawText(xx, yy, wType+2,false,fa_left,fa_top,playerID);
                    }
                    else
                    {*/
                        draw_text(xx, yy, wname);
                    //}
                    
                    break;
                    default:
                        draw_text(xx, yy, wname);
                    break;
                    
                }
                
                
                draw_set_color(c_white);
                
                // Drawing ammo bars
                if (i == 0) //Health
                {
                    var ammo = global.playerHealth[playerID];
                    var colSlot = 2;
                }
                else //Ammo
                {
                    var ammo = global.ammo[playerID, w];
                    var colSlot = 1;
                }
                
                ammo = ceil(ammo);
                colSlot *= current;
                
                yy += 8;
                
                // Draw the actual bar
                for (var ii = 1; ii &lt;= 28; ii ++;)
                {
                    var xxx = xx + (2 * (ii - 1));
                    
                    draw_set_colour(col[0, colSlot]);
                    
                    if (ammo &gt;= ii)
                    {
                        draw_rectangle(xxx, (yy + 1), xxx, (yy + 6), 0);
                        
                        draw_set_colour(col[1, colSlot]);
                    }
                    
                    draw_rectangle(xxx, (yy + 3), xxx, (yy + 4), 0);
                }
    
                // Draw infinite energy mark over relevant bars
                if (global.infiniteEnergy[w])
                {
                    shaderSetColorreplace(make_color_rgb(32, 32, 32), col[0, colSlot],
                                          make_color_rgb(64, 64, 64), col[1, colSlot]);
                    
                    draw_sprite_ext(sprInfinityMark, 0, xx, yy, 1, 1, 0, c_white, 1);
                    
                    shader_reset();
                }
            }
            else // Draw disabled
            {
                draw_sprite_ext(sprPauseMenuWeaponDisabled, 0, xx, yy, 1, 1, 0, c_white, 1);
            }
    
            yOff += wSep;
        }
    }
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    var xx = (x + 22);
    var yy = (y + 14);
    
    surface_reset_target();
    draw_surface(surface, xx, yy);
    mm_surface_free(surface);
    
    draw_set_color(c_white);
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    arrowTimer ++;
    
    draw_set_halign(fa_center);
    
    // Draw Arrows
    if ((arrowTimer mod 40) &gt;= 20)
    {
        var arrowUp     = (weaponOffset &gt; 0);
        var arrowDown   = (weaponOffset &lt; (weaponCount - visibleWeapons - 1));
        
        var xx = (x + 78)
        var yy = (y + 215);
        
        // Up
        if (arrowUp)
        {
            draw_sprite(sprArrow, 2, xx - (6 * arrowDown), yy); 
        }
        
        // Down
        if (arrowDown)
        {
            draw_sprite(sprArrow, 3, xx + (6 * arrowUp), yy); 
        }
    }
    
    
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    
    
    draw_set_halign(fa_middle);
    draw_set_valign(fa_top);
    
    var optionReduced = (option - (weaponCount + 1));
    
    //Align the items along the bottom-center
    
    var tankFlash = (((arrowTimer / 12) mod 1) &lt; 0.5);
    
    var item    = 0;
    var itemx   = 0;
    var itemy   = 1;
    var itemSpr = 2;
    var itemImg = 3;
    var itemPri = 4;
    var itemSec = 5;
    var itemCol = 6;
    var itemStr = 7;
    
    var infiniteTanks = infiniteTanksEnabled();
    var infiniteTanksText = "INF";
    
    //E-Tank
    drawItem[item, 0] = 160;
    drawItem[item, 1] = 32;
    drawItem[item, 2] = sprETank;
    drawItem[item, 3] = 0;
    drawItem[item, 4] = make_colour_rgb(0, 236, 220);
    drawItem[item, 5] = make_colour_rgb(0, 120, 255);
    drawItem[item, 6] = (optionReduced == 0) || ((tankUsed == 1) * tankFlash);
    drawItem[item, 7] = ternary(infiniteTanks,infiniteTanksText,zeroPad(clamp((global.eTanks), 0, global.maxETanks), 2));
    item ++;
    
    //W-Tank
    drawItem[item, 0] = drawItem[(item - 1), 0] + 30;
    drawItem[item, 1] = drawItem[(item - 1), 1];
    drawItem[item, 2] = sprWTank;
    drawItem[item, 3] = 0;
    drawItem[item, 4] = make_colour_rgb(0, 236, 220);
    drawItem[item, 5] = make_colour_rgb(0, 120, 255);
    drawItem[item, 6] = (optionReduced == 1) || ((tankUsed == 2) * tankFlash);
    drawItem[item, 7] = ternary(infiniteTanks,infiniteTanksText,zeroPad(clamp((global.wTanks), 0, global.maxWTanks), 2));
    
    item ++;
    
    //M-Tank
    drawItem[item, 0] = drawItem[(item - 1), 0] + 30;
    drawItem[item, 1] = drawItem[(item - 1), 1];
    drawItem[item, 2] = sprMTank;
    drawItem[item, 3] = 0;
    drawItem[item, 4] = make_colour_rgb(0, 236, 220);
    drawItem[item, 5] = make_colour_rgb(0, 120, 255);
    drawItem[item, 6] = (optionReduced == 2) || ((tankUsed == 3) * tankFlash);
    drawItem[item, 7] = ternary(infiniteTanks,infiniteTanksText,zeroPad(clamp((global.mTanks), 0, global.maxMTanks), 2));
    
    item ++;
    
    //Option
    drawItem[item, 0] = 148;
    drawItem[item, 1] = 224;
    drawItem[item, 2] = sprGotoOptions;
    drawItem[item, 3] = (option == (weaponCount + 4));
    drawItem[item, 4] = -1;
    drawItem[item, 5] = -1;
    drawItem[item, 6] = 0;
    drawItem[item, 7] = "";
    
    item ++;
    
    //Retry
    var img = (option == weaponCount + 5);
    
    drawItem[item, 0] = 182;
    drawItem[item, 1] = drawItem[(item - 1), 1];
    drawItem[item, 2] = sprGotoCheckpoint;
    drawItem[item, 3] = (img + (img * confirm));
    drawItem[item, 4] = -1;
    drawItem[item, 5] = -1;
    drawItem[item, 6] = 0;
    drawItem[item, 7] = "";
    
    item ++;
    
    //Exit
    var img = (option == weaponCount + 6);
    
    drawItem[item, 0] = 223;
    drawItem[item, 1] = drawItem[(item - 1), 1];
    drawItem[item, 2] = sprExit;
    drawItem[item, 3] = (img + (img * confirm));
    drawItem[item, 4] = -1;
    drawItem[item, 5] = -1;
    drawItem[item, 6] = 0;
    drawItem[item, 7] = "";
    
    item ++;
    
    //Element
    drawItem[item, 0] = 156;
    drawItem[item, 1] = 108;
    drawItem[item, 2] = sprEnergyElement;
    drawItem[item, 3] = 0;
    drawItem[item, 4] = -1;
    drawItem[item, 5] = -1;
    drawItem[item, 6] = 0;
    drawItem[item, 7] = zeroPad(global.energyElements, 3);
    
    item ++;
    
    //Lives
    drawItem[item, 0] = 184;
    drawItem[item, 1] = drawItem[(item - 1), 1];
    drawItem[item, 2] = sprLife;
    drawItem[item, 3] = 0;
    drawItem[item, 4] = -1;
    drawItem[item, 5] = -1;
    drawItem[item, 6] = 0;
    drawItem[item, 7] = zeroPad(global.livesRemaining, 2);
    
    item ++;
    
    //Bolts
    drawItem[item, 0] = 216;
    drawItem[item, 1] = drawItem[(item - 1), 1];
    drawItem[item, 2] = sprBoltBig;
    drawItem[item, 3] = 0;
    drawItem[item, 4] = make_colour_rgb(56, 184, 248);
    drawItem[item, 5] = make_colour_rgb(0, 112, 236);
    drawItem[item, 6] = 1;
    drawItem[item, 7] = zeroPad(min(9999, global.bolts), 4);
    
    item ++;
    
    
    
    // - - - - - - -
    
    draw_set_font(global.font2);
    
    for (var i = 0; i &lt; item; i ++;)
    {
        var sspr = drawItem[i, 2];
        var simg = drawItem[i, 3];
        
        var xx = (x + drawItem[i, 0]);
        var sx = (xx + sprite_get_xoffset(sspr));
            sx -= (sprite_get_width(sspr) / 2);
            
        var yy = (y + drawItem[i, 1]);
        var sy = (yy + sprite_get_yoffset(sspr));
            sy -= sprite_get_height(sspr);
            
        var val  = drawItem[i, 7];
    
        if (drawItem[i, 4] != -1) //Recolor
        {
            var colSlot = drawItem[i, 6];
            
            shaderSetColorreplace(drawItem[i, 5], col[0, colSlot], drawItem[i, 4], col[1, colSlot]);
        }
        
        if (sspr == sprLife) // costume override
            drawPlayer(playerID, costumeID, 16, 13, sx + 8, sy - 1, 1, 1);
        else
            draw_sprite(sspr, simg, sx, sy);
    
        shader_reset();
        
        if (val != "")
        {
            draw_text((xx - 1), (yy + 1), val);
        }
    }
    
    draw_set_font(global.font);
    
    //Draw button prompt
    if (optionReduced = clamp(optionReduced, 0, 5))
    {
        var sspr = drawItem[optionReduced, 2];
        
        var xx = (x + drawItem[optionReduced, 0]) - 1;
            xx -= (3 + (sprite_get_width(sspr) / 2));
            
        var yy = (y + drawItem[optionReduced, 1]) - 1;
            yy -= (3 + (sprite_get_height(sspr)));
        
        drawButtonPrompt("jump", xx, yy,false, playerID);
    }
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // Mega Man
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            var xx = other.x + 210
            var yy = other.y + 71
            
            // sprite
            drawPlayer(playerID, costumeID, 0, 0, xx, yy, -1, 1);
    
            // mugshot
            //drawPlayer(playerID, costumeID, 17, 12, (xx - 44), (yy - 3), 1, 1);
            drawPlayerMugshot(playerID,costumeID,(xx - 44),(yy - 3));
        }
    }
    
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    
    // Colored text overlays
    if (global.showColoredTextOverlays)
    {
        var myColor = make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue);
        
        draw_sprite_ext(sprDot, 0, (x + 16), y, view_wview[0] - 32, view_hview[0], 0, myColor, (global.coloredTextOverlaysOpacity / 255));
    }
}
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//Switch page prompt
var dir; 
var prompt = makeArray("switchleft", "switchright");

for (ii = 0; ii &lt;= 1; ii ++;)
{
    var xx = x + 256;
    var yy = (y + 193);
    
    dir = (ii - !ii);
    
    if (dir &gt; 0)
    {
        xx -= 20;
    }
    else
    {
        xx += 12;
    }
    
    if (((arrowTimer / 96) mod 1) &lt; 0.5)
    {
        xx += dir;
    }
    
    var surfw = 16;
    var surfh = 26;
    
    var surf = mm_surface_create(surfw, surfh);
    
    surface_set_target(surf);
    draw_clear_alpha(c_white, 0);
    
    // - - - - - -
    
    draw_set_color(c_black);
    draw_rectangle(1, 1, surfw - 2, surfh - 2, 0);
    
    draw_set_blend_mode(bm_subtract);
    draw_point(1, 1);
    draw_point(surfw - 2, 1);
    draw_point(1, surfh - 2);
    draw_point(surfw - 2, surfh - 2);
    
    draw_set_blend_mode(bm_normal);
    draw_set_color(c_white);
    
    var midx = (surfw / 2);
    var midy = (surfw / 2);
    
    drawButtonPrompt(prompt[ii], (midx - 4), (midy - 4),false, playerID);
    
    draw_sprite_ext(sprUIArrow, 0, midx, (midy + 11), 1, 1, (180 * (dir &lt; 0)), c_white, 1);
    
    // - - - - - -
    
    surface_reset_target();
    
    var shader = shAddPartialOutline;
    shader_set_safe(shader);
    
    var col = c_white;
    shader_set_uniform_f(shader_get_uniform(shader,"u_color"), colour_get_red(col), colour_get_green(col), colour_get_blue(col));
    shader_set_uniform_f(shader_get_uniform(shader,"offsetx"), 1 / surfw);
    shader_set_uniform_f(shader_get_uniform(shader,"offsety"), 1 / surfh);
    
    draw_surface_ext(surf, (xx - (surfw / 2)), (yy - (surfh / 2)), 1, 1, 0, c_white, 1);
    
    shader_reset();
    mm_surface_free(surf);
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//Draw prompt hints

draw_set_halign(0);


var promptHintTimer = floor(arrowTimer / 128) mod (2);
var promptHint = "";
var promptHintButton = "";

switch (promptHintTimer)
{
    case 0:
    
        promptHintButton = "shoot";
        promptHint = "REARRANGE";
        
        break;
    case 1:
        if (global.WheelEnabled)
        {
            promptHintButton = "wheel";
            promptHint = "WHEEL EDITOR";
        }
        else
        {
            promptHintButton = "shoot";
            promptHint = "REARRANGE";
        }
        
        break;
}

if (promptHintButton != "")
{
    var xx = (x + 8)
    var yy = (y + 212);
    
    drawButtonPrompt(promptHintButton, xx, yy,false, playerID);
    draw_text(xx + 12, yy, promptHint);
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ITEM MENU
if (pageDrawOffset == 0)
{
    exit;
}
clearDrawState();
var surf = mm_surface_create(211, 121);

surface_set_target(surf);

draw_clear_alpha(c_white, 0);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var xseperation = 23;
var yseperation = 32;

// ROWS
for (var i = 0; i &lt; rows; i ++;)
{
    var yy = (yseperation * i) - rowDrawOffset;
}

// ITEMS
for (var i = 0; i &lt; array_length_1d(items); i ++;)
{
    xx = 4 + (xseperation * (i mod rowLength));
    yy = 3 + (yseperation * floor(i / rowLength)) - rowDrawOffset;

    var variable    = itemData(items[i], "VAR");
    var sprite      = itemData(items[i], "SPRITE");
    var img         = itemData(items[i], "SUBIMG");
    
    draw_sprite(sprite, img, xx, yy);
    
    // Draw that the weapon is disabled
    if (variable_global_get(variable) &lt; 0)
    {
        draw_sprite(sprDisabled, 0, xx, yy);
    }
    
    // Draw that it is the quickitem
    if (global.mapKeyQuickItem == variable)
    {
        drawButtonPrompt("map", (xx + 9), (yy + 9),false, playerID);
    }
}

// CURSOR
xx = (xseperation * (currentItem mod rowLength));
yy = (yseperation * floor(currentItem / rowLength)) - rowDrawOffset;

draw_sprite(sprPauseMenuCursor, 0, xx, yy - 1);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

surface_reset_target();

draw_surface(surf, (x + 279), (y + 36));

mm_surface_free(surf);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//Instruction
draw_set_halign(0);

var instructionButton = "";
var instruction = "";

if (currentItem &lt; array_length_1d(items))
{
    var i = items[currentItem];
    
    // Name
    var str = itemData(i, "NAME");
    
    draw_text((x + 286), (y + 164), str);
    
    // Description
    var str = itemData(i, "DESC");
    
    draw_set_font(global.fontSmall);
    draw_text_ext((x + 279), (y + 175), str, 8, 208);
    draw_set_font(global.font);
    
    // Assign text
    if (itemData(i, "ASSIGN"))
    {
        instructionButton = "map";
        instruction = "ASSIGN / UNASSIGN";
    }
    else if (itemData(i, "DISABLE"))
    {   
        instructionButton = "jump";
        instruction = "ENABLE / DISABLE";
    }
    else if (itemData(i, "USE"))
    {   
        instructionButton = "jump";
        instruction = "USE";
    }
}

if (instruction != "")
{
    var gap = 16;
    
    var xx = (x + 384) - ((string_width(instruction) + gap) / 2)
    var yy = (y + 20);
    
    drawButtonPrompt(instructionButton, xx, yy, false, playerID);
    draw_text(xx + gap, yy, instruction);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
