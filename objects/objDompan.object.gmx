<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDompan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>sprDompan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "grounded";

facePlayerOnSpawn = true;

// Enemy specific code
ground = 1;
calibrated = 0;
sp = 1;
jump = 0;

action = 0;
actionTimer = 0;

calibrateTimer = 80;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(xcoll!=0)
{
    xspeed=xcoll;
}


if (entityCanStep())
{
    xSpeedTurnaround();
    
    // Set direction
    calibrateTimer += 1;
    
    if (calibrateTimer &gt;= 80)
    {
        if (instance_exists(target))
        {
            if (sprite_index != sprDompanJump)
            {
                calibrateDirection();
                xspeed = abs(xspeed) * image_xscale;
                calibrateTimer = 0;
            }
        }
    }
    
    // Jump
    if (ground)
    {
        if (xspeed != 0)
        {
            if (checkSolid(3 * sign(xspeed), 0))
            {
                if (!checkSolid(3 * sign(xspeed), -32))
                {
                    jump = 1;
                    xspeed = 0;
                    action = 1;
                    actionTimer = 0;
                }
            }
        }
    }
    if (action)
    {
        actionTimer += 1;
        if (action == 1)
        {
            if (actionTimer == 10)
            {
                action = 0;
                jump = 2;
                yspeed = -4.5;
                ground = 0;
            }
        }
        else if (action == 2)
        {
            if (actionTimer == 10)
            {
                action = 0;
                jump = 0;
                alarm[0] += 10;
            }
        }
    }
    
    if (ground &amp;&amp; !jump)
    {
        if (sprite_index == sprDompanJump)
        {
            image_index = 0;
        }
        sprite_index = sprDompan;
        image_speed = 0.1;
        xspeed = sp * image_xscale;
    }
    else
    {
        sprite_index = sprDompanJump;
        image_speed = 0;
        xspeed = 0;
        
        if (jump == 0)
        {
            jump = 3;
        }
        if (jump == 1)
        {
            image_index = 0;
        }
        if (jump == 2 || jump == 3)
        {
            image_index = 1;
            if (ground &amp;&amp; yspeed == 0)
            {
                action = 2;
                actionTimer = 0;
                jump = 1;
            }
            else if (jump == 2)
            {
                if (yspeed &gt; -2)
                {
                    xspeed = sp * image_xscale;
                }
            }
        }
    }
}
else if (dead)
{
    calibrateTimer = 80;
    action = 0;
    actionTimer = 0;
    jump = 0;
    sprite_index = sprDompan;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

instance_create(x, bbox_top, objDompanFireworkSpark);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
