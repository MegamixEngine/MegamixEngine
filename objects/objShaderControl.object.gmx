<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();


if (!shader_is_compiled(shLegacyCollectionTV) || !shader_is_compiled(shLegacyCollectionMonitor))
{
    print("DirectX must be installed to use shaders!",WL_SHOW,c_white,true);
    global.screenShader = 0;
    global.paletteShader = 0;
    instance_destroy();
    exit;
}

if (!global.screenShader &amp;&amp; !global.paletteShader)
{
    instance_destroy();
    exit;
}
switch (global.screenShader)//Destroy this object whenever the shader is switched, so that we save on the number of surfaces required.
{
    default:
        currentFrame = -1;
        lastFrame = -1;
        artifactFrame = -1;
        crtFrame = -1;
        compositeSurf = -1;
        
        varS0 = shader_get_sampler_index(shLegacyCollectionTV,"sam_s");
        varS1 = shader_get_sampler_index(shLegacyCollectionTV,"artifactSam_s");
        varS2 = shader_get_sampler_index(shLegacyCollectionTV,"prevSam_s");
        varT0 = shader_get_uniform(shLegacyCollectionTV,"t_tex");
        varT1 = shader_get_uniform(shLegacyCollectionTV,"t_prevTex");
        varT2 = shader_get_uniform(shLegacyCollectionTV,"t_artifactMap");
        
        varCRTS0 = shader_get_sampler_index(shLegacyCollectionMonitor,"sam_s");
        varCRTS1 = shader_get_sampler_index(shLegacyCollectionMonitor,"maskSam_s");
        
        
        var test = shader_get_uniform(shLegacyCollectionTV,"test");
        
        crtSprite = sprite_get_texture(sprLCCRTMask,0);
        artifactSprites = makeArray(sprite_get_texture(sprLCNTSCArtifact,0),sprite_get_texture(sprLCNTSCArtifact,1),sprite_get_texture(sprLCNTSCArtifact,2));
        artCounter = 0;
        
        
        
        
        varUpscale = shader_get_uniform(shHQX,"UPSCALE");
        varTextureWidth = shader_get_uniform(shHQX,"TEXTURE_WIDTH");
        varTextureHeight = shader_get_uniform(shHQX,"TEXTURE_HEIGHT");
        varSurfaceWidth = shader_get_uniform(shHQX,"SURFACE_WIDTH");
        varSurfaceHeight = shader_get_uniform(shHQX,"SURFACE_HEIGHT");
        varHQXSamp = shader_get_sampler_index(shHQX,"SAMP");
        varHQXSLUT = shader_get_sampler_index(shHQX,"LUT");
        
    break;
    //Quick note for new shaders, ALL shaders must use currentFrame instead of application_surface, as the latter doesn't seem to want to draw for above. Global Control accomodates for this with the border.
}

varSP = shader_get_sampler_index(shPaletteBender,"palette");
varSPR = shader_get_sampler_index(shPaletteBender,"referencePalette");
varPL = shader_get_uniform(shPaletteBender,"paletteLength");
varTRef = sprite_get_texture(pltNES,0);
varTPals = makeArray(sprite_get_texture(pltLC1,0),sprite_get_texture(pltRM9,0),
sprite_get_texture(pltYUV,0),sprite_get_texture(pltFamicubeSmall,0),
sprite_get_texture(pltJ8bit,0),
sprite_get_texture(pltGB3DSGreen,0),sprite_get_texture(pltGB3DSPocket,0));
//NOTE: 3DS here is actually switch! Changed cause 3DS green was too blown out.
varEnf = shader_get_uniform(shPaletteBender,"doEnforce");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//printErr("DEATH");
switch (global.screenShader)//Destroy this object whenever the shader is switched, so that we save on the number of surfaces required.
{
    case 0:
    
    break;
    default:
        mm_surface_free(lastFrame);
        mm_surface_free(currentFrame);
        mm_surface_free(artifactFrame);
        mm_surface_free(crtFrame);
        mm_surface_free(compositeSurf);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Palette drawing code.
if (!surface_exists(currentFrame))
{
    switch (global.screenShader)
    {
        case 0:
        case 1:
        case 2:
            currentFrame = mm_surface_create(view_wview[0]*global.screensize,240*global.screensize);
        break;
        case SHADERS_1XSTART://1X
        case SHADERS_1XSTART+1://2X
        case SHADERS_1XSTART+2://3X
        case SHADERS_1XSTART+3://4X
            var index = global.screenShader-SHADERS_1XSTART+1;
            currentFrame = mm_surface_create(view_wview[0],240);
        break;
        
    }
}
surface_set_target(currentFrame);
draw_clear_alpha(c_black,0);
if (global.paletteShader &gt; 0)
{
    shader_set_safe(shPaletteBender);
    shader_set_uniform_f(varPL,64);
    shader_set_uniform_f(varEnf,global.paletteShader &gt; 5);
    texture_set_stage(varSP,varTPals[global.paletteShader-1]);
    texture_set_stage(varSPR,varTRef);
    draw_surface(application_surface,0,0);
    shader_reset();
}
else
{
    shader_reset();
    draw_surface(application_surface,0,0);
}
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen drawing code. Called by global control before screen borders.



switch (global.screenShader)
{
    case 0:
        event_user(3);
    break;
    case 1:
    case 2:
        artCounter = (artCounter+1)%3;
        
        if (!surface_exists(lastFrame))
        {
            lastFrame = mm_surface_create(view_wview[0]*global.screensize,240*global.screensize);//For technical reasons, the LC CRT shader only works right if the height is 240 (Native NES resolution), so we extend a bit further than the screen here.
            
        }
        if (!surface_exists(artifactFrame))
        {
            artifactFrame = mm_surface_create(256,240);
        }
        if (!surface_exists(crtFrame))
        {
            event_user(1);
        }
        if (!surface_exists(compositeSurf))
        {
            compositeSurf = mm_surface_create(view_wview[0]*global.screensize,240*global.screensize);
        }
        surface_set_target(artifactFrame);
        draw_sprite_tiled(sprLCNTSCArtifact,floor(artCounter),0,0);
        surface_reset_target();
        
        
        
        
        event_user(3);
        if (global.screenShader == 1)
        {//Apply afterimage and arberration effects.
            shader_set_safe(shLegacyCollectionTV);
            shader_set_uniform_f(varT0,0,0,.5,1);
            shader_set_uniform_f(varT1,.5,0,.5,1);
            shader_set_uniform_f(varT2,0,0,1,1);//0,.5,.5,.5);
            texture_set_stage(varS0,surface_get_texture(currentFrame));
            texture_set_stage(varS1,surface_get_texture(artifactFrame));//artifactSprites[artCounter]);
            texture_set_stage(varS2,surface_get_texture(lastFrame));
            //printErr(artCounter);
            
        }
        surface_reset_target();
        surface_set_target(compositeSurf);
        draw_surface(currentFrame,0,0);
        
        shader_set_safe(shLegacyCollectionMonitor);
        texture_set_stage(varCRTS0,surface_get_texture(compositeSurf));
        texture_set_stage(varCRTS1,surface_get_texture(crtFrame));
        draw_surface(compositeSurf,0,0);
        
        
        
        surface_reset_target();
        surface_set_target(lastFrame);
        draw_clear(c_black);
        
        surface_copy(lastFrame,0,0,compositeSurf);//currentFrame);
        surface_reset_target();
        surface_set_target(currentFrame);
        draw_surface(compositeSurf,0,0);//currentFrame,0,0);
        
        shader_reset();
        surface_reset_target();
    break;
    case SHADERS_1XSTART://1x
        event_user(3);
    break;
    case SHADERS_1XSTART+1://HQ2X
    case SHADERS_1XSTART+2://3X
    case SHADERS_1XSTART+3://4X
    
        //DONE
        event_user(3);
        var upscale = global.screenShader-SHADERS_1XSTART+1;//floor(global.screensize);//(mouse_x-view_xview)/8);
        
        if (!surface_exists(compositeSurf))
        {
            compositeSurf = mm_surface_create(view_wview[0]*upscale,224*upscale);
        }
        if (!surface_exists(artifactFrame))
        {
            artifactFrame = mm_surface_create(view_wview[0],240);//256,224);
            
        }
        surface_set_target(artifactFrame);
        draw_clear_alpha(c_black,0);
        draw_surface_ext(currentFrame,0,0,1,1,0,c_white,1);
        surface_reset_target();
        
        surface_set_target(compositeSurf);
        draw_clear_alpha(c_black,0);
        
        shader_set(shHQX);
        shader_set_uniform_f(varTextureWidth,256);
        shader_set_uniform_f(varTextureHeight,240);
        shader_set_uniform_f(varUpscale,upscale);
        shader_set_uniform_f(varSurfaceWidth,surface_get_width(compositeSurf));
        shader_set_uniform_f(varSurfaceHeight,surface_get_height(compositeSurf));
        switch (upscale)
        {
            case 2:
                texture_set_stage(varHQXSLUT,sprite_get_texture(sprHQ2X,0));
            break;
            case 3:
                texture_set_stage(varHQXSLUT,sprite_get_texture(sprHQ3X,0));
            break;
            default:
                texture_set_stage(varHQXSLUT,sprite_get_texture(sprHQ4X,0));
            break;
            
        }
        draw_surface_ext(artifactFrame, 0, 0, upscale, upscale, 0, c_white, 1);

    shader_reset();
        surface_reset_target();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For TV/Monitor
mm_surface_free(crtFrame);
crtFrame = mm_surface_create(512,256);
surface_set_target(crtFrame);
draw_sprite(sprLCCRTMask,0,0,0);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///(unused)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
