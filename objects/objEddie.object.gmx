<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEddie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform_object(objExplosion, ev_create, ev_create);

event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 0;
image_speed = 0;

canHit = false;
stopOnFlash = false;

phase = 0;
timer = 0;

itemReference = noone;

// @cc the object_index of the item Eddie will send out. If not set, he will choose
// randomly from his pickup pool
myItem = 0;

// @cc time until item disappears
disappearTime = -1;

// @cc endlessly dispense the relevant item
infiniteDispense = false;

// @cc detect range for player
range = 40;

// @cc if set to true, Eddie will never respawn once the item is given out
permanent = true;

// @cc if set to false, Eddie will stay still and not move towards MM when giving out items
moveTowardsPlayer = true;

//code to execute on item throw
code = "";
//scrpt to execute on item throw
script = scrNoEffect;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (phase == 0)
    {
        if (ground &amp;&amp; moveTowardsPlayer)
        {
            if (!(timer mod 6))
            {
                image_index = (image_index + 1) mod 3;
            }
            
            calibrateDirection();
            xspeed = image_xscale;
        }
        else
        {
            xspeed = 0;
            if !moveTowardsPlayer
            {
                image_index = (3 * (timer &gt;= 112));
                if (timer &gt;= 120)
                    timer = 0;
                calibrateDirection();
            }
        }
        
        if (instance_exists(target))
        {
            var itemPassCheck = true;
            if (infiniteDispense)
            {
                if (myItem == objWeaponEnergyBig)
                    itemPassCheck = (global.ammo[target.playerID, global.weapon[target.playerID]] &lt; 28)
                else if (myItem == objLifeEnergyBig)
                    itemPassCheck = (global.playerHealth[target.playerID] &lt; 28);
                else if (myItem == objETank)
                    itemPassCheck = (global.eTanks &lt; global.maxETanks);
                else if (myItem == objWTank)
                    itemPassCheck = (global.wTanks &lt; global.maxWTanks);
                else if (myItem == objMTank)
                    itemPassCheck = (global.mTanks &lt; global.maxMTanks);
            }
            
            if (abs(x - target.x) &lt;= range &amp;&amp; (!infiniteDispense) || (infiniteDispense &amp;&amp; itemPassCheck &amp;&amp; !instance_exists(itemReference)))
            {
                timer = 0;
                phase = 1;
                image_index = 0;
                xspeed = 0;
            }
        }
    }
    else
    {
        switch (timer)
        {
            case 32:
                image_index = 3;
                break;
            case 40:
                image_index = 0;
                break;
            case 48:
                image_index = 4;
                break;
            case 56:
                image_index = 5;
                event_user(0);
                respawn = false;
                disableRespawn(id);
                break;
            case 72:
                image_index = 0;
                break;
            case 112:
                if (!infiniteDispense)
                    event_user(EV_DEATH);
                else
                {
                    timer = 0;
                    phase = 0;
                }
                break;
        }
    }
    
    timer++;
}
else if (dead)
{
    image_index = 0;
    phase = 0;
    timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (healthpoints)
{
    dead = 1;
    
    // Teleport away
    i = instance_create(x, y, objRushTeleport);
    i.upordown = 'up';
    i.parent = -1;
    i.col[1] = -1;
    i.col[2] = -1;
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myItem == 0)
{
    var randitem = floor(random(90));
    if (myItem == noone)
    {
        for (i = 0; i &lt; 4; i += 1)
        {
            event_user(0);
            
            /*
            nitem.x = bboxGetXCenter() - 8;
            nitem.y += 2;
            nitem.xspeed -= 0.5 * i * sign(nitem.xspeed);
            nitem.yspeed -= 0.5 * i;
            nitem.yspeed += 1;
            nitem.disappear += irandom_range(-20, 20);
            */
        }
    }
    else
    {
        other.guardCancel = 2;
    }
}
else
{
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// randomize();

if (!myItem)
{
    var randitem = floor(random(90));
    
    if (randitem &lt; 3)
    {
        myItem = objYashichi;
    }
    else if (randitem &lt; 30)
    {
        myItem = choose(objLife, objETank);
    }
    else
    {
        myItem = choose(objLifeEnergyBig, objWeaponEnergyBig);
    }
}

i = -1;

event_perform_object(objExplosion, ev_other, ev_user0);

if (instance_exists(i))
{
    i.xspeed = image_xscale;
    i.yspeed = -4;
    i.y -= 8 * image_yscale;
    itemReference = i;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
