<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM1Wily3Flush</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//Note: Currently, this object only works rightward.

active = false;

myTiles = -1;
alarm[0] = 1;//Wait so that all room_start events are finished.

despawnRange = -1;
respawnRange = -1;


waterXPos = 0;//Where does the water start at (will cover full horizontal screen). Note a wind will also spawn alongside this water at the same parameters for everything below.
waterSizeX = 16*19;//Where does the water end at (default is full distance of MM1Wily3).
waterSizeY = 224/16;
waterSpawned = false;
windSpeed = 1.5;//How fast should the wind (representing the water's force) be going?

tileDepth = 1500000;//Where do we delete tiles at?

canHit = false;
visible = false;
bubbleTimer = -1;
blockCollision = false;
grav = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myTiles = tile_get_ids_at_depth(tileDepth);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep() &amp;&amp; active)
{
    var tileSize = array_length_1d(myTiles);
    if (tile_exists(myTiles[0]))
    {
        for (var i = 0; i &lt; tileSize; i++)
        {
            if (tile_get_x(myTiles[i]) &lt; x &amp;&amp; image_xscale &gt; 0) || (tile_get_x(myTiles[i]) &gt; x &amp;&amp; image_xscale &lt; 0)
            {
                if (x % 16 == 0 || tile_get_y(myTiles[i]) &gt;= y)
                {
                    tile_delete(myTiles[i]);
                }
            }
        }
    }
    else
    {
        instance_destroy();//Die. Nothing should be going fast enough to catch up with you, so you'll be offscreen by now.
    }
    
    myTiles = tile_get_ids_at_depth(tileDepth);//Re-get so the loop gets shorter each time (and also clears a need to check in the loop for dead tiles).
    
    if (!waterSpawned)
    {
        if (instance_exists(target))
        {
            if (x &gt; target.x)
            {
                var tempY = view_yview[0];
                if (global.quadHeight == 224)
                {
                    tempY -= 8;
                }
                waterSpawned = true;
                var w = objWindRight;
                if (image_xscale &lt; 0)
                {
                    w = objWindLeft;
                }
                with (instance_create(waterXPos,tempY,w))
                {
                    image_xscale = other.waterSizeX;
                    image_yscale = other.waterSizeY;
                    mySpeed = other.windSpeed;
                    visible = true;
                }
                with (instance_create(waterXPos,tempY,objWater))
                {
                    image_xscale = other.waterSizeX;
                    image_yscale = other.waterSizeY;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (entityCanStep())
{
    if (!active &amp;&amp; ((view_xview &gt; x &amp;&amp; image_xscale &gt; 0) || (view_xview+view_wview &lt; x &amp;&amp; image_xscale &lt; 0)))
    {
        active = true;
        visible = true;
        playSFX(sfxMM1Wily3Flush);
        xspeed = 8*image_xscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
