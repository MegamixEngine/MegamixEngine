<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprElecn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* NOTE: the depth is -5 so that it appears in front of things in the editor that it's meant to appear behind
in-game. I set the depth back to 0 here in the creation code. */

event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "floating";

blockCollision = 0;
grav = 0;

// Enemy specific code

//@cc true = drop in enterance from a shoot (default); false = just appears like any other enemy
dropIn = true;

radius = 6 * 16;

phase = 0;
startY = 0;
spd = 1;
sinCounter = 0;
shootWait = 10;
shootWaitTimer = 0;

imgSpd = 0.2;
imgIndex = 0;

depth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // begin stuff 
            if (instance_exists(target))
            {
                calibrateDirection();
                
                // Elec'n falls down before continuing forward, but only if spawned from a spawner that would set respawn to false
                if (dropIn)
                {
                    startY = y;
                    visible = 0;
                    
                    if (abs(target.x - x) &lt;= radius)
                    {
                        phase = 1;
                        visible = 1;
                        grav = 0.25;
                    }
                }
                else
                {
                    phase = 2;
                }
            }
            break;
        case 1: // dropping in 
            if (!dropIn || y - startY &gt;= 48)
            {
                // &lt;-- drop distance
                phase = 2;
                xspeed = spd * image_xscale;
                yspeed = 0;
                grav = 0;
            }
            break;
        case 2: // detect mega man to shoot (deliberately doesn't break to also execute the moving phase) 
            if (instance_exists(target))
            {
                if ((image_xscale &gt; 0 &amp;&amp; x &gt;= target.x) || (image_xscale &lt; 0 &amp;&amp; x &lt;= target.x))
                {
                    phase = 3;
                    xspeed = 0;
                    yspeed = 0;
                    x = target.x; // just to align it properly so it definitely shoots directly above megaman
                }
            }
            break;
        case 3: // shooting 
            if (shootWaitTimer == 0)
            {
                var a;
                for (a = 0; a &lt;= 360; a += 45)
                {
                    var spark = instance_create(x, y - sprite_height * 0.4, objElecnSpark);
                    spark.direction = a;
                }
                playSFX(sfxElecnShoot);
            }
            
            if (shootWaitTimer &lt; shootWait)
            {
                shootWaitTimer += 1;
            }
            else
            {
                phase = 4;
                xspeed = spd * image_xscale;
            }
            break;
        case 4: // moving 
            break;
    }
    
    if (phase == 4 || phase == 2)
    {
        sinCounter += 0.1;
        yspeed = -(cos(sinCounter) * 1);
    }
    
    // animation
    if (phase != 3)
    {
        imgIndex += imgSpd;
        if (imgIndex &gt;= 3)
        {
            imgIndex = imgIndex mod 3;
        }
    }
    else
    {
        imgIndex = 3;
    }
}
else if (dead)
{
    phase = 0;
    shootWaitTimer = 0;
    sinCounter = 0;
    grav = 0;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
