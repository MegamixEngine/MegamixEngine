<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTurboRoader</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A Roader that wobbles back and forth before zooming forward. If it hits a wall or reaches the end of the screen, it will skid to a halt and turn around.
/// It will also fall off of ledges.
/// It's not really dangerous until it starts moving, and it's easily destroyed, so make sure your setups give it a chance to be effective.

event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "grounded";

facePlayerOnSpawn = true;

despawnRange = 32;

// Enemy specific code
phase = 0;
actionTimer = 0;
loops = 0;

turn = false;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // increment AI timer
    actionTimer++;
    
    switch (phase)
    {
        // Spin around like a doofus
        case 0: // turn right 
            if (actionTimer == 8)
            {
                xspeed = (xspeed / 2);
                image_index = 2;
            }
            
            // stop, turn around
            if (actionTimer == 18)
            {
                xspeed = -2 * image_xscale;
                image_index = 3;
            }
            
            // turn left
            if (actionTimer == 26)
            {
                xspeed = (xspeed / 2);
                image_index = 4;
            }
            if (actionTimer == 36)
            {
                if (loops &gt; 2)
                {
                    actionTimer = 0;
                    loops = 0;
                    phase = 1;
                    image_index = 0;
                    calibrateDirection();
                    xspeed = 3.25 * image_xscale;
                }
                else
                {
                    xspeed = 2 * image_xscale;
                    image_index = 5;
                    
                    actionTimer = 0;
                    loops += 1;
                }
            }
            break;
        
        // tracking the player
        case 1: // chug chug chug 
            if (actionTimer mod 3 == 0 &amp;&amp; image_index != 2)
            {
                image_index = !image_index;
            }
            
            // turn around on screen boundary
            if (((x &lt; view_xview + 32 &amp;&amp; image_xscale == -1) || (x &gt; view_xview + 256 - 32 &amp;&amp; image_xscale == 1)
                || xcoll != 0) &amp;&amp; (!turn))
            {
                actionTimer = 0;
                image_index = 2;
                xspeed = (xspeed / 2);
                turn = true;
            }
            
            // turn around animation
            if (turn)
            {
                if (actionTimer == 15)
                {
                    xspeed = 0;
                    image_index = 0;
                    image_xscale = -image_xscale;
                }
                
                // charge
                if (actionTimer == 30)
                {
                    // it's slower on other goarounds for some reason
                    xspeed = 2.75 * image_xscale;
                }
                
                // this is later for cooldown reasons
                if (actionTimer == 40)
                {
                    turn = false;
                }
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();

phase = 0;
actionTimer = 0;

image_index = 5;
xspeed = 2 * image_xscale;

loops = 0;
turn = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
