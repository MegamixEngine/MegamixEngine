<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAirTiki</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If innactive it's invisible, while active it will spawn [objGremlin](objGremlin.html) from its sides.
event_inherited();

isSolid = 1;
isTargetable = false;

grav = 0;
blockCollision = 0;

respawnRange = -1;
despawnRange = -1;

animTimer = 0;
triggered = false;
popped = 0;

gremlinSpawn = false;
gremlinDir = -1;
gremlinArray[0] = noone;
gremlinArray[1] = noone;
gremlinArray[2] = noone;

objectDrop = objGremlin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    alarm[0] = 90;
    
    if (!place_meeting(x, y - 48, target))
    {
        alarm[0] = 30;
        exit;
    }
    
    var place = -1;
    
    var i;
    for (i = 0; i &lt; 3; i += 1)
    {
        var ded = false;
        if (!instance_exists(gremlinArray[i]))
        {
            ded = true;
        }
        else
        {
            if (gremlinArray[i].dead)
            {
                ded = true;
            }
        }
        
        if (ded)
        {
            if (place == -1)
            {
                place = i;
            }
            
            gremlinArray[i] = noone;
        }
    }
    
    if (place != -1)
    {
        if (gremlinDir == 1)
        {
            i = instance_create(x + sprite_width - 20, y + 39, objectDrop);
        }
        else
        {
            i = instance_create(x - 4 + 8, y + 39, objectDrop);
        }
        i.respawn = false;
        i.gremlinDir = gremlinDir;
        i.generated = false;
        i.alarmGenerate = 80;
        gremlinDir = -gremlinDir;
        gremlinArray[place] = i;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    if (instance_exists(target) &amp;&amp; !popped)
    {
        if (abs(target.x - bboxGetXCenter()) &lt; 96)
        {
            if (insideView)
            {
                popped = 1;
                image_index = 2;
            }
        }
    }
    
    if (popped)
    {
        animTimer += 1;
        if (image_index == 0 || image_index == 1)
        {
            if (animTimer == 8)
            {
                image_index += sign(0.5 - image_index);
                animTimer = 0;
            }
        }
        else
        {
            if (animTimer == 6)
            {
                image_index = 3;
            }
            if (animTimer == 12)
            {
                image_index = 4;
            }
            if (animTimer == 18)
            {
                image_index = 0;
                animTimer = 0;
            }
        }
    }
    
    if ((image_index == 0 || image_index == 1) &amp;&amp; popped &amp;&amp; !triggered)
    {
        triggered = true;
        instance_create(x + 12, y, objTikiHorn);
        instance_create(x + sprite_width - 12, y, objTikiHorn);
    }
    
    if (collision_rectangle(x, y - 8, x + sprite_width, y + 4, target, false,
        false) &amp;&amp; !gremlinSpawn)
    {
        gremlinSpawn = true;
        gremlinDir = -1;
        alarm[0] = 30;
    }
}
else if (dead)
{
    alarm[0] = 0;
    image_index = 0;
    animTimer = 0;
    triggered = false;
    gremlinSpawn = false;
    gremlinDir = -1;
    popped = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (popped)
{
    if (other.penetrate &gt;= 2)
    {
        other.guardCancel = 2;
    }
    else
    {
        other.guardCancel = 1;
    }
}
else
{
    other.guardCancel = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!popped)
{
    exit;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
