<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMinoanShield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_xscale = -1;
dir = 1;

respawn = false;

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 4;

// Enemy specific code
xspeed = 0;
yspeed = 0;
grav = 0;

mountID = -20;
phase = 0;
timer = 0;

canStep = false;

init = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // Hanging 
            xspeed = 0;
            yspeed = 0;
            sprite_index = sprMinoanShield;
            if (mountID == -20 || !instance_exists(mountID) || mountID.dead == true)
            {
                instance_destroy();
            }
            else
            {
                y = mountID.bbox_top + 15 + floor(mountID.image_index) + sprite_yoffset;
                
                if (instance_exists(target))
                {
                    var dist = abs(spriteGetXCenter() - spriteGetXCenterObject(target));
                    if (dist &lt;= 5 * 16)
                    {
                        phase = 1;
                        
                        with (mountID)
                        {
                            dead = true;
                            healthpoints = 0;
                            instance_create(spriteGetXCenter(), spriteGetYCenter(), objExplosion);
                        }
                    }
                }
            }
            break;
        case 1: // Falling 
            xspeed = 0;
            grav = gravAccel;
            if (ground == true)
            {
                phase = 2;
                timer = 0;
            }
            break;
        case 2: // Waiting 
            if (timer == 0)
                image_index = 0;
            xspeed = 0;
            sprite_index = sprMinoanAppear;
            image_speed = 7 / 60;
            if (image_index &gt; image_number - 1)
                image_index = image_number - 1;
            timer += 1;
            if (timer &gt;= 40)
            {
                timer = 0;
                phase = 3;
            }
            break;
        case 3: // Spinning in place 
            if (timer == 0)
                image_index = 1;
            xspeed = 0;
            sprite_index = sprMinoanSpin;
            image_speed = 10 / 60;
            timer += 1;
            if (timer &gt;= 15)
            {
                timer = 0;
                phase = 4;
            }
            break;
        case 4: // Spinning and moving 
            if (timer == 0)
                calibrateDirection();
            timer += 1;
            sprite_index = sprMinoanSpin;
            image_speed = (10 / 60);
            if (ground == true)
            {
                xspeed = image_xscale * 1;
                if (xcoll != 0)
                {
                    image_xscale *= -1;
                    xspeed *= -1;
                }
            }
            else
            {
                xspeed = 0;
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 0)
{
    other.guardCancel = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,-1</point>
    <point>9,9</point>
  </PhysicsShapePoints>
</object>
