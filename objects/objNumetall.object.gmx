<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNumetall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
contactDamage = 3;
healthpointsStart = 1;
grav = 0.25 * image_yscale;
blockCollision = true;
category = "mets";

behaviourType = 1;

// Enemy specific code
animFrame = 0;
phase = 0;
timer = 0;
accelerating = true;
accel = 0.0125;
maxSpeed = 0.70;

projectileObject = objNumetallGlob;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // Walking 
            if (floor(animFrame) &gt; 4)
                animFrame = 4;
            else if (floor(animFrame) == 4)
            {
                animFrame -= 0.165;
                if (floor(animFrame) &lt; 4)
                    animFrame = 0;
            }
            else
            {
                animFrame += 0.135; // 0.01+0.2*abs(xspeed);
                if (floor(animFrame) &gt; 3)
                    animFrame = 0;
            }
            if (timer == 0)
            {
                if (instance_exists(target))
                {
                    var isGonnaHurt = false;
                    if ((abs(target.x - x) &lt; 32) || target.image_xscale == sign(x - target.x) &amp;&amp; global.keyShootPressed[target.playerID])
                    {
                        phase = 1;
                        timer = 0;
                        animFrame = 4;
                        xspeed = 0;
                        break;
                    }
                }
                if (accelerating)
                {
                    xspeed += accel * image_xscale;
                    if (abs(xspeed) &gt;= maxSpeed)
                    {
                        accelerating = false;
                        xspeed = maxSpeed * image_xscale;
                    }
                }
                else
                {
                    xspeed -= accel * image_xscale;
                    if (sign(xspeed) != image_xscale)
                    {
                        xspeed = 0;
                        timer = -30;
                    }
                }
                
                if (xcoll != 0 || checkFall(16 * image_xscale)) //! checkSolid(16 * image_xscale, 8 * image_yscale))
                {
                    xspeed = 0;
                    timer = 30;
                }
            }
            else if (timer &gt; 0)
            {
                xspeed = 0;
                timer -= 1;
                if (timer &lt;= 0)
                {
                    timer = 0;
                    accelerating = true;
                    image_xscale *= -1;
                }
            }
            else if (timer &lt; 0)
            {
                xspeed = 0;
                timer += 1;
                if (timer &gt;= 0)
                {
                    timer = 0;
                    accelerating = true;
                }
            }
            if (xspeed == 0)
                animFrame = 0;
            break;
        case 1: // Hidden 
            if (instance_exists(target) &amp;&amp; target.image_xscale == sign(x - target.x) &amp;&amp; global.keyShootPressed[target.playerID])
                timer = 0;
            xspeed = 0;
            if (floor(animFrame) == 4)
            {
                animFrame += 0.15;
                if (floor(animFrame) &gt; 4)
                    animFrame = 6;
            }
            else if (floor(animFrame) &gt;= 7)
            {
                animFrame += 0.3;
                if (floor(animFrame) &gt; 13)
                {
                    animFrame = 6;
                }
            }
            else if (animFrame == 6)
            {
                timer += 1;
                if (timer &gt;60)
                {
                    phase = 2;
                    timer = 0;
                }
            }
            break;
        case 2: // Shooting 
            xspeed = 0;
            if (timer == 0)
            {
                calibrateDirection();
                playSFX(sfxNumetallShoot);
                animFrame = 5;
                var i = -45;
                repeat (3)
                {
                    var b = instance_create(x + 8 * image_xscale, y - 8 * image_yscale, projectileObject);
                    b.angle = i;
                    i += 45;
                    b.image_xscale = image_xscale;
                }
            }
            timer += 1;
            if (timer &gt; 60)
            {
                animFrame = 0;
                phase = 0;
                timer = 0;
                accelerating = true;
            }
            break;
    }
    image_index = floor(animFrame);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
phase = 0;
accelerating = true;
timer = 0;
animFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (phase == 1 || (phase == 0 &amp;&amp; timer == 0))
{
    if (phase == 0)
    {
        phase = 1;
        timer = 0;
    }
    other.guardCancel = 1;
    if (animFrame &lt; 7)
    {
        animFrame = 7;
        timer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
