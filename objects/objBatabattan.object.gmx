<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBatabattanIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "grounded, nature";

facePlayerOnSpawn = true;

// enemy specific
imgSpd = 0.1;
imgIndex = 0;
waitTime = 35;
waitTimer = waitTime;

xSpd = 2.5;
ySpd = 3.6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // face player when first coming on screen
    if (waitTimer == waitTime)
    {
        calibrateDirection();
    }
    
    if (waitTimer &gt; 0)
    {
        // waiting to jump
        waitTimer -= 1;
        
        imgIndex += imgSpd;
        if (imgIndex &gt;= 2)
        {
            imgIndex = imgIndex mod 1;
        }
    }
    else
    {
        // jumping
        if (waitTimer == 0)
        {
            // jumping animation
            if (imgIndex &lt; 2)
            {
                imgIndex = 2;
            }
            
            if (imgIndex &lt; 3)
            {
                // don't loop animation
                imgIndex += imgSpd * 2;
            }
            else
            {
                // start jump
                waitTimer = -1; // I reused waitTimer as a boolean  xP
                
                calibrateDirection();
                xspeed = xSpd * image_xscale;
                yspeed = -ySpd;
                ground = false; // It'll constantly catch on the ground when trying to jump if you don't do this
                imgIndex = 3;
                
                playSFX(sfxSpring);
            }
        }
        else if (ground &amp;&amp; !place_meeting(x, y + sign(grav), objSpring))
        {
            // landing
            if (waitTimer == -1)
            {
                waitTimer = waitTime; // I reused it as a boolean again
                
                xspeed = 0;
                yspeed = 0;
                playSFX(sfxClamp);
                waitTimer = waitTime;
                imgIndex = 0;
            }
            
            /*imgIndex -= imgSpd * 2; // landing animation is faster than jumping animation
            
            if (imgIndex &lt;= 1)
            {
                waitTimer = waitTime;
                imgIndex = 0;
            }*/
        }
        else if (waitTimer == -1 &amp;&amp; xspeed == 0)
        {
            // turn around if a wall is run into while jumping
            image_xscale = -image_xscale;
            xspeed = xSpd * image_xscale;
        }
    }
}
else if (dead)
{
    imgIndex = 0;
    waitTimer = waitTime;
    xspeed = 0;
    yspeed = 0;
}

if (imgIndex &lt; 2)
{
    sprite_index = sprBatabattanIdle;
    image_index = imgIndex div 1;
}
else
{
    if (imgIndex div 1 == 2)
    {
        sprite_index = sprBatabattanJump1;
        image_index = 0;
    }
    
    if (imgIndex div 1 == 3)
    {
        sprite_index = sprBatabattanJump2;
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
