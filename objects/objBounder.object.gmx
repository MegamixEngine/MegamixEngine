<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBounder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// col = &lt;number&gt; (0 = red (default); 1 = green; 2 = purple;)

event_inherited();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 4;

blockCollision = 0;
grav = 0;

facePlayerOnSpawn = true;

// Enemy specific code
startY = y;
delay = 0;

// AI variables
radius = 116; //activation radius. set to -1 to.. disable it.
activated = false;
falling = false;
imageOffset = 0;
cooldownMax = 234; //cc code - how long it takes the enemy to shoot. set to -1 to never shoot.
cooldownTimer = cooldownMax - 8;
shootAngle = 30;
ground = false;
direct = 0;

col = 0;

childObject = objMM5AimedBullet;
childSprite = sprEnemyBullet;
twinShot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // animation setup
    if (y == startY &amp;&amp; activated == 0)
        imageOffset = 0;
    else if (y == startY &amp;&amp; activated == 1)
        imageOffset = 1;
    else if (y &gt; startY &amp;&amp; delay &lt;= 0)
        imageOffset = 1;
    else
        imageOffset = 2;
    
    image_index = (3 * col) + imageOffset;
    
    if (activated == true || y &gt; startY)
    {
        cooldownTimer += 1;
        if (cooldownTimer &gt;= cooldownMax &amp;&amp; cooldownMax != -1)
        {
            // Shoot
            cooldownTimer = 0;
            var getAngle;
            
            // If megaman exists, grab his angle, otherwise grab some random different angle.
            if (instance_exists(target))
            {
                getAngle = point_direction(x, y, target.x, target.y);
                direct = -1;
            }
            else
            {
                getAngle = point_direction(x, y, x + (45), 45);
                direct = -1;
            }

                var ID;
                ID = instance_create(x, spriteGetYCenter(), childObject);
                {
                    ID.dir = getAngle + (twinShot * shootAngle);
                    ID.xscale = direct;
                    ID.spd = 1.65;
                    ID.sprite_index = childSprite;
                }
                if (twinShot)
                {
                    ID = instance_create(x, spriteGetYCenter(), childObject);
                    {
                        ID.dir = getAngle - shootAngle;
                        ID.xscale = direct;
                        ID.spd = 1.65;
                        ID.sprite_index = childSprite;
                    }
                }
                playSFX(sfxEnemyShootClassic);
            
            calibrateDirection();
        }
    }
    
    
    if (instance_exists(target))
    {
        // basic AI, if Mega Man is within range, activate bounder.
        if (abs(target.x - x) &lt;= radius &amp;&amp; radius != -1)
            activated = true;
        else
            activated = false;
    }
    
    // when activated, Bounder falls if he's in his original position.
    if (activated == true &amp;&amp; y == startY)
        falling = true;
    
    // whilst falling, activate gavity collision and detect whether or not bounder has hit the ground.
    if (falling == true)
    {
        blockCollision = 1;
        grav = 0.4;
        if (ground == true)
        {
            falling = false;
            delay = 10;
        }
    }
    else
    {
        grav = 0;
        blockCollision = 0;
    }
    
    if (delay &gt; 0)
        delay -= 1;
    
    // reverse fall if falling is false. this does not require bounder to be activated to work.
    if (falling == false &amp;&amp; y &gt; startY &amp;&amp; delay == 0)
    {
        if (yspeed &gt;= 0)
            yspeed = -2;
        yspeed -= 0.6;
        ground = false;
        if (yspeed &lt; -14)
            yspeed = -14;
    }
    
    // reset bounder.
    if (y &lt;= startY)
    {
        y = startY;
        delay = 0;
        if (yspeed &lt; 0)
            yspeed = 0;
        if (activated == false)
            cooldownTimer = cooldownMax - 8;
    }
}
else if (dead == true)
{
    xspeed = 0;
    yspeed = 0;
    image_index = 0;
    cooldownTimer = cooldownMax - 8;
    falling = false;
    activated = false;
    imageOffset = 0;
    blockCollision = 0;
    grav = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objJewelSatellite, 3);
specialDamageValue(objWheelCutter, 3);
specialDamageValue(objSlashClaw, 3);
specialDamageValue(objSakugarne, 3);
specialDamageValue(objSuperArrow, 3);
specialDamageValue(objWireAdapter, 3);
specialDamageValue(objWaterWave, 3); // Accurate to MM5
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
