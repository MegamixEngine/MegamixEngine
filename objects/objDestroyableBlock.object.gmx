<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDestroyableNormal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 0;
bubbleTimer = -1;

killOverride = false;

isSolid = 1;
faction = 5;
fnsolid = 2;
dieToSpikes = false;

timer = 0;
costumeID = 0;


passThrough = false;//Use to have non-affecting objects pass through.

//creation code
/* how to use
    @cc weakness = global.weaponID[? objWeaponObject];
        or weakness = ds_map_find_value(global.weaponID, objWeaponObject)
        To make it a reflect block, use "weakness = -1;" 
        If not weak to player weapon, then just use the intended object, i.e objBeakBullet or prtEnemyProjectile
*/
weakness = 0;
destroyObject = false; //if set, destroy colliding weakness object (weapons always use their default behaviour if not set)
itemDrop = noone; //if set, drop this item on destruction

weakToPlayer = true; //if false, this uses another object and the following need to be defined
//weak to alternative objects
weaponIcon = noone //if set, use this sprite for weapon icon;
//defined palette of weapon block
palette[0] = make_color_rgb(0,48,248); //primary
palette[1] = make_color_rgb(0,248,248); //secondary
palette[2] = make_color_rgb(0,0,0); //outline


itemCode = ""; //run code on item drop if itemDrop != noone
itemScript = scrNoEffect; //run script

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!weakToPlayer)
    faction = 4;
// increase anim timer
if (!global.frozen)
{
    timer += 1;
    
    iFrames = 0;
    
    if (!weakToPlayer)
    {
        with (instance_place(x,y,weakness))
        {
            if (object_index == other.weakness)
            {
    
                global.damage = 1;
                guardCancel = 0;
                other.healthpoints -= global.damage;
                with (other)
                    event_user(EV_HURT)
                
                 if (other.healthpoints &lt;= 0)
                 {
                     with (other)
                        event_user(EV_DEATH);
                    
                 }
                if (other.destroyObject)
                {
                    event_user(EV_DEATH);
                }
                
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    if (weakness == -1)
    {
        isTargetable = false;
    }
    if (global.characterSelected[0] == CHAR_BASS) // Set RC/RJ blocks to TB in Bass Mode
    {
        if (weakness == global.weaponID[? objRushCoil] || weakness == global.weaponID[? objRushJet])
        {
            weakness = global.weaponID[? objTrebleBoost];
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/*other.guardCancel = 4;

if (global.weapon[other.parent.playerID] == weakness)
{
    if (global.weapon[other.parent.playerID] == 0 || other.object_index != objNormalBusterShot)
    {
        other.guardCancel = 0;
    }
}*/

with (other)
{
    if (!other.passThrough || blockCollision)
    {
        guardCancel = 4;
    }
    else
    {
        guardCancel = 2;
    }
    if (other.weakToPlayer)
    {
        if (!other.passThrough || blockCollision)
        {
            guardCancel = 4;
        }
        else
        {
            guardCancel = 2;
        }
        
        if (object_is_ancestor(object_index,prtPlayerProjectile))
        {
            if (instance_exists(parent))
            {
                
                if (global.weapon[parent.playerID] == other.weakness &amp;&amp; (global.weapon[parent.playerID] == 0 || !object_is_ancestor(object_index, objBusterShot)))
                {
                    guardCancel = 0;
                    if (other.destroyObject)
                    {
                        event_user(EV_DEATH);
                    }
                }
            }
        }
    }
    else
    {
        guardCancel = 4;
    }

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!is_undefined(bbox_left))
{
    instance_create(bboxGetXCenter() - 8, bboxGetYCenter() - 8, objExplosion);
    instance_create(bboxGetXCenter() + 8, bboxGetYCenter() - 8, objExplosion);
    instance_create(bboxGetXCenter() - 8, bboxGetYCenter() + 8, objExplosion);
    instance_create(bboxGetXCenter() + 8, bboxGetYCenter() + 8, objExplosion);
}

if (itemDrop &amp;&amp; itemDrop != objKey)
{
    myItem = itemDrop;
    disappearTime = 105*2;
    code = itemCode;
    script = itemScript;
    parentHealthPointsStart = 1;
    event_perform_object(objExplosion, ev_other, ev_user0);
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col;
if (sprite_index != sprDestroyableNormal
    &amp;&amp; sprite_index != sprDestroyable1632
    &amp;&amp; sprite_index != sprDestroyable3216
    &amp;&amp; sprite_index != sprCWU01PFakeGutsBlock)
{
    event_inherited();
}
else
{
    drawSelf();
    
    // resizing
    if (image_xscale &lt; 1 &amp;&amp; image_yscale == 1)
    {
        sprite_index = sprDestroyable1632;
        image_xscale = 1;
    }
    
    if (image_yscale &lt; 1 &amp;&amp; image_xscale == 1)
    {
        sprite_index = sprDestroyable3216;
        image_yscale = 1;
    }
    
    // set offset according to sprite
    var xoffset, yoffset;
    
    switch (sprite_index)
    {
        case sprDestroyableNormal:
        case sprCWU01PFakeGutsBlock:
            xoffset = 8;
            yoffset = 8;
            break;
        case sprDestroyable1632:
            xoffset = 0;
            yoffset = 8;
            break;
        case sprDestroyable3216:
            xoffset = 8;
            yoffset = 0;
            break;
    }
    
    // check for player color
    var wac = -1;
    if (weakToPlayer)
    {
        with (objMegaman)
        {
            if (global.weapon[playerID] == other.weakness)
            {
                wac = playerID;
                other.costumeID = costumeID;
                break;
            }
        }
    }
    else   
        wac = -2;
    
    if (wac != -1)
    {
        
        if (wac != -2)
        {
            col[0] = global.outlineCol[wac];
            col[1] = global.primaryCol[wac];
            col[2] = global.secondaryCol[wac];
        }
        else
        {
            col[0] = palette[2];
            col[1] = palette[0];
            col[2] = palette[1];
        }
        
        if (col[2] == c_white)
        {
            col[2] = make_color_rgb(255, 217, 162);
        }
        
        if (timer mod 48 &lt; 6)
        {
            col[1] = col[2];
            col[2] = c_white;
        }
        
        for (var i = 0; i &lt; 3; i ++;)
        {
            draw_sprite_ext(sprite_index, (i + 1), x, y, 1, 1, 0, col[i], 1);
        }
    }

    col[0] = palette[0];
    col[1] = palette[1];
    col[2] = palette[2];
    if (sprite_index != sprCWU01PFakeGutsBlock)
    {
        if (weakToPlayer)
            drawWeaponIcon(weakness, max(0, wac), costumeID, (x + xoffset), (y + yoffset), (wac != -1));
        else
        {
             col[0] = make_color_rgb(255, 217, 162);
            col[1] = palette[0];
            col[2] = palette[1];
                
            if (timer mod 48 &lt; 6)
            {
                col[1] = col[2];
                col[2] = c_white;
            }
            var ic = weaponIcon;
            if weaponIcon == noone
                ic = sprWeaponIconsBlank
            for (var i = 0; i &lt; 3; i ++)
            {
                draw_sprite_ext(ic,i,(x + xoffset), (y + yoffset),1,1,image_angle,col[i],image_alpha);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
