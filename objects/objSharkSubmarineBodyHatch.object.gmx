<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSharkSubmarineBodyHatch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 14;
healthpoints = healthpointsStart;
contactDamage = 5;
killOverride = false;
grav = 0;
blockCollision = 0;
canHit = true;
stopOnFlash = false;
hitInvun = 45;
canIce = false;
respawnRange = -1;
despawnRange = -1;
itemDrop = -1;
lockTransition = false;

phaseMultiple = 8; // Multiply in if arguments involving the timer.
isDying = false;
explodeTimer = 0;

bodyShark = noone; // The shark part that made this.
leftShark = noone; // Copied from the shark part that made this.

/* xOffset = 0;
yOffset = 0 ;*/

timer = phaseMultiple * 7; // Timer for making a dolphin.
hatchIndex = 0;
image_speed = 0;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 2);
enemyDamageValue(objBusterShotCharged, 4);

// MaGMML3
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 4);
enemyDamageValue(objThunderBeam, 3);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 3);
enemyDamageValue(objIceWall, 0);

// MaGMML2
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 5);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 3);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 4);
enemyDamageValue(objSolarBlaze, 2);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 3);

// MaG48HMML
enemyDamageValue(objFlameMixer, 2);
enemyDamageValue(objRainFlush, 4);
enemyDamageValue(objSparkShock, 5);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 3);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBrickWeapon, 2);
enemyDamageValue(objIceSlasher, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (instance_exists(bodyShark))
    {
        xspeed = bodyShark.xspeed;
        yspeed = bodyShark.yspeed;
        image_xscale = bodyShark.image_xscale;
        image_yscale = bodyShark.image_yscale;
        
        if (!isDying)
        {
        // Opening (0) or closing (60) hatch.
        if (timer &lt;= 0 || timer == phaseMultiple * 6)
        {
            hatchIndex = 1;
        }
        if (timer == phaseMultiple) // Hatch fully opened.
        {
            hatchIndex = 2;
        }
        if (timer == phaseMultiple * 3) // DOLPHIN, LAUNCH!
        {
            with (instance_create(x, y + 13 * image_yscale,
                objSharkSubmarineDolphin))
            {
                image_yscale = other.image_yscale;
                grav *= image_yscale;
                if (instance_exists(other.target))
                {
                    calibrateDirection(other.target);
                }
            }
        }
        if (timer &gt;= phaseMultiple * 7) // Hatch fully closed.
        {
            hatchIndex = 0;
        }
        timer++;
        image_index = hatchIndex; // Making sure the hitbox changes when opened.
        }
        //Death animation
        else
        {
            explodeTimer++;
            if (explodeTimer == 15)
            {
                instance_create(x-15*image_xscale,y+7,objBigExplosion);
                playSFX(sfxMM9Explosion);
            }
            if (explodeTimer == 30)
            {
                instance_create(x+10*image_xscale,y-9,objBigExplosion);
                playSFX(sfxMM9Explosion);
                event_user(EV_DEATH);
            }
        }
    }
    else
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//event_inherited();
if(!isDying)
{
    visible = false;
    instance_create(x,y,objBigExplosion);
    playSFX(sfxMM9Explosion);
    iFrames = 0;
    stopSFX(sfxEnemyHit);
    canHit = false;
    isDying = true;
    hatchIndex = 3;
}
else
{
    event_inherited();
    xplX = -1;
    xplY = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
iFrames = max(1, hitInvun);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* event_inherited ();*/

if (instance_exists(bodyShark))
{
    if (bodyShark.introTimer &lt;= 0)
    {
        if ((ceil(iFrames / 2) mod 4) || !iFrames)
        {
            var iceBlinkTime = 42;
            if ((ceil(iFrames / 2) mod 2) || (iceTimer &gt; 0 &amp;&amp; (iceTimer &gt; iceBlinkTime || (iceTimer &lt;= iceBlinkTime &amp;&amp; iceTimer mod 4 == 0))))
            {
                var flashcol = c_white;
                if (iceTimer &gt; 0 &amp;&amp; (iceTimer &gt; iceBlinkTime || (iceTimer &lt;= iceBlinkTime &amp;&amp; iceTimer mod 4 == 0)))
                {
                    switch (iceGraphicStyle)
                    {
                        case 1:
                            flashcol = 0;
                            break;
                        default:
                            flashcol = make_color_rgb(0, 120, 255);
                            break;
                    }
                }
                
                d3d_set_fog(true, flashcol, 0, 0);
                draw_sprite_ext(sprSharkSubmarineBodyHatch, hatchIndex, x, round(y),
                    bodyShark.image_xscale, bodyShark.image_yscale,
                    image_angle, image_blend, image_alpha);
                d3d_set_fog(false, 0, 0, 0);
                
                if (iceTimer &gt; 0 &amp;&amp; (iceTimer &gt; iceBlinkTime || (iceTimer &lt;= iceBlinkTime &amp;&amp; iceTimer mod 4 == 0)))
                {
                    draw_set_blend_mode(bm_add);
                    draw_sprite_ext(sprSharkSubmarineBodyHatch, hatchIndex, x, round(y),
                        bodyShark.image_xscale, bodyShark.image_yscale,
                        image_angle, image_blend, image_alpha);
                    draw_set_blend_mode(bm_normal);
                }
            }
            else
            {
                draw_sprite_ext(sprSharkSubmarineBodyHatch, hatchIndex, x, round(y),
                    bodyShark.image_xscale, bodyShark.image_yscale,
                    image_angle, image_blend, image_alpha);
            }
        }
    }
    else
    {
        draw_sprite_ext(sprSharkSubmarineBodyHatch, hatchIndex, x, round(y),
            bodyShark.image_xscale, bodyShark.image_yscale, image_angle, image_blend,
            1 - ((floor(bodyShark.introTimer / (30 / 2)) * (30 / 2)) / 30) / 2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
