<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loads an external room in the background.

fileHandler = -1;
fileNameWithoutExtension = "";
filePath = "";
confirmHash = "";

// Lines of room to parse per frame. (-1: infinite)
// For reference, these are the statistics for line counts of entries in MaGMML3:
// total (all rooms): 1,485,365 lines
//           largest: 46,567 lines
//   90th percentile: 12,743 lines
//              mean: 6,813  lines
//            median: 6,348  lines
//   10th percentile: 1,219  lines
//          smallest: 65     lines (an "intro" room)
processRate = 10;

complete = false;
completion = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Invoke user defined 0
if (!complete)
{
    event_user(0);
}

if (complete)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process some lines of file.

// Balance load across loaders.
var iterationRate = instance_number(object_index);

var iteration = 0;

assert(fileNameWithoutExtension != "");

// get file path
if (filePath == "")
{
    if (stringStartsWith(fileNameWithoutExtension, "+"))
    {
        filePath = stringSubstring(fileNameWithoutExtension, 2);
    }
    else
    {
        filePath = fileNameWithoutExtension + ".room.gmx";
    }

    if (processRate &gt;= 0)
    {
        print("Loading external room: " + fileNameWithoutExtension);
    }
}
/*
Note: Room Asset Loading is intentionally left out of the block system, due to it already going to be choppy no matter what.
Ideally, for GMS2 we make these async loads since they work there.
*/


blockStartTime = current_time;
if (processRate == -1)
{
    print ("Blocking on room load: " + fileNameWithoutExtension);
}

if (fileHandler == -1)
{
    roomExternalLoadAssets(filePath);
    fileHandler = file_text_open_read(filePath);
    if (fileHandler == -1)
    {
        assert(false, "Error opening file for reading: " + filePath);
    }

    // properties
    prop_width = 256;
    prop_height = 240;
    prop_bg_n = 0;
    prop_inst_n = 0;
    prop_tile_n = 0;
    prop_colour = 0;
    code_str = "";
    hashString = ""
    lineCount = 0;

    // Largest room has fewer than this many lines.
    maxLineCount = 60000;
    lines[60000] = maxLineCount;
    line = 0;

    processedFile = false;
}

// read in file
if (!processedFile)
{
    while (!file_text_eof(fileHandler))
    {
        if (iteration &gt;= processRate &amp;&amp; processRate &gt;= 0)
        {
            // To prevent lag, stop loading after a set number of frames.
            completion = 0.25 * min(1, lineCount / maxLineCount);
            exit;
        }
        iteration += iterationRate;
        var lineS = file_text_readln(fileHandler);
        lines[lineCount++] = lineS;

        // hash repeatedly to avoid large string handling.
        hashString = md5_string_utf8(hashString + global.newLine + lineS);
    }

    file_text_close(fileHandler);
    processedFile = true;
    processedLines = false;
    startParseCompletion = 0.25 * min(1, lineCount / maxLineCount);
}

// Parse loop:

if (!processedLines)
{
    // parse properties:
    while (line &lt; lineCount)
    {
        if (iteration &gt;= processRate &amp;&amp; processRate &gt;= 0)
        {
            completion = startParseCompletion + 0.4 * (1-startParseCompletion) * min(1, line / lineCount);
            // To prevent lag, stop loading after a set number of frames.
            exit;
        }
        iteration += iterationRate;

        var text = lines[line++];

        text = stringSubstring(text, string_pos("&lt;", text));

        // room properties
        if (stringStartsWith(text, "&lt;width&gt;"))
            prop_width = real(string_digits(text));
        if (stringStartsWith(text, "&lt;height&gt;"))
            prop_height = real(string_digits(text));
        if (stringStartsWith(text, "&lt;colour&gt;"))
            prop_colour = real(string_digits(text));
        if (stringStartsWith(text, "&lt;code&gt;"))
        {
            code_str = text + global.newLine;
            while (line &lt; lineCount)
            {
                iteration+= iterationRate;
                if (string_pos("&lt;/code&gt;", code_str) != 0)
                    break;
                code_str += lines[line++] + global.newLine;
            }
            continue;
        }

        // backgrounds
        if (stringStartsWith(text, "&lt;background "))
        {
            prop_background[prop_bg_n++] = xmlParseTag(text);
        }

        // views [not implemented]

        // instances
        if (stringStartsWith(text, "&lt;instance "))
        {
            prop_inst[prop_inst_n++] = xmlParseTag(text);
        }

        // tiles
        if (stringStartsWith(text, "&lt;tile "))
        {
            prop_tile[prop_tile_n++] = xmlParseTag(text);
        }
    }
    processedLines = true;
    processedHash = false;
}
// done parsing.

// close file

// check hash
// determine file hash
if (!processedHash)
{
    var fileHash = md5_string_utf8(hashString + "%$*7rtsalty");

    // enforce file hash (optional)
    if (confirmHash != "")
    {
        if (fileHash != hash)
        {
            printErr("HASH FAILED loading external room: " + fileHash);
            printErr("Expected hash: " + confirmHash);
            printErr("Actual hash: " + fileHash);

            assert(false, "Cannot permit game to continue on invalid hash.")
            exit;
        }
    }
    else
    {
        // print hash to console so that it can be enforced in a later development cycle.
        print("File hash is " + fileHash + " (not enforced!) for " + filePath);
    }

    processedHash = true;
    processedRoomStart = false;
    startPlaceCompletion = startParseCompletion + 0.4 * (1-startParseCompletion);
    placementCount = prop_inst_n + prop_tile_n;
}


///// create external room. /////

// external room's id:
if (!processedRoomStart)
{
    exrm = room_add();

    //Residual instance properties (must be stored in exgrid below)
    //For tiles we only need their color
    prop_copy[0] = "code";
    prop_copy[1] = "scaleX"; 
    prop_copy[2] = "scaleY";
    prop_copy[3] = "colour";
    prop_copy[4] = "rotation";
    prop_copy_n = 5;
    
    //Global constants to index the exgrid
    global.erlSetupReserved = 5;
    global.erlSetupCC = 0;
    global.erlSetupFirstInst = 1;
    global.erlSetupInstCount = 2;
    global.erlSetupFirstTile = 3;
    global.erlSetupTileCount = 4;
   
    
    // this grid will remain for the length of the game (or until roomExternalClear)
    // it details creation event code for each instance.
    exgrid = mm_ds_grid_create(global.erlSetupReserved + prop_inst_n + prop_tile_n, prop_copy_n + 1);
    global.roomExternalSetupMap[? exrm] = exgrid;

    // room creation code
    exgrid[# global.erlSetupCC, 0] = stringBetween(code_str, "&lt;code&gt;", "&lt;/code&gt;");
    firstInst = global.erlSetupReserved
    firstTile = global.erlSetupReserved + prop_inst_n;
    
    exgrid[# global.erlSetupInstCount, 0] = 0;
    exgrid[# global.erlSetupTileCount, 0] = 0;
    exgrid[# global.erlSetupFirstInst, 0] = firstInst;
    exgrid[# global.erlSetupFirstTile, 0] = firstTile;
    
    // apply properties
    room_set_width(exrm, prop_width);
    room_set_height(exrm, prop_height);
    room_set_background_colour(exrm, prop_colour, true);


    // add backgrounds
    for (var i = 0; i &lt; prop_bg_n; i++)
    {
        if (i &gt; 7 || i &lt; 0)
            return -2;
        var map = prop_background[i];
        var bgName = map[? "name"];
        if (bgName == "" || bgName == "&lt;undefined&gt;" || bgName == "&amp;lt;undefined&amp;gt;")
        {
            continue;
        }
        var bgID = asset_get_index(bgName);
        if (bgID == -1)
        {
            if (!ds_map_exists(global.roomExternalBGCache,bgName))
            {
                
                assert(false, "Room background has unknown background id, with no external asset available: " + bgName);
            }
            
            bgID = global.roomExternalBGCache[? string_lower(bgName)];
            
            
        }
        
        var _visibile = map[? "visible"] != "0";
        var _foreground = map[? "foreground"] != "0";
        var _htiled = map[? "htiled"] != "0";
        var _vtiled = map[? "vtiled"] != "0";
        var _alpha = map[? "alpha"];
        if (_alpha == undefined)
        {
            _alpha = 1;
        }
        else
        {
            _alpha = real(_alpha);
        }
        
        room_set_background(
            exrm, i,
            _visibile,
            _foreground,
            bgID,
            real(map[? "x"]),
            real(map[? "y"]),
            _htiled,
            _vtiled,
            real(map[? "hspeed"]),
            real(map[? "vspeed"]),
            _alpha
        );
        mm_ds_map_destroy(map);
    }

    processedRoomStart = true;
    processedInstances = false;
    instancesProcessed = 0;
    tilesProcessed = 0;
    room_instance_add(exrm, 0, 0, objExternalRoomSetup);
    iteration += 5;
}

if (!processedInstances)
{
    // add instances
    for (var i = instancesProcessed; i &lt; prop_inst_n; i++)
    {
        if (iteration &gt;= processRate &amp;&amp; processRate &gt;= 0)
        {
            // To prevent lag, stop loading after a set number of frames.
            completion = startPlaceCompletion + (1 - startPlaceCompletion) * i / placementCount;
            exit;
        }
        instancesProcessed++;
        iteration += iterationRate;

        var map = prop_inst[i];
        if (!ds_exists(map, ds_type_map))
        {
            printErr("Number of instances exceeds allowed ds_map count.")
            break;
        }

        var objName = map[? "objName"];
        var objId = asset_get_index(objName);
        if (objId == -1)
        {
            assert(false, "Instance has unknown object_index: " + objName);
        }
        var _x = map[? "x"];
        var _y = map[? "y"];
        var inst_id = room_instance_add(exrm, real(_x), real(_y), objId);

        // copy over additional attributes to the room loader map:
        var propId = firstInst + i;
        exgrid[# propId, 0] = inst_id;
        for (var j = 0; j &lt; prop_copy_n; ++j)
        {
            exgrid[# propId, j + 1] = map[? prop_copy[j]];
        }

        // cleanup
        mm_ds_map_destroy(map);
    }

    processedTiles = false;
    processedInstances = true;
}

// add tiles
if (!processedTiles)
{
    for (var i = tilesProcessed; i &lt; prop_tile_n; i++)
    {
        if (iteration &gt;= processRate &amp;&amp; processRate &gt;= 0)
        {
            completion = startPlaceCompletion + (1 - startPlaceCompletion) * (i + prop_inst_n) / placementCount;
            // To prevent lag, stop loading after a set number of frames.
            exit;
        }
        iteration += iterationRate;
        tilesProcessed++;
        var map = prop_tile[i];
        if (!ds_exists(map, ds_type_map))
        {
            printErr("Number of tiles exceeds allowed ds_map count.")
            break;
        }
        
        var bgName = map[? "bgName"]
        var bgID = asset_get_index(bgName);
        if (bgName == "" || bgName == "&lt;undefined&gt;" || bgName == "&amp;lt;undefined&amp;gt;")
        {
            print("Warning: blank tile in " + filePath, WL_VERBOSE);
        }
        else
        {
            if (bgID == -1)
            {
                if (!ds_map_exists(global.roomExternalBGCache,string_lower(bgName)))
                {
                    
                    assert(false, "Room tile has unknown background id, with no external asset available: " + bgName);
                }
                
                bgID = global.roomExternalBGCache[? string_lower(bgName)];
                
                //assert(false, "Tile has unknown background id: " + bgName);
            }
            var alpha = 1
            var colorStr = ds_map_find_value(map, "colour");
            var r = 255;
            var g = 255;
            var b = 255;
            if(!is_undefined(colorStr))
            {
                var tileColor = real(colorStr);
                //For some reason we can't use the raw value
                //and we gotta swap the r and b channels from
                b = tileColor mod 256
                g = (tileColor div 256) mod 256;
                r = (tileColor div 65536 ) mod 256;
                alpha = (tileColor div 16777216)  mod 256;
                alpha = alpha / 255;
            }
           
            var tileId = room_tile_add_ext(exrm, bgID,
                real(map[? "xo"]), real(map[? "yo"]),
                real(map[? "w"]), real(map[? "h"]),
                real(map[? "x"]), real(map[? "y"]),
                real(map[? "depth"]), real(map[? "scaleX"]), real(map[? "scaleY"]),alpha);
            
            var propId = firstTile + tilesProcessed - 1;    
            exgrid[# propId, 0] = tileId;
            exgrid[# propId, 1] = make_color_rgb(r,g,b);
            
        }

        // cleanup
        mm_ds_map_destroy(map);
    }
    processedTiles = true;
}

completion = 1;

exgrid[# global.erlSetupInstCount, 0] = instancesProcessed;
exgrid[# global.erlSetupTileCount, 0] = tilesProcessed;

print ("Room loaded: " + fileNameWithoutExtension);
if (processRate == -1)
{
    print ("Blocked for " + string((current_time - blockStartTime)/1000) + " seconds.");
}

global.roomExternalCache[? fileNameWithoutExtension] = exrm;

complete = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
