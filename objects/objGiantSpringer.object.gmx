<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGiantSpringer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>sprGiantSpringerMskA</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// It's a giant Springer/Spring head that launches missiles from its head. The missiles can be destroyed
event_inherited();

healthpointsStart = 8;
healthpoints = healthpointsStart;
contactDamage = 6;
category = "bulky, grounded";

loadTimer = 60;
springTimer = 0;
animTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = sprGiantSpringerMskA;
event_inherited();

if (entityCanStep())
{
    if (animTimer mod 12 == 0)
        calibrateDirection();
    
    animTimer += 1;
    image_index = ((animTimer div 8) mod 2);
    var spd = 0.75;
    if (loadTimer &lt;= 20)
    {
        // loaded missile
        spd = 1 / 30;
        image_index += 2;
    }
    xspeed = image_xscale * spd;
    if (loadTimer &lt;= 0)
    {
        if (!instance_exists(objGiantSpringerMissile))
        {
            instance_create(x, y - 20, objGiantSpringerMissile);
            loadTimer = 60;
        }
    }
    else
        loadTimer -= 1;
    
    // spring out if mega man draws too near:
    if (springTimer &lt;= 0)//-30
    {
        with (objMegaman)
        {
            if (point_distance(x, y, other.x, other.y - 16) &lt; 60)
            {
                other.target = id;
                other.springTimer = 110;
            }
        }
    }
    if (springTimer &gt; -50)
        springTimer -= 1;
}
else if (dead)
{
    loadTimer = 60;
    springTimer = 0;
    animTimer = 0;
}

// springing
if (springTimer &gt; 0)
{
    xspeed = 0;
    loadTimer = 60;
    image_index = 3 + ((springTimer div 6) mod 4);
    if (image_index == 3)
        image_index = 5;
    if (image_index == 6)
        mask_index = sprGiantSpringerMskB;
    if (image_index == 4)
        mask_index = sprGiantSpringerMskC;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
