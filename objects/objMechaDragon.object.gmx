<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMechaDragon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 28;
healthpoints = healthpointsStart;
blockCollision = 0;
grav = 0;
pose = sprite_index;
contactDamage = 4;
ground = false;
attackTimer = 0;
jumpTimer = 0;
jumpAmount = 0;
canInitShoot = true;
phase = 0;
image_speed = 0.15;
introType = 0;
isDying = false;
explodeTimer = 0;

normalSprite = sprMechaDragon;
fireSprite = sprMechaDragonFire;
normalHurtSprite = sprMechaDragonHurt;
fireHurtSprite = sprMechaDragonFireHurt;

// Health Bar
healthBarPrimaryColor[1] = 47;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_2.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// Damage Tables
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objThunderBeam, 4);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 8);

// MaGMML2
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSakugarne, 0);
enemyDamageValue(objSuperArrow, 6);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 0);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 0);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 0);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 2);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 4);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 0);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBrickWeapon, 0);
enemyDamageValue(objIceSlasher, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle Intro
if (!global.frozen)
{
    image_speed = 0.15;
    
    // Starting the intro animation
    if (startIntro)
    {
        if (image_xscale == -1)
        {
            x = view_xview[0] + view_wview[0];
        }
        else
        {
            x = view_xview[0] - sprite_xoffset;
        }
        startIntro = false;
        isIntro = true;
        drawBoss = true;
        visible = true;
    }
    else if (isIntro)
    {
        if (((x &lt; xstart) &amp;&amp; image_xscale == 1) || ((x &gt; xstart) &amp;&amp; image_xscale == -1))
        {
            x += image_xscale;
        }
        else
        {
            isIntro = false;
            playSFX(sfxMechaDragon);
            grav = gravStart;
            blockCollision = blockCollisionStart;
        }
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        switch (phase)
        {
            case 0: // Mecha Dragon only has 1 real attack, however you can do different attack patterns, see pharoh mans step event code for an example 
                if (yspeed == 0)
                {
                    yspeed = -0.5;
                    xspeed = yspeed;
                }
                if (x &lt; xstart - 16)
                {
                    yspeed = -yspeed;
                    xspeed = 0.5;
                }
                if (x &gt; xstart + 16)
                    xspeed = -0.5;
                attackTimer -= 1;
                if (attackTimer == 50)
                    sprite_index = normalSprite
                if (attackTimer &lt;= 0)
                {
                    attackTimer = 60;
                    var fire = instance_create(x + 48 * image_xscale, y - 32,
                        objMechaDragonFire);
                    sprite_index = fireSprite;
                    fire.image_xscale = image_xscale;
                }
                break;
        }
    }
    // Death animation
    if (isDying)
    {
        var _x = random_range(bbox_left,bbox_right);
        var _y = random_range(bbox_top,bbox_bottom);
        
        explodeTimer++;
        if (explodeTimer mod 2 == 0)
        {
            repeat(4)
            {
                var i = instance_create(_x, _y, objExplosion);
                i.sprite_index = sprCrashExplosion;
            }
        }
        if (explodeTimer mod 8 == 0)
        {
            playSFX(sfxEnemyHit);
        }
        if (explodeTimer mod 16 == 0)
        {
            instance_create(_x, _y, objBigExplosion);
        }
        if (explodeTimer == 180)
        {
            event_user(EV_DEATH);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.object_index == objPharaohShot)
{
    with (objPharaohShot)
    {
        if (sprite_index = sprPharaohShotCharged)
        {
            extraDamage = 4;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objMechaDragonFire)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
if (!isDying)
{
    isFight = false;
    isDying = true;
    canHit = false;
    contactDamage = 0;
    iFrames = 0;
    xspeed = 0;
    yspeed = 0;
    with(instance_create(random_range(bbox_left,bbox_right),random_range(bbox_top,bbox_bottom),objExplosion))
        sprite_index = sprCrashExplosion;
    playSFX(sfxEnemyHit);
}
else
{
    event_inherited();
    playSFX(sfxEnemyHit);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss)
    {
        if (!isDying)
        {
            drawSelf();
            // Hitspark
            if ((iFrames mod 4) &lt; 2 || !iFrames)
            {
                if (sprite_index == normalHurtSprite)
                {
                    sprite_index = normalSprite;
                }
                else if (sprite_index = fireHurtSprite)
                {
                    sprite_index = fireSprite;
                }
            }
            else
            {
                if (sprite_index ==  normalSprite)
                {
                    sprite_index = normalHurtSprite;
                }
                else if (sprite_index = fireSprite)
                {
                    sprite_index = fireHurtSprite;
                }
            }
        }
        else
        {
            if (explodeTimer mod 40 &lt; 10) //((iFrames mod 16) &lt; 8 || !iFrames)
            {
                d3d_set_fog(true, c_white, 0, 0);
                drawSelf();
                d3d_set_fog(false, 0, 0, 0);
            }
            else
            {
                drawSelf();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
