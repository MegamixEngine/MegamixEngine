<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSaveMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>250</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SAVE_TOTAL = 8; // supported max of saves
controlsLocked = false; // controls are locked when switching menu modes

playerID = 0;
costumeID = 0;
isFrozen = 0;

/// variables

option = 0;
option2 = 0;
option3 = 0;
fileCopyFrom = 0;
cursorTimer = 0;
selectionMode = 0;
weaponListDelay = 0;
weaponListScroll = 0;
updateWeaponList = 0;

/////////////////////////////////////////////////////////
costumeList = 0;
costumeNames = 0;
costumeCount = 0;
costumesDir = "Costumes";

currentFolder = "";
alarm[0] = 1;

characterChosen = array_create(SAVE_TOTAL + 1);
fileCorrupt = array_create(SAVE_TOTAL + 1);

/*
0: choose a file
1: what to do with file
2: where to copy file to
3: confirm deletion of file
*/
titleBar = "LOAD";

// - - - - - - - - - - - - - - - -

playerWiggle = 0;

// configurable things!
selectionChangeSound = sfxMenuMove;
fileStartSound = sfxMenuSelect;
fileCopySound = sfxUnlocked;
fileDeleteSound = sfxDeath;
submenuOpenSound = sfxMM10Submenu;
submenuCloseSound = sfxMM10Submenu;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// needed for custom costumes, apparently?
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[0] &gt;= 0)
{
    exit;
}

//cursor animates
cursorTimer++;

//weapons animate
if (isFile[option])
{
    //scroll through the entire list of weapons, pausing at the start and end
    if (weaponListDelay &lt; 70)
        weaponListDelay++;
    else if weaponListScroll &lt; (ceil(weaponListLength[option] / 2) - 7) * 16
        weaponListScroll += 0.5;
    else if weaponListDelay &lt; 140
        weaponListDelay++;
    else
    {
        weaponListScroll = 0;
        weaponListDelay = 0;
    }
}

if (!controlsLocked)
{
    if (selectionMode &lt; 2)
        titleBar = "LOAD";
    
    var xDir = global.keyRightPressed[0] - global.keyLeftPressed[0];
    var use = (global.keyJumpPressed[0] || global.keyPausePressed[0]);
    
    switch (selectionMode)
    {
        case 0: //What file should we use?
            //if (isFile[option])
            //    global.characterSelected[0] = fileCharacter[option];
                
            //choose which file to work with
            if (xDir != 0)
            {
                option += xDir;
                if option &gt; SAVE_TOTAL
                    option = 0;
                if option &lt; 0
                    option = SAVE_TOTAL;
                playSFX(selectionChangeSound);
                weaponListScroll = 0;
                weaponListDelay = 0;
                
                updateWeaponList = 1;
            }
            
            //selecting a file
            if use &amp;&amp; option != 0
            {
                if !isFile[option]  //new game
                {
                    global.nextRoom = rmCharacterDifficultySelect;
                    global.saveSlot = option;
                    controlsLocked = true;
                    playSFX(fileStartSound);
                }
                else    //existing file: what will you do?
                {
                    selectionMode = 1;
                    playSFX(submenuOpenSound);
                }
            }
            
            //back out, or use "back" option
            if (global.keyShootPressed[0]) || (use &amp;&amp; option = 0)
            {
                global.nextRoom = rmTitleScreen;
                controlsLocked = true;
                playSFX(submenuCloseSound);
            }
            break;
        
        case 1: //what will you do with this file?
            //choose an operation
            if (xDir != 0)
            {
                option2 += xDir;
                if option2 &gt; 2
                    option2 = 0;
                if option2 &lt; 0
                    option2 = 2;
                playSFX(selectionChangeSound);
            }
            
            if (use)
            {
                if (fileCorrupt[option])
                {
                    playSFX(sfxError);
                    exit;
                }
                
                switch (option2)
                {
                    case 0: //play
                        //mostly copied from old code, but it works fine
                        global.saveSlot = option;
                        
                        var error = saveLoadGame(false);
                        if (error)
                        {
                            saveLoadGame(SL_INIT);
                            playSFX(sfxError);
                        }
                        else
                        {
                            weaponSetup();
                            playSFX(fileStartSound);
                            
                            for (var i = 0; i &lt; array_length_1d(global.customCostumeEquipped); i++) {
                                if (global.customCostumeEquipped[i]) {
                                    var costError = loadCustomCostume(global.customCostumeFilename[i], i);
                                    
                                    if (costError != 0){
                                        global.customCostumeEquipped[i] = false;
                                        global.costumeSelected[i] = global.costumeName[0];
                                    }
                                }
                            }
                
                            if (global.keyMap[0])
                            { //Cancel checkpoint if we hold special.
                                setCheckpoint(0);
                                resetReturnLayers();
                                stopMusic();
                            }
                            
                            var myRoom = lvlShowcaseHUB;
                            
                            //Do we have a checkpoint?
                            if (global.checkpointName != "") 
                            {
                                var load = global.stage;
                                
                                var roomGotten = getRoom(load);
                                
                                //If room valid, set as target room
                                if (roomGotten != -1)
                                {
                                    myRoom = roomGotten;
                                }
                            }
                            
                            goToLevel(myRoom);
                            
                            controlsLocked = true;
                        }
                        break;
                    
                    case 1: //copy
                        playSFX(submenuOpenSound);
                        fileCopyFrom = option;
                        selectionMode = 2;
                        titleBar = "COPY";
                        break;
                        
                    case 2: //delete
                        playSFX(submenuOpenSound);
                        selectionMode = 3;
                        titleBar = "DELETE";
                        break;
                }
            }
            
            //back out: return to picking a file
            if global.keyShootPressed[0]
            {
                playSFX(submenuCloseSound);
                selectionMode = 0;
                option2 = 0;
            }
            break;

        case 2: //Copy to what file?
            //choosing a file is identical to mode 0
            if (xDir != 0)
            {
                option += xDir;
                if option &gt; SAVE_TOTAL
                    option = 0;
                if option &lt; 0
                    option = SAVE_TOTAL;
                playSFX(selectionChangeSound);
                weaponListScroll = 0;
                weaponListDelay = 0;
            }
            
            //selecting a file
            if (use &amp;&amp; option != 0)
            {
                if (option == fileCopyFrom)
                {   //cannot copy to the file you are copying from
                    //i don't know if this is actually restricted, but w/e
                    playSFX(sfxError);
                }
                else if !isFile[option]
                {   //if file is blank, copy with no confirmation
                    event_user(1);
                    playSFX(fileCopySound);
                }
                else
                {   //if file is not blank, ask user if they're sure
                    selectionMode = 3;
                    playSFX(submenuOpenSound);
                }
            }
            
            //back out, or use "back" option
            if (global.keyShootPressed[0]) || (use &amp;&amp; option = 0)
            {
                selectionMode = 1;
                option = fileCopyFrom;
                playSFX(submenuCloseSound);
            }
            break;
        
        case 3: //are you sure you want to delete this file?
            global.saveSlot = option;
            
            //alternate between yes and no regardless of direction
            if xDir != 0
            {
                option3 = !option3;
                playSFX(selectionChangeSound);
            }
            //make choice
            if (use) &amp;&amp; (option3)
            {
                if (option2 = 1)
                {   //if coming from copy menu, copy file
                    playSFX(fileCopySound);
                    event_user(0);
                    
                    //then return to copyto menu
                    selectionMode = 2;
                    option3 = 0;
                }
                else
                {   //if coming from delete menu, delete file
                    playSFX(fileDeleteSound);
                    
                    global.saveSlot = option;
                        
                    if (slExists("gameProgress", 1))
                    {
                        slDelete("gameProgress", 1, "deletedSave");
                    }
                    
                    isFile[option] = false;
                    
                    //return to file select menu
                    selectionMode = 0;
                    option3 = 0;
                    option2 = 0;
                }
            }
            //back out, or press "no"
            else if (global.keyShootPressed[0]) || (use &amp;&amp; !option3)
            {
                //just return to previous menu
                option3 = 0;
                if(option2 = 1) 
                    selectionMode = 2;//return to file select
                else
                    selectionMode = 1;//return to action select
                playSFX(submenuCloseSound);
            }
            break;
    }
    
    // co-op players
    if (selectionMode &lt;= 1)
    {
        // player count
        if (playerWiggle &gt; 0)
            playerWiggle --;
            
        // change players
        if (global.keyWeaponSwitchRightPressed[0])
        {
            global.playerCount ++;
            var mySFX = sfxTeleportOutClassic;

            if (global.playerCount == 5)
            {
                global.playerCount = 1;
            }
            audio_stop_sound(mySFX);
            var mySound = audio_play_sound(mySFX, 50, 0);
            audio_sound_pitch(mySound,0.75 + (global.playerCount * 0.25));
            audio_sound_gain(mySound, soundGetVolume(1), 0);
            playerWiggle = 16;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Copy a savefile

//copy the files
global.saveSlot = fileCopyFrom;
saveLoadGame(false);
global.saveSlot = option;
saveLoadGame(true);

objGlobalControl.saveTimer = 40;
event_user(0);

fileCopyFrom = 0;
selectionMode = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// load list of files
var loadMode = true; // true = all, false = one
if (fileCopyFrom &gt; 0)
    loadMode = false;

isFile[0] = false;

for (var i = ternary(loadMode, 1, option); i &lt;= ternary(loadMode, SAVE_TOTAL, option); i++)
{
    if (fileCopyFrom == 0)
    {
        saveLoadGame(SL_INIT);
        global.saveSlot = i;
    }
    
    var fileExists = (saveLoadGame(false) == 0);
    
    if (fileExists)
    {
        //read file data from non-empty save files
        isFile[i] = true;
        
        energyElements[i] = global.energyElements;
        gameTimer[i] = global.gameTimer;
        
        fileCharacter[i] = global.characterSelected[0];
        fileDifficulty[i] = global.difficulty;
        
        fileBolts[i] = global.bolts;
        eTanks[i] = global.eTanks;
        wTanks[i] = global.wTanks;
        mTanks[i] = global.mTanks;
        
        //read all visible weapons on hotbar(???)
        var wepCount = 0;
        for(var z = 0; z &lt; global.totalWeapons + 1; z++;)
        {
            if (global.weaponLocked[global.weaponHotbar[z]] != 2
            &amp;&amp; !global.weaponHidden[global.weaponHotbar[z]])
            {
                weaponHotbar[i, wepCount] = global.weaponHotbar[z];
                wepCount++
            }
        }
        weaponListLength[i] = array_length_2d(weaponHotbar, i);
        
        // Costumes
        fileCostume[i] = global.costumeID[? global.costumeSelected[0]];
        if (global.customCostumeEquipped[0])
        {
            fileCostume[i] = global.customCostumeIndex;
            if (file_exists(global.customCostumeFilename[0]))
            {
                var err = loadCustomCostume(global.customCostumeFilename[0],0);//setCustomCostumeVariables(i,i,global.customCostumeFilename[0],false);
                if (err == 0)
                {
                    costumeVerified[i] = true;
                }
                else
                {
                    costumeVerified[i] = false;
                }
                
            }
            else
            {
                fileCostume[i] = 0;
            }
        }
    }

    else
    {
        isFile[i] = false;
        
        switch (global.sl_error)
        {
            case 3:
                isFile[i] = true;
                fileCorrupt[i] = true;
            break;
        }
    }
}

global.saveSlot = 0;
saveLoadGame(SL_INIT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[0] &gt;= 0)
{
    exit;
}

if (updateWeaponList &amp;&amp; isFile[option])
{
    global.characterSelected[0] = fileCharacter[option];
    weaponSetup();
    updateWeaponList = 0;
}

clearDrawState();

draw_set_color(c_white);
draw_set_alpha(1);
draw_set_valign(fa_top);

draw_sprite(sprSaveMenuBG, (option == 0) || (!isFile[option]), 0, 0);

draw_set_halign(fa_center);

// Co-op display
draw_set_halign(fa_left);
draw_set_font(global.fontTiny);
var str = "PLAYERS";
var xx = (string_width(str) + 12)+12;//128;
var yy = y + (view_hview - 12);
draw_text(xx-string_width(str), yy, str);

draw_sprite_ext(sprDot, 0, xx, (yy + 8), -string_width(str), 1, 0, c_white, 1);

xx -= (string_width(str) + 12);

drawButtonPrompt("switchright", xx, yy);
draw_set_font(global.font);
xx += ((string_width(str)*2) + 12);
var wigD = 0;
if (playerWiggle != 0)
    wigD = lerp(-2,2,playerWiggle/2 * 0.34);
var plC = (global.playerCount-1) + (global.multiplayerColors*4);
if (global.playerCount == 1) //if 1 player, do not apply multiplayer colors
    plC = 0;
draw_sprite(sprTitleMultipIcon,plC,xx-string_width(str) - 21 + wigD ,yy-5);

str = "";
if (isFile[option])
    str = "SHOWCASE";

xx = 256-128-8;
if (str != "")
{
    drawButtonPrompt("map", xx, yy);
    draw_text(xx+12, yy, str);
}

draw_set_halign(fa_center);

//LOAD
draw_text_colour(128, 17, titleBar, global.nesPalette[$21], global.nesPalette[$21], global.nesPalette[$21], global.nesPalette[$21], 1);

//cursor movement
var coff = floor((cursorTimer / 7) mod 4);
coff -= 2 * (coff = 3); //3 turns to 1

switch(selectionMode)
{
    case 0: //choose a file
    case 2: //select a slot to copy to
        //File numbers
        draw_text(40, 40, "BACK");
        for (var drawNum = 1; drawNum &lt; 9; drawNum++;)
        {
            if (selectionMode == 2) &amp;&amp; (drawNum == fileCopyFrom)
                draw_set_colour(global.nesPalette[$28]);
            draw_text(51 + (22 * drawNum), 40, string(drawNum));
            draw_set_colour(c_white);
        }
        
        //Cursor
        if (option == 0)
        {
            draw_sprite(sprSaveMenuCursor, 0, 28 - coff, 52 + coff);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + coff, 52 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 28 - coff, 36 - coff, 1, -1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + coff, 36 - coff, -1, -1, 0, c_white, 1);
        }
        else
        {
            draw_sprite(sprSaveMenuCursor, 0, 49 + (22 * option) - coff, 52 + coff);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + (22 * option) + coff, 52 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 49 + (22 * option) - coff, 36 - coff, 1, -1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + (22 * option) + coff, 36 - coff, -1, -1, 0, c_white, 1);
        }
        break;
    
    case 1: //what to do with this file?
        //cover up dividers
        draw_rectangle_colour(19, 27, 236, 60, c_black, c_black, c_black, c_black, 0);
        //options
        draw_text(128, 40, "PLAY    COPY    DELETE");
        //cursor
        draw_sprite(sprSaveMenuCursor, 0, 36 + (64 * option2) - coff, 47 + coff);
        draw_sprite_ext(sprSaveMenuCursor, 0, 36 + (64 * option2) - coff, 40 - coff, 1, -1, 0, c_white, 1);
        //only the right half needs to be adjusted to fit "delete"
        if (option2 != 2)
        {
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * option2) + coff, 47 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * option2) + coff, 40 - coff, -1, -1, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * 2) + 16 + coff, 47 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * 2) + 16 + coff, 40 - coff, -1, -1, 0, c_white, 1);
        }
        break;
        
    case 3: //confirm deletion
        //cover up dividers
        draw_rectangle_colour(19, 27, 236, 60, c_black, c_black, c_black, c_black, 0);
        if(option2 = 2)
            draw_text(128, 30,"DELETE THIS FILE?");
        else
            draw_text(128, 30,"OVERWRITE THIS FILE?");
        //options
        draw_text(128, 46,"Yes    No");
        //cursor
        draw_sprite(sprSaveMenuCursor, 0, 89 + (56 * !option3) - coff, 53 + coff);
        draw_sprite_ext(sprSaveMenuCursor, 0, 89 + (56 * !option3) - coff, 46 - coff, 1, -1, 0, c_white, 1);
        draw_sprite_ext(sprSaveMenuCursor, 0, 119 + (48 * !option3) + coff, 53 + coff, -1, 1, 0, c_white, 1);
        draw_sprite_ext(sprSaveMenuCursor, 0, 119 + (48 * !option3) + coff, 46 - coff, -1, -1, 0, c_white, 1);
        break;
}

//if there's a save file, draw it's information
if !((option == 0) || (!isFile[option]))
{
    //difficulty
    var dif;
    switch(fileDifficulty[option])
    {
        case 0:
            var diff = "EASY";
            break;
        case 1:
            var diff = "NORMAL";
            break;
        case 2:
            var diff = "HARD";
            break;
        default:
            var diff = "INVALID";
            break;
    }
    draw_text(67, 80, diff);
    
    //play time
    var playHrs = floor(gameTimer[option] / (60 * 60 * 60));
    var playMns = floor(gameTimer[option] / (60 * 60)) - (playHrs * 60);
    var playScs = floor(gameTimer[option] / 60) - ((playHrs * (60 * 60)) + (playMns * 60));
    draw_text(67, 116, "PLAY TIME:#" + zeroPad(string(playHrs), 2) + ":" + zeroPad(playMns, 2) + ":" + zeroPad(playScs, 2));
    
    draw_set_halign(fa_left);
    
    //your character
    var cosX = 34;
    var cosY = 173;
    costumeID = fileCostume[option];
    playerPalette();
    
    var pri = global.primaryCol[0];
    var sec = global.secondaryCol[0];
    /*if (fileCostume[option] == global.customCostumeIndex &amp;&amp; costumeVerified[option])
    {
        pri = costumeListCol[option,1];
        sec = costumeListCol[option,2];
    }*/

    if (fileCorrupt[option])
    {
        draw_sprite(sprFileSelectCorrupt,min(2,(alarm[2] &gt;= 0) + (global.keyWeaponSwitchLeft[0] &gt; 0 &amp;&amp; current)*2),cosX,cosY-3);
    }
    else
    {
        var spr = global.playerSprite[fileCostume[option]];

        /*if (fileCostume[option] == global.customCostumeIndex &amp;&amp; costumeVerified[option])
        {
            spr = global.customCostumeDisplay[option];
            //drawCostume(global.customCostumeDisplay[i], 0, 0, xxx, yyy, 1, 1, c_white, pri, sec, !j, primAlph, secAlph, j);
        }*/

        drawCostume(spr, 0, 0, cosX, cosY, 1, 1, c_white, pri, sec, c_black);
    }
    
    //bolts
    draw_sprite_ext(sprBoltBig, 0, 53, 156, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprBoltBig, 1, 53, 156, 1, 1, 0, pri, 1);
    draw_sprite_ext(sprBoltBig, 2, 53, 156, 1, 1, 0, sec, 1);
    draw_text(52 + 20, 156 + 8, zeroPad(fileBolts[option], 4));
    
    //energy elements
    draw_sprite_ext(sprEnergyElement, 0, 52, 178, 1, 1, 0, c_white, 1);
    draw_text(52 + 20, 179 + 4, zeroPad(energyElements[option], 3));
    
    //weapons
    draw_text(122 + 8, 76, "WEAPONS");
    
    var surface = surface_create(16 * 7, 32);
    surface_set_target(surface);
    
    draw_set_color(c_black);
    draw_rectangle(0, 0, surface_get_width(surface), surface_get_height(surface), 0);
    draw_set_color(c_white);
    
    var hoff, voff;
    for (var i = 0; i &lt; weaponListLength[option]; i++;)
    {
        hoff = floor(i / 2) * 16;
        voff = (i mod 2) * 16;
        
        drawWeaponIcon(weaponHotbar[option, i], 0, costumeID, hoff - weaponListScroll, voff, 1);
    }
    //draw_text(-weaponListScroll, 0, "This is an excessively long debug string used to test the scrolling functionality of the weapon icon display.");
    
    surface_reset_target();
    draw_surface(surface, 121, 92);
    surface_free(surface);
    
    //tanks
    draw_text(122 + 8, 132, "ITEMS");
    
    draw_sprite_ext(sprETank, 2, 122, 148, 1, 1, 0, pri, 1);
    draw_sprite_ext(sprETank, 4, 122, 148, 1, 1, 0, sec, 1); 
    draw_text(122, 148 + 18, zeroPad(eTanks[option], 2));

    draw_sprite_ext(sprWTank, 2, 122 + 32, 148, 1, 1, 0, pri, 1);
    draw_sprite_ext(sprWTank, 4, 122 + 32, 148, 1, 1, 0, sec, 1);
    draw_text(122 + 32, 148 + 18, zeroPad(wTanks[option], 2));
    
    draw_sprite_ext(sprMTank, 2, 122 + 64, 148, 1, 1, 0, pri, 1);
    draw_sprite_ext(sprMTank, 4, 122 + 64, 148, 1, 1, 0, sec, 1);
    draw_text(122 + 64, 148 + 18, zeroPad(mTanks[option], 2));
}
//no save file
else if (option != 0)
{
    draw_text(128, 132, "NEW GAME");
    draw_set_halign(fa_left);
}

clearDrawState();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
