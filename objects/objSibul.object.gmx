<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSibul</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A flying enemy that alternates between pausing and lunging toward the player. It explodes when destroyed.
/// By default, it will also self-destruct if not defeated quickly enough. This can be customized with creation code.
/// Adds a layer of pressure to any challenge.

event_inherited();

healthpointsStart = 2;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "flying, nature";
grav = 0;
imgIndex = 0;

blockCollision = 0;
facePlayerOnSpawn = true;

// Enemy specific code
// @cc - Sets time until Sibul self-destructs. Set to -1 to disable self-destruct.
countDown = 720;

_countDown = countDown
imgSpd = 0.1;
moveSpeed = 0;
accel = 0.1;
phase = 0;
targX = x;
targY = y;
animBack = false;
moveTimer = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Animation
    imgIndex += imgSpd;
    
    // Movement
    switch (phase)
    {
        case 0:
            if (moveSpeed == 0)
            {
                moveTimer--;
                if (moveTimer == 0)
                {
                    calibrateDirection();
                    if (instance_exists(target))
                    {
                        targX = target.x + 16 * image_xscale;
                        targY = target.y;
                    }
                    else
                    {
                        targX = x;
                        targY = y;
                    }
                    phase = 1;
                    imgSpd = 0.5;
                    moveSpeed = 3; // accel;
                }
            }
            break;
        case 1:
            move_towards_point(targX, targY, moveSpeed);
            if ((distance_to_point(targX, targY) &lt; 60) &amp;&amp; (moveSpeed &gt; 0))
            {
                moveSpeed -= accel;
                imgSpd = 0.1;
            }
            else if (moveSpeed &lt; 3)
            {
                moveSpeed += 0.5;
            }
            if (moveSpeed == 0)
            {
                phase = 0;
                moveTimer = 60;
                imgSpd = 0.1;
            }
            break;
    }
    
    // Self destruct after several seconds
    if (_countDown &gt; 0)
        _countDown--;
    if (_countDown == 0)
    {
        dead = true;
        itemDrop = -1;
        i = instance_create(x, y, objHarmfulExplosion);
        i.contactDamage = 6;
        i.stopOnFlash = false;
        playSFX(getGenericSFX(SFX_EXPLOSIONMM9));
    }
}
else if (dead)
{
    healthpoints = healthpointsStart;
    imgIndex = 0;
    phase = 0;
    _countDown = countDown;
    imgSpd = 0.1;
    moveSpeed = 0;
    targX = x;
    targY = y;
    moveTimer = 60;
    itemDrop = 0;
    animBack = false;
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if ((other.object_index != objTornadoBlow) &amp;&amp; (other.object_index != objBlackHoleBomb))
{
    i = instance_create(x, y, objHarmfulExplosion);
    i.contactDamage = 6;
    stopSFX(getGenericSFX(SFX_ENEMYHIT));
    playSFX(getGenericSFX(SFX_EXPLOSIONMM9));
    
    if ((other.object_index == objSlashClaw) || (other.object_index == objBreakDash))
    {
        with (objSlashEffect)
        {
            image_alpha = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
