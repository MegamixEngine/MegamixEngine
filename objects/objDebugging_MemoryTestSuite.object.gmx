<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///An object designed to run through every room in the project to test memory leaks.

if (!DEBUG_ENABLED)
{
    exit;
}

//Will need manual checks for bannedRooms.

var bannedRoomsString = "rmInit,rmWeaponGet,rmShop,rmUnitTest";

var startAt = 0;
bannedRooms = stringSplit(get_string("Banned Rooms?",bannedRoomsString),",",true);

startAt = asset_get_index(get_string("Start at?",""));

for (var i = 0; i &lt; array_length_1d(bannedRooms); i++)
{
    bannedRooms[i] = asset_get_index(bannedRooms[i]);
}

roomArray = array_create(0);
for (var i = max(0,startAt); i &lt;= room_last; i++)
{
    roomArray[i] = i;
}
roomArray[i] = lvlCopyThisRoom;


currentRoomID = max(0,startAt);
alarm[0] = 1;

myFile = file_text_open_write(working_directory + "memtest.txt");

room_speed = 999;
type = real(get_string("Type?","0"));

leakSize = 2000;
switch (type)
{
    //Type 0: Room iteration.
    case 1://Type 1: Same Room Iteration.
        roomArray = allocateArray(800,asset_get_index(get_string("room name?","lvlCopyThisRoom")));
    break;
    case 2://Type 2: Memory Leak limit test.
        leakSize = real(get_string("Leak size? (MB)",leakSize))
    break;
}
    

testIteration = 1;
testIterationMax = get_integer("How many times?","1");

type3_canGo = true;

event_user(0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!DEBUG_ENABLED)
{
    exit;
}
file_text_close(myFile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!DEBUG_ENABLED)
{
    exit;
}

switch (type)
{

    case 0:
    case 1:
    case 3:
        if (type == 3 &amp;&amp; !type3_canGo)
        {
            alarm[0] = 1;
            if (!audio_is_playing(sfxCountBomb))
                playSFX(sfxCountBomb);
            exit;
        }
        if (currentRoomID &lt; array_length_1d(roomArray))
        {
            if (indexOf(bannedRooms,roomArray[currentRoomID]) &gt;= 0)
            {
                print("SKIPPING ROOM " + roomExternalGetName(roomArray[currentRoomID]),WL_SHOW);
            }
            else
            {
                print(roomExternalGetName(roomArray[currentRoomID]),WL_SHOW);

                goToLevel(roomArray[currentRoomID],false,true);
            }    
            alarm[0] = 5;
            
            
        }
        else if (testIteration &lt; testIterationMax)
        {
            testIteration++;
            currentRoomID = 0;
            alarm[0] = 5;
        }
        else
        {
            print("CLEANING UP PROBLEM OBJECTS",WL_SHOW);
            with (objSarysa_CGLevelController)
            {
                instance_destroy();
            }
            with (objHimajinJichiku_MusicControl)
            {
                instance_destroy();
            }
            with (objVoidVisitor_GlobalExtender)
            {
                instance_destroy();
            }
            event_perform(ev_other,ev_room_start);
            //print("FREEING GIG! THIS COULD BE DANGEROUS!",WL_SHOW);
            //external_free("gig.dll");
            print("ACTIVATING ALL INSTANCES",WL_SHOW);
            instance_activate_all();
            print("TESTING COMPLETE, PRINTING MEMORY MANAGER",WL_SHOW);
            event_user(0);
            instance_destroy();
            room_speed = 60;
        }
        if (alarm[0] == 5 &amp;&amp; type == 3)
        {
            alarm[0] = 60;
        }
    break;
    case 2://Memory leak limit test.
        alarm[0] = 5;
        var leakList = ds_list_create();
        printErr(string(MECLMM_GetMemory()));
        for (var i = 0; i &lt; 1000; i++)
        {
            ds_list_add(leakList,array_create(1000));
            
        }
        if (MECLMM_GetMemory() &gt;= leakSize)
        {
            alarm[0] = -1;
        }
    break;
}
currentRoomID++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Type 3 element getting.
var foundElement = false;
var eleName = "";

instance_activate_object(objEnergyElement);
instance_activate_object(prtBoss);

with (objEnergyElement)
{
    if (name != "")
    {
        foundElement = true;
        //x = objDefaultSpawn.x;
        //y = objDefaultSpawn.y;
        eleName = name;
    }
}
with (objTierRank)
{
    eleName = roomExternalGetName(room) + "0";
}

if (!foundElement)
{
    with (prtBoss)
    {
        if (elementName != "")
        {
            eleName = elementName;
            foundElement = true;
        }
        
        instance_destroy();
//        instance_deactivate_object(id);
        
    }
}

if (!foundElement)
{
    file_text_write_string(myFile,"No ele " + roomExternalGetName(room));
    file_text_writeln(myFile);
    printErr("Could not find element for " + roomExternalGetName(room));
    alarm[0] = 1;
    type3_canGo = true;
}
else
{
    file_text_write_string(myFile,foundElement);
    file_text_writeln(myFile);
    alarm[0] = 15;
    type3_canGo = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Print Data

var dsString = "";


switch (currentData[1])
{
    case MEMORYMANAGER_LIST:
        dsString += "LIST:";
        for (var i = 0; i &lt; ds_list_size(currentData[0]); i++)
        {
            dsString += string(ds_list_find_value(currentData[0],i));
            dsString += ",";
        }
        dsString += global.newLine;
    break;
    case MEMORYMANAGER_MAP:
        dsString += "MAP:";
        var key = ds_map_find_first(currentData[0]);
        while (!is_undefined(key))//for (var i = 0; i &lt; ds_list_size(currentData[0]); i++)
        {
            dsString += string(ds_map_find_value(currentData[0],key));
            dsString += ",";
            key = ds_map_find_next(currentData[0],key);
            
        }
        dsString += global.newLine;
    break;
    case MEMORYMANAGER_GRID:
    dsString += "GRID:";
        dsString += string(ds_grid_width(currentData[0])) + "," + string(ds_grid_height(currentData[0]));
        dsString += global.newLine;
    break;
    case MEMORYMANAGER_STACK:
    dsString += "STACK:";
        dsString += string(ds_stack_size(currentData[0]));
        dsString += global.newLine;
    break;
    case MEMORYMANAGER_QUEUE:
    dsString += "QUEUE:";
        dsString += string(ds_queue_size(currentData[0]));
        dsString += global.newLine;
    break;
    case MEMORYMANAGER_PRIORITY:
    dsString += "PRIORITY:";
        dsString += string(ds_priority_size(currentData[0]));
        dsString += global.newLine;
    break;
    case MEMORYMANAGER_SPRITE:
        dsString += "SPRITE";
        dsString += global.newLine;
    break;
    
}

file_text_write_string(myFile,dsString);
//file_text_writeln(myFile);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Print map
currentData = noone;
var map = global.memoryManager;
var _next = ds_map_find_first(map);
var _count = 0;

while ( !is_undefined( _next ) ) {
  var _string = string( _next ) + " x" + string( map[? _next ] );
  //draw_text( x, y + _count * 12, _string );
     file_text_write_string(myFile,_string);
    file_text_writeln(myFile);
    currentData = map[? _next ];
    event_user(1);
  _next = ds_map_find_next( map, _next );
  _count++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
stopMusic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Called before other room starts at least.
if (!DEBUG_ENABLED)
{
    exit;
}
switch (type)
{
    default:
        var writeString = "";
        writeString += roomExternalGetName(global.previousRoom) + "," + string(MECLMM_GetMemory());
        file_text_write_string(myFile,writeString);
        file_text_writeln(myFile);
        room_speed = 999;
    break;
    case 3:
        defer(ev_step,ev_step_normal,0,stringExecutePartial,makeArray("with(objDebugging_MemoryTestSuite)event_user(3);"),5);
        
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
