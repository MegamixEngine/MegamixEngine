<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM10NeoHeliMetall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 1;
healthpoints = healthpointsStart;
contactDamage = 4;

category = "mets, flying";

despawnRange = 32;
respawnRange = 1;

blockCollision = 0;
grav = 0;

facePlayer = true;

// Enemy specific code
oldPhase = 0;
phase = 0;
shootTimer = 0;
actionTimer = 0;

mdir = "v";
hmdir = -1;

sinCounter = 0;

imgSpd = 0.4;
imgIndex = 0;

image_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0:
            if (oldPhase == 0)
            {
                phase = 1;
            }
            else if (oldPhase == 2)
            {
                phase = 3;
            }
            else if (oldPhase == 3)
            {
                phase = 2;
            }
            break;
        
        // start
        case 1:
            actionTimer += 1;
            sinCounter += 0.03;
            if (mdir == 'v')
            {
                yspeed = (cos(sinCounter) * 1);
            }
            else if (mdir == 'h')
            {
                if (hmdir == 1)
                {
                    xspeed = (cos(sinCounter) * 1);
                }
                else
                {
                    xspeed = -(cos(sinCounter) * 1);
                }
                image_xscale = sign(xspeed);
            }
            if (actionTimer &gt;= 50)
            {
                oldPhase = 2;
                phase = 4;
            }
            break;
        case 2:
            actionTimer += 1;
            sinCounter += 0.03;
            if (mdir == 'v')
            {
                yspeed = (cos(sinCounter) * 1);
            }
            else if (mdir == 'h')
            {
                if (hmdir == 1)
                {
                    xspeed = (cos(sinCounter) * 1);
                }
                else
                {
                    xspeed = -(cos(sinCounter) * 1);
                }
                image_xscale = sign(xspeed);
            }
            if (actionTimer &gt;= 100)
            {
                oldPhase = 2;
                phase = 4;
            }
            break;
        case 3:
            actionTimer += 1;
            sinCounter += 0.03;
            if (mdir == 'v')
            {
                yspeed = -(cos(sinCounter) * 1);
            }
            else if (mdir == 'h')
            {
                if (hmdir == 1)
                {
                    xspeed = -(cos(sinCounter) * 1);
                }
                else
                {
                    xspeed = (cos(sinCounter) * 1);
                }
                image_xscale = sign(xspeed);
            }
            if (actionTimer &gt;= 100)
            {
                oldPhase = 3;
                phase = 4;
            }
            break;
        
        // shooting
        case 4:
            xspeed = 0;
            yspeed = 0;
            shootTimer += 1;
            if (shootTimer &gt;= 10)
            {
                xspeed = 0;
                yspeed = -0;
                if (shootTimer == 10) &amp;&amp; (mdir == 'h') // Only do this for horizontal version
                    calibrateDirection();
            }
            if (shootTimer == 20)
            {
                xspeed = 0;
                yspeed = 0;
                var turnOffset = 0;
                if (image_xscale &lt; 0)
                {
                    turnOffset = 180;
                }
                var ID;
                for (i = 0; i &lt; 3; i += 1)
                {
                    ID = instance_create(x + image_xscale * 8, spriteGetYCenter(), objEnemyBullet);
                    ID.direction = (i - 1) * 45 + turnOffset;
                    ID.speed = 1.75;
                }
                    
                playSFX(sfxEnemyShootClassic);
            }
            if (shootTimer &gt;= 40)
            {
                xspeed = 0;
                yspeed = 0;
            }
            if (shootTimer &gt;= 50)
            {
                xspeed = 0;
                yspeed = 0;
            }
            if (shootTimer &gt;= 60)
            {
                actionTimer = 0;
                shootTimer = 0;
                sinCounter = -1.56;
                xspeed = 0;
                yspeed = 0;
                phase = 0;
            }
            break;
    }
    // Animation
    if (shootTimer &lt; 50)
        imgIndex += imgSpd;
    else if (shootTimer &gt;= 50)
        imgIndex -= imgSpd;
    
    if (shootTimer &gt;= 10)
    {
        if (imgIndex &gt;= 6)
        {
            imgIndex = 4;
        }
    }
    else if (imgIndex &gt;= 2)
    {
        imgIndex = imgIndex mod 2;
    }
}
else if (dead == true)
{
    phase = 0;
    oldPhase = 0;
    shootTimer = 0;
    actionTimer = 0;
    imgIndex = 0;
    xspeed = 0;
    yspeed = 0;
    sinCounter = 0;
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if (spawned)
{
    if (mdir == "h")
        facePlayer = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_index == 0 || image_index == 1)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
