<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMarsLandmine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// A landmine placed on the ground. When stepped on, it detonates after a certain amount of time.
event_inherited();
canHit = false;
imgIndex = 0;
imgSpd = 0.2;
isSolid = true;
itemDrop = -1;
timer = 0;
phase = 0;
bubbleTimer = -1;

objectDrop = objHarmfulExplosion; //explosion object
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // Inactive
        case 0:
            with (objMegaman)
            {
                if (place_meeting(x, y + gravDir, other.id))
                {
                    if (ground)
                    {
                        with (other)
                        {
                            imgIndex = 1;
                            
                            // mask_index = sprMarsLandmineMask;
                            phase = 1;
                            timer = choose(60, 120, 180);
                            
                            /* with (objMegaman)
                            {
                                y += 1;
                            }*/
                            playSFX(sfxCountBomb);
                        }
                    }
                }
            }
            break;
        // Triggered
        case 1:
            if (timer &gt; 60)
            {
                imgIndex += imgSpd;
            }
            else
            {
                imgIndex++;
            }
            if (imgIndex &gt;= 4)
            {
                imgIndex = 1;
            }
            timer--;
            if (timer == 0)
            {
                event_user(EV_DEATH);
                dead = true;
                instance_create(x + 8, y + 8, objectDrop); //( sprite_width/2,sprite_height/2,objHarmfulExplosion);
                playSFX(sfxMM9Explosion);
            }
            break;
    }
}
else if (dead)
{
    timer = 0;
    imgIndex = 0;
    phase = 0;
    
    // mask_index = sprMarsLandmine;
}
image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
