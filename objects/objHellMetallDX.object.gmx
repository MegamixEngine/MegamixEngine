<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHellMetallDX</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// A Metall on treads with a shield. Once the treads are destroyed, charged Mega Buster shots
// are needed to knock the shield back while it fires arcing shots.

event_inherited();

healthpointsStart = 3;
contactDamage = 8;

category = "mets, shielded";
facePlayerOnSpawn = true;
itemDrop = -1;

imgIndex = 0;
imgSpd = 0.1;
moveTimer = 120;
phase = 0;
switchSprites = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    moveTimer--;
    switch (phase)
    {
        case 0:
            if (moveTimer &lt;= 0)
            {
                imgIndex += imgSpd;
                
                if (imgIndex == 2)
                {
                    phase = 1;
                    moveTimer = 180;
                }
            }
            break;
        case 1:
            if (moveTimer &lt;= 0)
            {
                imgIndex -= imgSpd;
                
                if (imgIndex == 0)
                {
                    phase = 0;
                    moveTimer = 180;
                }
            }
            break;
    }
    
    // Movement - turn around when touching wall
    if (xcoll != 0)
    {
        image_xscale *= -1;
    }
    
    // Movement
    if (ground)
    {
        xspeed = 0.5 * image_xscale;
        
        // Turn when at edge
        if (!positionCollision(x + 14 * image_xscale, bbox_bottom + 2))
        {
            image_xscale *= -1;
        }
    }
    
    // Animation
    switchSprites--;
    
    if (switchSprites &lt; 0)
    {
        if (sprite_index == sprHellMetallDX)
        {
            sprite_index = sprHellMetallDXUp;
        }
        else
        {
            sprite_index = sprHellMetallDX;
        }
        
        switchSprites = 4;
    }
}
else if (dead)
{
    healthpoints = healthpointsStart;
    imgIndex = 0;
    imgSpd = 0.1;
    moveTimer = 120;
    sprite_index = sprHellMetallDX;
    phase = 0;
    switchSprites = 4;
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((image_index == 0) &amp;&amp; (collision_rectangle(x + 10 * image_xscale, y, x + 13 * image_xscale, y - 28, other.id, false, true)))
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var i = instance_create(x, y - 1, objHellMetallDX2);
i.yspeed = -2;

if (other.object_index == objBreakDash)
{
    with (objSlashEffect)
    {
        sprite_index = sprHellMetallDXTreads;
        if (other.sprite_index == sprHellMetallDX)
        {
            image_index = 0;
        }
        else
        {
            image_index = 1;
        }
    }
}
else if (other.object_index == objBusterShotCharged)
{
    with (other)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
