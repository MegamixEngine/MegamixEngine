<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFatKeyGate</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A thick key barier that needs three keys to open.
event_inherited();

contactDamage = 0;
canHit = false;

isSolid = 1;
grav = 0;
blockCollision = false;

beingKilled = false;
killTimer = 0;

respawnRange = -1;
despawnRange = -1;

norespawn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; visible)
{
    with (objMegaman)
    {
        if (global.keyNumber &gt;= 3)  //needs at least 3 keys
        {
            with (other)
            {
                if (!beingKilled)
                {
                    if (collision_rectangle(bbox_left - 3, bbox_top,
                        bbox_right + 3, bbox_bottom, other.id, false, true))
                    {
                        playSFX(sfxFatKeyDoor);
                        global.keyNumber -= 3;
                        beingKilled = true;
                        respawn = false;
                        if (norespawn)
                        {
                            with (objGlobalControl)
                            {
                                ds_list_add(pickups,
                                    string(room) + '/' + string(other.id));
                            }
                        }
                    }
                }
            }
        }
    }
    
    if (beingKilled)
    {
        killTimer += 1;
        if (killTimer mod 9 == 0)
            image_index += 1;
    }
    if (killTimer &gt;= 45)
    {
        instance_create(bboxGetXCenter(), bboxGetYCenter(), objBigExplosion);
        playSFX(getGenericSFX(SFX_EXPLOSION2));
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
