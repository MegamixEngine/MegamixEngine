<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKeyCoin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPickup</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///a key coin. if you collect enough of these, you get a key
//by default, you get one key for collecting all the key coins in each section
//this can be customized by placing a manager object in the section and configuring that
event_inherited();

//this shouldn't matter too much, since they're static
respawnRange = -1;
despawnRange = -1;

image_speed = 0.2;
grabable = 0;

respawnupondeath = true;

grav = 0;
blockCollision = 0;

controller = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a coin manager automatically, if needed
event_inherited();

if spawned &amp;&amp; (controller == noone) &amp;&amp; !instance_exists(objKeyCoinManager)
{
    print("Key coin automatically made a manager at " + string(x) + ", " + string(y));
    instance_create(x, y, objKeyCoinManager);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When collected...

//throw nonfatal error if controller somehow despawned
if !instance_exists(controller)
{
    printErr("Controller for coin is not spawned at (" + string(x) + ", " + string(y) + ")");
    playSFX(sfxError);
    playSFX(sfxKeyCoinNotGet);
    var c = instance_create(x, y, objKeyCoinDiscard);
    c.sprite_index = sprite_index;
    instance_destroy();
    exit;
}

//add a coin
controller.coinsObtained++;

//if there are awards left...
if controller.awardIndex &lt; array_length_1d(controller.coinKeyAwards)
{
    var guiAnimVal;
    //award a key if circumstances are right
    if (controller.coinsObtained &gt;= controller.coinKeyAwards[controller.awardIndex])
    {
        controller.awardIndex++;
        guiAnimVal = 10;
        if global.keyNumber &lt; 7
            global.keyNumber += 1;
        else
            instance_create(x, y, objKey);
        playSFX(sfxKeySpawn);
    }
    else
    {   //else, normal collection
        guiAnimVal = 4;
        playSFX(sfxBolt);
    }
    
    //set animation values based on display mode
    if controller.displayMode = 0
        controller.coinAnimTimer[controller.coinsObtained - 1] = guiAnimVal;
    else
        controller.coinAnimTimer = guiAnimVal;
    
    //die
    instance_create(bboxGetXCenter(), bboxGetYCenter(), objExplosion);
    instance_destroy();
    exit;
}
else
{   //if no awards are left, dink uselessly
    playSFX(sfxKeyCoinNotGet);
    var c = instance_create(x, y, objKeyCoinDiscard);
    c.sprite_index = sprite_index;
    instance_destroy();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
