<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMazeWarp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Note: don't place tiles of the same layer on top of eachother otherwise this may not be picked up by the maze

// creation code variables

//@cc set positions (top left corner of the new view)
camX = x;

//@cc set positions (top left corner of the new view)
camY = y;

//@cc tile layer chack ranges
// Note: don't make the gap between these too large or your room may take longer to load
tileCheckStart = 1000000;

//@cc tile layer chack ranges
// Note: don't make the gap between these too large or your room may take longer to load
tileCheckEnd = 1000000;

// distance to check between
tileDistanceCheck = 16;

// don't touch
init = true;
tileSurface = -1;

//These are no longer needed after moving the code to step begin
/*
for (var i = 0; i &lt; MAX_PLAYERS; i ++)
{
    preGround[i] = 0;
    preSliding[i] = 0;
    preClimbing[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(surface_exists(tileSurface)){
    mm_surface_free(tileSurface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (prtEntity)
{
    if (!global.frozen and frozen)
    {
        hspeed = pre_hsp;
        vspeed = pre_vsp;
        speed = pre_spe;
        image_speed = pre_isp;
        frozen = false;
    }
}

/*with (objMegaman)
{
    climbing = other.preClimb[playerID];
    isSlide = other.preSliding[playerID];
    ground = other.preGround[playerID];
    
    if (climbing)
    {
        climbLock = lockPoolLock(localPlayerLock[PL_LOCK_MOVE],
            localPlayerLock[PL_LOCK_SLIDE],
            localPlayerLock[PL_LOCK_GRAVITY],
            localPlayerLock[PL_LOCK_TURN]);
        ground = false;
        yspeed = 0;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init)
{
    depth = min(tileCheckStart, tileCheckEnd);
    init = false;
}

// 8-pixel leeway here to prevent some jankiness
if (collision_rectangle(x + 8, y + 8, x + view_wview[0] - 8, y + view_hview[0] - 8, objMegaman, 0, 0)
    &amp;&amp; !instance_exists(objSectionSwitcher) &amp;&amp; insideView() &amp;&amp; !global.frozen)
{
    var moveX = camX - view_xview[0];
    var moveY = camY - view_yview[0];
    with (objMegaman)
    {
        //other.preClimb[playerID] = climbing;
        //other.preSliding[playerID] = isSlide;
        //other.preGround[playerID] = ground;
        
        x += moveX;//other.camX - view_xview[0];
        y += moveY;//other.camY - view_yview[0];
        
        setSection(x, y, 1);
        playerCamera(1);
        reAndDeactivateObjects(1, 1);
        
        //checkGround();
        
        /*climbing = other.preClimb[playerID];
        isSlide = other.preSliding[playerID];
        ground = other.preGround[playerID];
        
        if (climbing)
        {
            climbLock = lockPoolLock(localPlayerLock[PL_LOCK_MOVE],
                localPlayerLock[PL_LOCK_SLIDE],
                localPlayerLock[PL_LOCK_GRAVITY],
                localPlayerLock[PL_LOCK_TURN]);
            ground = false;
            yspeed = 0;
        }*/
        
        if (instance_exists(vehicle))
        {
            // NOTE FROM PMB: Fixing a crash with bringing a vehicle into a maze warp. 
            /*with (vehicle)
            {*/
                vehicle.x += moveX;//other.camX - view_xview[0];
                vehicle.y += moveY;//other.camY - view_yview[0];
            //}
        }
    }
    
    if (instance_exists(objWaterShield))
    {
        with (objWaterShield)
        {
            x += moveX;//other.camX - view_xview[0];
            y += moveY;//other.camY - view_yview[0];
        }
    }
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(surface_exists(tileSurface)){
    mm_surface_free(tileSurface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Grab all tiles on the screen you're teleporting to
if (!surface_exists(tileSurface))
{
    tileSurface = mm_surface_create(view_wview, view_hview);
    surface_set_target(tileSurface);
    draw_clear_alpha(c_black, 0);
    
    for (layer = min(tileCheckStart, tileCheckEnd); layer &lt;= max(tileCheckStart, tileCheckEnd); layer++)
    {
        for (i = 0; i &lt;= round(view_wview); i += tileDistanceCheck)
            for (j = 0; j &lt;= round(view_hview); j += tileDistanceCheck)
            {
                var tile = tile_layer_find(layer, camX + i, camY + j);
                if (tile_exists(tile))
                {
                    draw_background_part(tile_get_background(tile),
                        tile_get_left(tile), tile_get_top(tile), tile_get_width(tile), tile_get_height(tile),
                        tile_get_x(tile) - camX, tile_get_y(tile) - camY);
                }
            }
    }
    
    surface_reset_target();
} // now once everything is grabbed, draw it
else
{
    draw_surface(tileSurface, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
