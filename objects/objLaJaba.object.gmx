<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprLaJaba</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// An accordion that lurches toward the player by hopping, usually small hops but sometimes a big hop, occasionally pausing to taunt.
/// Its movement pattern feels more unpredictable than it actually is, thanks in part to the wiggly way its sprite is animated.
/// If you want to distract or disorient players in a challenge that requires focus, this is a good enemy to be the center of attention.

event_inherited();

respawn = true;
facePlayerOnSpawn = true;

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 4;
category = "semi bulky";

//facePlayerOnSpawn = true;
phase = 0;

// @cc - use this to change how fast La Jaba's horizontal movement is.
moveSpeed = 1;

// @cc - use this to set how high La Jaba jumps.
jumpSpeed = -3;

image_index = 2;
imgSpd = 0.1;
moveTimer = 0;
tauntCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (image_index &lt; 2)
    {
        mask_index = sprLaJabaSmallMask;
    }
    else
    {
        mask_index = sprLaJaba;
    }

    switch (phase)
    {
        // Do Small Jump
        case 0:
            moveTimer--;
            if ((moveTimer &lt;= 0) &amp;&amp; (ground))
            {
                image_index += imgSpd;
                if (image_index &gt;= 4)
                {
                    image_index = 2;
                    phase = 1;
                    yspeed = jumpSpeed;
                    xspeed = moveSpeed * image_xscale;
                    moveTimer = 4;
                }
            }
            else
            {
                image_index += imgSpd;
                if (image_index &gt;= 2)
                {
                    image_index = 0;
                }
            }
            
            calibrateDirection();
            break;
        // Small Jump - Air
        case 1:
            if (yspeed &lt; 0)
            {
                image_index = 4;
            }
            else if (yspeed &gt; 0)
            {
                image_index = 5;
            }
            else
            {
                image_index = 3;
            }
            if (ground)
            {
                // Do large jump
                if (instance_exists(target))
                {
                    if ((x &lt; target.x + 32) &amp;&amp; (image_xscale == -1)
                        || (x &gt; target.x - 32) &amp;&amp; (image_xscale == 1))
                    {
                        image_index = 1;
                        xspeed = 0;
                        yspeed = 0;
                        phase = 2;
                        moveTimer = 10;
                        calibrateDirection();
                    } // Do small jump
                    else
                    {
                        xspeed = 0;
                        yspeed = 0;
                        image_index = 2;
                        moveTimer--;
                        if (moveTimer == 0)
                        {
                            phase = 0;
                        }
                    }
                }
                else // So we're not static if player is dead/hasn't spawned
                {
                    xspeed = 0;
                    yspeed = 0;
                    image_index = 2;
                    moveTimer--;
                    if (moveTimer == 0)
                    {
                        phase = 0;
                    }
                }
            }
            break;
        // Do Large Jump
        case 2:
            moveTimer--;
            if (moveTimer &lt;= 0)
            {
                image_index += imgSpd;
                if (image_index &gt;= 3)
                {
                    image_index = 1;
                    phase = 3;
                    yspeed = jumpSpeed - 1;
                    xspeed = moveSpeed * image_xscale;
                }
            }
            break;
        // Large Jump - Air
        case 3:
            if (yspeed &lt; 0)
            {
                image_index = 4;
            }
            else if (yspeed &gt; 0)
            {
                image_index = 2;
            }
            else
            {
                image_index = 3;
            }
            if (ground)
            {
                image_index = 0;
                xspeed = 0;
                yspeed = 0;
                phase = 4;
            }
            break;
        case 4:
            if (tauntCount &lt; 2)
            {
                // image_index = 2;
                image_index += imgSpd;
                if (image_index == 1)
                {
                    image_index = 2;
                }
                if (image_index &gt;= 3)
                {
                    image_index = 0;
                    tauntCount += 1;
                }
            }
            else
            {
                moveTimer = 60;
                tauntCount = 0;
                phase = 0;
                calibrateDirection();
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    moveTimer = 0;
    image_index = 2;
    phase = 0;
    tauntCount = 0;
    xspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
