<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTricastle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>17</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A big casttle composed of three eyes, the central eye has 12hp, and the other two 7hp.
// he will open his gate to throw platforms that the player must use to damage the higher eyes.
// His high eyes control cannons that aim at the player.
event_inherited();

// Entity setup
canHit = false;
canDamage = false;

// The castle is just the brain, these numbers mean nothing
contactDamage = 9999;
healthpointsStart = 9999;
healthpoints = 9999;

respawnRange = 0;
despawnRange = 0;
blockCollision = false;
grav = 0;
doesIntro = false;
noFlicker = true;
explosionSFX = sfxMM9Explosion;
rescursiveExplosion = false;
doExplosion = false;

// Enemy specific code
leftTower = noone;
rightTower = noone;
center = noone;
shooter = noone;
flagYO = 0;
flagImage = 0;
drawDoor = true;
drawFlag = false;

// AI
phase = 0;
timer = -1;
masterTimer = -1;
platHeight = 0;
startTime = 0;

animFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (phase == 0) // alive
    {
        /*if (masterTimer == -1)
        {
            event_user(0);
            masterTimer = startTime;
            center.anim = 0;
            center.timer = 0;
            center.phase = 0;
        }*/
        masterTimer += 1;
        
        if (masterTimer &gt; 60 * 9)
        {
            masterTimer = 0;
            shooter = noone;
        }
        else
        {
            if (masterTimer == 60 * 5 - 10 || masterTimer == 60 * 8 - 10) // Shoot
            {
                if (shooter == noone &amp;&amp; instance_exists(leftTower) &amp;&amp; instance_exists(rightTower)) // Shooting
                    shooter = choose(leftTower, rightTower);
                else if (!instance_exists(leftTower) || !instance_exists(rightTower))
                {
                    if (instance_exists(leftTower))
                        shooter = leftTower;
                    else
                        shooter = rightTower;
                }
                else if (shooter != noone)
                {
                    if (shooter == leftTower)
                        shooter = rightTower;
                    else
                        shooter = leftTower;
                }
                with (shooter)
                {
                    event_user(0);
                }
            }
            else if ((instance_exists(center) &amp;&amp; masterTimer == 120) || (!instance_exists(center) &amp;&amp; (masterTimer == 120 || masterTimer == 360))) // throw platforms
            {
                timer = -2;
            }
            
            // Door animations
            if (instance_exists(center))
            {
                var prevAnimFrame = floor(animFrame);
                if (masterTimer &gt; 10 &amp;&amp; masterTimer &lt; 40)
                {
                    center.image_index = 8;
                }
                else if (masterTimer &gt; 10)
                {
                    if (center.image_index == 8)
                    {
                        center.phase = 0;
                        center.timer = -1;
                    }
                }
                if (masterTimer &gt; 60 &amp;&amp; masterTimer &lt;= 60 * 3.5)
                {
                    animFrame += 0.15;
                    if ((floor(animFrame) &gt; 4) &amp;&amp; !drawDoor) || ((floor(animFrame) &gt;= 5) &amp;&amp; drawDoor)
                    {
                        animFrame = 4;
                        drawDoor = false;
                    }
                }
                else if (masterTimer &gt; 60 * 3.5 &amp;&amp; animFrame != 0)
                {
                    drawDoor = true;
                    animFrame += 0.15;
                    if (floor(animFrame) &gt; 7)
                    {
                        animFrame = 0;
                    }
                }
                if (floor(animFrame) != floor(prevAnimFrame))
                    playSFX(sfxDoorClassic);
            }
        }
    }
    
    if (phase == 0 &amp;&amp; !instance_exists(leftTower) &amp;&amp; !instance_exists(rightTower) &amp;&amp; !instance_exists(center)) // Die
    {
        phase = 1;
        timer = -1;
        flagYO = 0;
        if (instance_exists(objTricastlePlatform))
        {
            with (objTricastlePlatform)
            {
                instance_create(bboxGetXCenter(),bboxGetYCenter(),objBigExplosion);
                instance_destroy();
            }
        }
    }
    
    if (phase == 0)
    {
        if (timer &gt; -1)
        {
            timer += 1;
        }
        if (timer &gt; 60){
            timer = -1;
        }
        if (timer == -2) // Start throwing platforms
        {
            platHeight = choose(0, 1);
            timer = 0;
        }
        var p = noone;
        if (timer == 1)
        {
            if (platHeight == 0)
            {
                p = instance_create(x + 64, bbox_bottom, objTricastlePlatform);
                p.spd = 2;
            }
            else
            {
                p = instance_create(x + 64, bbox_bottom - 16, objTricastlePlatform);
                p.spd = 2.25;
            }
        }
        else if (timer == 36)
        {
            if (!platHeight == 0)
            {
                p = instance_create(x + 64, bbox_bottom, objTricastlePlatform);
                p.spd = 2;
            }
            else
            {
                var p = instance_create(x + 64, bbox_bottom - 16, objTricastlePlatform);
                p.spd = 2.25;
            }
        }
        if (p != noone)
        {
            p.target = self.target;
            with (p)
                calibrateDirection();
        }
    }
    else if (phase == 1) /// Raise flag
    {
        if (timer == -1)
        {
            timer = 0;
            flagImage = 0;
        }
        timer += 1;
        if (timer &gt;= 60)
        {
            drawFlag = true;
            flagImage += 0.1;
            if (flagImage &gt; 3)
                flagImage = 0;
            flagYO -= 1;
            if (flagYO &lt; -16)
                flagYO = -16;
        }
        if (timer &gt; 180) //120)
        {
            phase = 2;
            /*healthpoints = 0;
            dead = true;
            image_speed = 0.05;
            hitTimer = 0;
            event_user(EV_DEATH);
            print("Dead ");*/
            timer = 0; //-1;
            image_index = 1;
        }
    }
    else if (phase == 2) // Dying
    {
        event_user(1);
    }
}
/*else if (!insideView) //(dead)
{
    leftTower = noone;
    rightTower = noone;
    center = noone;
    shooter = noone;
    /*if (deadTimer != 0 &amp;&amp; phase == 2)
    {
        deadTimer -= 0.5;
    }
    masterTimer = -1;
    if (phase == 2)
    {
        visible = true;
        flagImage += 0.1;
        if (flagImage &gt; 3)
            flagImage = 0;
    }
    if (image_index == 6)
        image_speed = 0;
    if (phase != 2 &amp;&amp; phase != 1)
    {
        phase = 0;
        timer = -1;
        image_index = 0;
        image_speed = 0;
        visible = false;
        masterTimer = -1;
        event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    event_user(0);
    masterTimer = startTime;
    center.anim = 0;
    center.timer = 0;
    center.phase = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Crumble
timer++;
flagImage += 0.1; // Animate flag
if (flagImage &gt; 3)
    flagImage = 0;
switch (timer)
{
    case 10:
        instance_create(x + 76, y + 51, objBigExplosion);
        playSFX(explosionSFX);
        screenShake(230, 1, 1);
        break;
    case 25:
        instance_create(x + 24, y + 12, objBigExplosion);
        playSFX(explosionSFX);
        break;
    case 40:
        instance_create(x + 104, y + 12, objBigExplosion);
        playSFX(explosionSFX);
        break;
    case 55:
        instance_create(x + 24, y + 76, objBigExplosion);
        playSFX(explosionSFX);
        break;
    case 70:
        instance_create(x + 104, y + 76, objBigExplosion);
        playSFX(explosionSFX);
        break;
    case 85:
        playSFX(sfxStrikeManSoccerBall);
        break;
}
if (timer &gt;= 90) &amp;&amp; (timer &lt; 240)
{
    if (timer mod 10 == 0) &amp;&amp; (drawFlag)
        with(instance_create(irandom_range(bbox_left,bbox_right),bbox_bottom,objExplosion))
            sprite_index = sprCrashExplosion;
    if (timer mod 20 == 0)
    {
        if (image_index != 6)
            image_index++;
        else if (drawFlag)
            drawFlag = false;
    }
}
if (timer == 240)
{
    healthpoints = 0;
    dead = true;
    hitTimer = 0;
    //event_user(EV_DEATH);
    killed = true;
    print("Dead");
    timer = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make eyes
if (!instance_exists(center))
{
    center = instance_create(x + 76, y + 51, objTricastleEye);
    center.owner = id;
    center.healthpoints = 12;
    center.healthpointsStart = 12;
    center.explosionSFX = explosionSFX;
}
if (!instance_exists(leftTower))
{
    leftTower = instance_create(x + 28, y + 19, objTricastleEye);
    leftTower.owner = id;
    leftTower.hasCannon = true;
    leftTower.healthpoints = 7;
    leftTower.healthpointsStart = 7;
    leftTower.explosionSFX = explosionSFX;
}
if (!instance_exists(rightTower))
{
    rightTower = instance_create(x + 124, y + 19, objTricastleEye);
    rightTower.owner = id;
    rightTower.hasCannon = true;
    rightTower.healthpoints = 7;
    rightTower.healthpointsStart = 7;
    rightTower.explosionSFX = explosionSFX;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 1 || phase == 2)
{
    var yo = 27;
    switch (image_index)
    {
        case 0:
            yo = 27;
            break;
        case 1:
            yo = 27; //43;
            break;
        case 2:
            yo = 43; //59;
            break;
        case 3:
            yo = 59; //75;
            break;
        case 4:
            yo = 75; //91;
            break;
        case 5:
            yo = 91; //103;
            break;
        case 6:
            yo = 103;
            break;
        default:
            yo = 10000;
            break;
    }
    if (drawFlag)
        draw_sprite(sprTricastleFlag, floor(flagImage), bbox_left + (abs(bbox_left - bbox_right) / 2), flagYO + bbox_top + yo);
}
drawSelf();
if (phase == 0)
{
    if (instance_exists(center)) &amp;&amp; (drawDoor)
    {
        draw_sprite(sprTricastleDoor, floor(animFrame), x + 45, bbox_top + 69);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
