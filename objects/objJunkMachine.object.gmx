<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJunkMachine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

shiftVisible = 0;
respawnRange = -1;
despawnRange = -1;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

phase = 0; // 0 = not powered up; 1 = powering up

// 2 = powered up and working; 3 = powering down

timer = 0;
imageCountDir = 1;
elecDirec = 1;

myFlag = 0;

// What activates the machine:
powerSource[1] = objThunderBeam;
powerSource[2] = objThunderWool;
powerSource[3] = objSparkShock;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!dead &amp;&amp; !global.frozen &amp;&amp; !global.timeStopped)
{
    var hasSwitch = false;
    if (!is_undefined(global.flagParent[myFlag]) &amp;&amp; instance_exists(global.flagParent[myFlag]))
    {
        hasSwitch = true;
    }
    
    // Inactive.
    if (phase == 0)
    {
        image_index = 0;
        for (var i = 0; i &lt; array_length_1d(powerSource); i += 1)
        {
            if (place_meeting(x, y, powerSource[i]))
            {
                elecDirec = instance_place(x, y, powerSource[i]).image_xscale;
                playSFX(sfxElectricShot);
                phase = 1;
            }
        }
    }
    
    // Activating.
    if (phase == 1)
    {
        timer += 1;
        if (timer mod 3 == 0)
        {
            image_index += 1;
            if (image_index &gt;= 3)
            {
                image_index = 1;
            }
        }
        if (timer &gt;= 60)
        {
            phase = 2;
            timer = -1;
            image_index = 3;
            if (hasSwitch)
            {
                global.flagParent[myFlag].active = true;
                global.flag[myFlag] = 1;
                global.flagParent[myFlag].elecDirec = sign(elecDirec);
                global.flagParent[myFlag].stayActive = 0;
            }
        }
    }
    
    // Currently activated.
    if (phase == 2)
    {
        // In case another junk machine sharing the flag gets deactivated.
        if (hasSwitch &amp;&amp; global.flagParent[myFlag].active == false)
        {
            global.flagParent[myFlag].active = true;
            global.flag[myFlag] = 1;
        }
        timer += 1;
        if (timer &gt;= 5)
        {
            image_index += imageCountDir;
            if (image_index &lt;= 3 || image_index &gt;= 5)
            {
                imageCountDir = -imageCountDir;
            }
            timer = 0;
        }
        
        for (i = 0; i &lt; array_length_1d(powerSource); i += 1)
        {
            if (place_meeting(x, y, powerSource[i]))
            {
                playSFX(sfxElectricShot);
                image_index = 0;
                phase = 3;
            }
        }
    }
    
    // Deactivating.
    if (phase == 3)
    {
        timer += 1;
        if (timer mod 3 == 0)
        {
            image_index += 1;
            if (image_index &gt;= 3)
            {
                image_index = 1;
            }
        }
        if (timer &gt;= 60)
        {
            phase = 0;
            timer = 0;
            image_index = 0;
            imageCountDir = 1;
            if (hasSwitch)
            {
                global.flagParent[myFlag].active = false;
                global.flag[myFlag] = 0;
            }
        }
    }
}
else if (dead)
{
    phase = 0;
    timer = 0;
    image_index = 0;
    imageCountDir = 1;
    if (!is_undefined(global.flagParent[myFlag]) &amp;&amp; instance_exists(global.flagParent[myFlag]))
    {
        global.flagParent[myFlag].active = false;
        global.flag[myFlag] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
