<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCWU01PShot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "flying";

itemDrop = noone;

blockCollision = 0;
inWater = -1;
grav = 0;
timer = 0;
repeatTimes = 0;
respawn = false;
invertSpd = 0;

init = true;
canIce = false;
stopOnFlash = false;

//cc
velocityIncrease = 3;
myDistance = 0;
maxDistance = 0;
rotationSpeed = 3;
spd = 2;
type = 0;
angle = 0;
anglediff = 0;
dir = 0;
spin = false;
homing = false; //The capsule attack that no one likes.
returner = false; //Targets the player. Returns to sender (if its stationary at least) after slowing down.
seeker = false; //If returner is true, then it actively seeks the player until it
                //has slowed down to a stop when it will start speeding up again.
                //Useless otherwise.

//prtEnemyProjectile
reflectable = 1;

// aim
distance = 0;
velocity = 2;

col = 0;
if (instance_exists(objCWU01P))
    col = objCWU01P.col;//always created by it, so should always have an object to grab from.

canHit = false;

bubbleTimer = -1;//Not for our bubble, the breathing bubble.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    respawn = false;
    //if (instance_exists(target))
    //{
        if (init)
        {
            if (instance_exists(target))
            {
                if (!(type == 2))
                {
                    aimAtTarget(spd);
                }
                if (type == 4)
                {
                    spd = 4;
                    angle = point_direction(spriteGetXCenter(), spriteGetYCenter(), target.x, target.y);
                    xspeed = cos(degtorad(angle + anglediff)) * spd;
                    yspeed = -sin(degtorad(angle + anglediff)) * spd;
                }
                init = false;
            }
            else
            {
                angle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                    view_xview+(view_wview/2), view_yview+(view_hview/2));
                
                xspeed = cos(degtorad(angle)) * spd;
                yspeed = -sin(degtorad(angle)) * spd;
            }
        }

        //Adjust direction if zero
        /*if (dir == 0) {{ if x &gt;= target.x { dir = 1; } else { dir = -1; }}}
        
        //type: 0 = Normal; 1 = Returner; 2 = Seeker (Returner); 3 = Spin; 4 = Homing
        
        if ((type == 1) || (type == 2))
        {
            if (type == 2)
            {
                if ((spd &gt; 2) &amp;&amp; (invertSpd == 0))
                {
                    angle = point_direction(spriteGetXCenter(), spriteGetYCenter(), target.x, target.y) + (j * 30);
                }
                
                if (spd &lt;= 0)
                {
                    invertSpd = 1;
                }
                
                if (invertSpd == 1)
                {
                    spd += 0.075;
                }
            }
            if (invertSpd == 0)
            {
                spd -= 0.075;
            }
            xspeed = cos(degtorad(angle)) * spd;
            yspeed = -sin(degtorad(angle)) * spd;
        }
        
        if (type == 3)
        {
            angle += rotationSpeed;
            
            x += (lengthdir_x(distance, angle) * image_xscale * dir) / 90;
            y += (lengthdir_y(distance, angle) * image_yscale) / 90;
            
            velocity += velocityIncrease;
            distance = myDistance + velocity;
            
            if (angle &gt;= 360)
            {
                angle -= 360;
            }
            
            if (maxDistance &gt; 0)
            {
                if (distance &gt;= maxDistance)
                {
                    distance = maxDistance;
                }
            }
        }
        
        if (type == 4)
        {
            timer ++;
            if (repeatTimes &lt; 3)
            {
                if (timer == 20)
                {
                    xspeed = 0;
                    yspeed = 0;
                }
                else if (timer == 40)
                {
                    if !sound_isplaying(sfxSolarBlazePopSmall)
                    {
                        playSFX(sfxSolarBlazePopSmall);
                    }
                    angle = point_direction(spriteGetXCenter(), spriteGetYCenter(), target.x, target.y);
                    if (repeatTimes == 2)
                    {
                        spd = 4;
                    }
                    else if (repeatTimes &lt; 2)
                    {
                        spd = 3;
                    }
                    xspeed = cos(degtorad(angle)) * spd;
                    yspeed = -sin(degtorad(angle)) * spd;
                    timer = 0;
                    repeatTimes ++;
                }
            }
        }*/
        
        if /*instance_exists(objCWU01PBubble) &amp;&amp;*/ (instance_exists(objCWU01P))
        {
            col = objCWU01P.col;
        }
        /*else
        {
            instance_create(x,y,objExplosion);
            instance_destroy();
        }*/
    /*}
    else
    {
        instance_create(x,y,objExplosion);
        instance_destroy();
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDefaultSpawn">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.chip = CHIP_PSYCHO)
{
    with (other)
    {
        event_perform(ev_collision,prtEnemyProjectile);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var palettes = makeArray(39,34,42,36,38,23,21);
var palette = palettes[col];

//Now to make up for how the nes palette here is a pain with maths.
if (palette &gt; 12)
{
    palette -= 3;//Skip 3 black on this row.
}
if (palette &gt; 25)
{
    palette -= 3;//Skip 3 black on this row.
}
if (palette &gt; 39)
{
    palette -= 3;//Skip 2 black on this row.
}
draw_sprite_ext(sprite_index,0,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
draw_sprite_ext(sprite_index,1,x,y,image_xscale,image_yscale,image_angle,global.nesPalette[global.nesOldIndexToNew[palette]],image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
