<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSubmarineFlier</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 5;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "aquatic, flying";

grav = 0;
blockCollision = true;

facePlayerOnSpawn = true;

// Enemy specific code
phase = 0;
timer = 0;

waterY = 0;
sinCounter = 0;

imgSpd = 0.2;
imgIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        // slower flying in a sine pattern
        case 0:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 4)
            {
                imgIndex = imgIndex mod 4;
            }
            xspeed = 0.4 * image_xscale;
            sinCounter += 0.03;
            yspeed = -(cos(sinCounter) * 0.5);
            var reveal = false;
            if (healthpoints &lt;= healthpointsStart - 2)
            {
                reveal = true;
            }
            if (!reveal &amp;&amp; instance_exists(target))
            {
                if (target.bbox_left &lt; bbox_right
                    &amp;&amp; target.bbox_right &gt; bbox_left)
                {
                    reveal = true;
                    healthpoints = healthpointsStart - 2;
                }
            }
            if (!reveal &amp;&amp; xcoll != 0 || place_meeting(x, y, objWater))
                reveal = true;
            if (reveal)
            {
                phase = 1;
                xspeed = 0;
                imgIndex = 4;
                grav = gravAccel;
            }
            break;
        
        // shedding cloud animation and falling down to water
        case 1:
            if (imgIndex &lt; 5)
            {
                imgIndex += imgSpd;
            }
            if (waterY == 0)
            {
                var water = instance_place(x, y + yspeed, objWater);
                if (instance_exists(water))
                {
                    waterY = water.y - 2;
                }
            }
            else if (y &gt;= waterY)
            {
                phase = 2;
                yspeed = 0;
                if (!place_meeting(x, y - 16, objWater))
                    y = waterY;
                imgIndex = 5;
                grav = 0;
            }
            break;
        
        // pause for a bit after falling into the water
        case 2:
            timer += 1;
            if (timer &gt;= 60) // &lt;-- pause time here
            {
                phase = 3;
                timer = 0;
                blockCollision = true;
            }
            break;
        
        // move around, shooting projectiles
        case 3:
            imgIndex += imgSpd;
            if (imgIndex &gt;= 9)
            {
                imgIndex = 7;
            }
            if (instance_exists(target))
            {
                // turn around
                if (bbox_left &gt; target.bbox_right)
                {
                    image_xscale = -1;
                }
                
                if (bbox_right &lt; target.bbox_left)
                {
                    image_xscale = 1;
                }
                
                // shoot
                timer += 1;
                if (timer &gt;= 65) // &lt;-- shot wait time here
                {
                    var bullet = instance_create(x, y - 12, objEnemyBullet);
                    with (bullet)
                    {
                        yspeed = -2.7;
                        grav = 0.15;
                        
                        if (instance_exists(target))
                        {
                            xspeed = xSpeedAim(x, y, target.x, target.y, yspeed, grav);
                            
                            // aim where the player is going to be
                            xspeed += target.xspeed;
                        }
                    }
                    
                    timer = 0;
                }
            }
            xspeed = 1 * image_xscale;
            break;
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (spawned)
{
    phase = 0;
    timer = 0;
    inWater = false;
    grav = 0;
    xspeed = 0;
    yspeed = 0;
    sinCounter = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
