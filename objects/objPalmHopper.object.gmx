<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPalmHopper</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A grasshopper that takes a big leap toward the player, fires four missiles horizontally, and repeats.
/// After every missile, it will turn to face the player again if the player has moved. Its missiles can be destroyed.
/// Suitable for a variety of challenges, especially ones that take advantage of its hopping and turning.

event_inherited();

facePlayerOnSpawn = true;

healthpointsStart = 4;
healthpoints = healthpointsStart;

contactDamage = 3;

// Enemy specific code
imgSpd = 0.16;
phase = 0;
canShoot = false;
radius = 4 * 16;
shotsLeft = 4;
jumps = 2;
animTimer = 8;
xspeed = 0;
yspeed = 0;
jumpTimer = 40;
shootTimer = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    switch (phase)
    {
        case 0: // Jump/Shoot 
            if (ground)
            {
                if (canShoot == false)
                {
                    jumpTimer -= 1;
                    if (jumpTimer &lt;= 0)
                    {
                        calibrateDirection();
                        image_index += imgSpd;
                        if (image_index &gt;= 3)
                        {
                            y -= 4;
                            yspeed = -4.5;
                            jumps--;
                            phase = 1;
                        }
                    }
                }
                
                // Shoot
                if (canShoot)
                {
                    shootTimer--;
                    if (shootTimer == 5)
                    {
                        image_index = 4;
                        calibrateDirection();
                    }
                    
                    if (shootTimer == 0)
                    {
                        i = instance_create(x + 8 * image_xscale, y, objPalmHopperMissile);
                        playSFX(sfxMissileLaunch);
                        i.xspeed = 2 * image_xscale;
                        i.image_xscale = image_xscale;
                        shotsLeft--;
                        image_index = 5;
                    }
                    if (shootTimer == -5)
                    {
                        image_index = 0;
                        if (shotsLeft &gt; 0)
                            shootTimer = 60;
                        else
                            canShoot = false;
                    }
                }
            }
            break;
        case 1: // Jumping 
            xspeed = image_xscale * 2;
            if (yspeed &gt; 0) &amp;&amp; (!ground)
                image_index = 0;
            
            // Landing
            if (ground)
            {
                xspeed = 0;
                image_index = 1;
                animTimer--;
                
                if (animTimer &lt;= 0)
                {
                    image_index = 0;
                    if (instance_exists(target))
                    {
                        if ((distance_to_object(target) &lt;= radius) || (jumps == 0))
                        {
                            canShoot = true;
                            shotsLeft = 4;
                            shootTimer = 60;
                        }
                    }
                    jumpTimer = 40;
                    phase = 0;
                    animTimer = 8;
                }
            }
            break;
    }
}
else if (dead)
{
    phase = 0;
    jumpTimer = 40;
    shootTimer = 60;
    jumps = 2;
    shotsLeft = 4;
    canShoot = false;
    xspeed = 0;
    yspeed = 0;
    image_index = 0;
    animTimer = 8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
