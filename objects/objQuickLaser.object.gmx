<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprQuickLaserDrain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

respawn = false;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

canHit = false;

image_speed = 0.25;

despawnRange = -1;

contactDamage = 28;
faction = 4;

variation = 0;
mySpeed = 5;
drainCooldown = 4;

solidList = ds_list_create();
lastXScale = image_xscale;
pauseStep = false;
pauseEndStep = true;

// NOTE -- some of these may be able to be removed from instance vars and made local vars in step.
step = 8;
horM = 0;
verM = 0;
x1 = 0;
x2 = 0;
y1 = 0;
y2 = 0;
cx = 0;
cy = 0;
b = 0;

myPixel = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(solidList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* this is to prevent a fatal internal game maker studio error that can occur when the
image angle is set to certain diagonal up angles */
if (pauseEndStep)
{
    pauseEndStep = false;
    exit;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xspeed = 0;
yspeed = 0;
speed = 0;

/* notes:
    - Angles are done by objQuickLaserSpawner setting this object's image_angle. And damage collision with rotation is done with Game Maker
        precise collision checking.
    - I'm multiplying and diving image_xscale by sprite_get_width(sprite_index) to convert image_xscale to and from distance in pixels
    - The polar coordinates and cartesian coordinates of GMS are misaligned from each other, so you have to multiply -1 to your x / y stuff to make it work
    - Also get ready for a bunch of trig and algebra
*/

event_inherited();

if (entityCanStep())
{
    // cut down on processing by not doing the step when offscreen and stuck on the same block
    if (bbox_right &gt;= view_xview[0] &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; bbox_bottom &gt;= view_yview[0] &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0])
    {
        // if in view again, unpause the step code
        pauseStep = false;
    }
    
    if (pauseStep)
    {
        exit;
    }
    
    // travel
    image_xscale = image_xscale + (mySpeed / sprite_get_width(sprite_index));
    
    step = 8; // increasing by this amount as to cut down on processing
    
    if (myPixel != -1)
    {
        // only 1 pixel tall, so just detect the one line
        step = sprite_get_height(sprite_index) + 1;
    }
    
    for (var i = 0; i &lt;= sprite_get_height(sprite_index); i += step)
    {
        // get line coordinates
        x1 = x + i * cos(degtorad(image_angle - 90)); // go down the height of the laser (subtracts because the way angle increases is misaligned with the coordinate plane in game maker (increasing swings negative first))
        y1 = y - i * sin(degtorad(image_angle - 90)); // go down the height of the laser
        x2 = x1 + (image_xscale * sprite_get_width(sprite_index)) * cos(degtorad(image_angle)); // go down the length of the laser
        y2 = y1 - (image_xscale * sprite_get_width(sprite_index)) * sin(degtorad(image_angle)); // go down the length of the laser (subtracts because the way angle increases is misaligned with the coordinate plane in game maker (increasing swings negative first))
        
        // do collision check
        horM = (y2 - y1) / (x2 - x1); // slope of the collision line when solving for y
        verM = 1 / horM; // slope of the collision line when solving for x
        
        cx = noone;
        cy = noone;
        
        // section borders
        if (x2 &lt; global.sectionLeft)
        {
            cx = global.sectionLeft;
        }
        
        if (x2 &gt; global.sectionRight)
        {
            cx = global.sectionRight;
        }
        
        if (cx != noone)
        {
            // find the y position of the line at the given x position (bbox), and see if it's the shortest so far
            b = y1 - horM * x1; // y - mx = b
            cy = horM * cx + b; // y = mx + b
            
            if (cy &gt; global.sectionTop &amp;&amp; cy &lt; global.sectionBottom)
            {
                var newDist = point_distance(x1, y1, cx, cy);
                if (newDist / sprite_get_width(sprite_index) &lt; image_xscale)
                {
                    image_xscale = newDist / sprite_get_width(sprite_index);
                }
            }
        }
        
        if (y2 &lt; global.sectionTop)
        {
            cy = global.sectionTop;
        }
        
        if (y2 &gt; global.sectionBottom)
        {
            cy = global.sectionBottom;
        }
        
        if (cy != noone)
        {
            // find the x position of the line at the given x position (bbox), and see if it's the shortest so far
            verM = (x2 - x1) / (y2 - y1); // slope of the line
            b = x1 - verM * y1; // x - my = b
            cx = verM * cy + b; // x = my + b
            
            if (cx &gt; global.sectionLeft &amp;&amp; cx &lt; global.sectionRight)
            {
                newDist = point_distance(x1, y1, cx, cy);
                if (newDist / sprite_get_width(sprite_index) &lt; image_xscale)
                {
                    image_xscale = newDist / sprite_get_width(sprite_index);
                }
            }
        }
        
        // get list of all collided objects
        if (instance_exists(objSolid))
        {
            with (objSolid)
            {
                var c = collision_line(other.x1, other.y1, other.x2, other.y2, id, false, false);
                if (c != noone)
                {
                    ds_list_add(other.solidList, c);
                }
            }
        }
        
        if (instance_exists(objTopSolid))
        {
            with (objTopSolid)
            {
                var c = collision_line(other.x1, other.y1, other.x2, other.y2, id, false, false);
                if (c != noone)
                {
                    ds_list_add(other.solidList, c);
                }
            }
        }
        
        if (instance_exists(prtEntity))
        {
            with (prtEntity)
            {
                if (id != other.id &amp;&amp; !dead)
                {
                    var c = collision_line(other.x1, other.y1, other.x2, other.y2, id, false, false);
                    if (c != noone &amp;&amp; isSolid != 0) // only collide if this entity is solid
                    {
                        // don't do collisions with the spawner of this laser, or else we can get unwanted collisions
                        if (object_index != objQuickLaserSpawner)
                        {
                            ds_list_add(other.solidList, c);
                        }
                        else
                        {
                            if (ds_list_find_index(myLasers, other) == -1)
                            {
                                ds_list_add(other.solidList, c);
                            }
                        }
                    }
                }
            }
        }
        
        // find where the collision line first intersects each object's bbox, and use that to find the new xscale
        for (var j = 0; j &lt; ds_list_size(solidList); j++)
        {
            var obj = ds_list_find_value(solidList, j);
            
            // topsolid check
            var topSolid = false;
            if (object_is_ancestor(obj.object_index, prtEntity))
            {
                // top solid
                if (obj.isSolid == 2)
                {
                    topSolid = true;
                }
            }
            
            if (object_index == objTopSolid || object_is_ancestor(obj.object_index, objTopSolid))
            {
                topSolid = true;
            }
            
            // check x axis values of the bbox
            if (!topSolid)
            {
                cx = noone;
                cy = noone;
                
                if (x1 &lt; obj.bbox_left) // don't take the collision if it's from the line coming out of the bbox
                {
                    cx = obj.bbox_left;
                }
                
                if (x1 &gt; obj.bbox_right) // don't take the collision if it's from the line coming out of the bbox
                {
                    cx = obj.bbox_right;
                }
                
                if (cx != noone)
                {
                    // find the y position of the line at the given x position (bbox), and see if it's the shortest so far
                    b = y1 - horM * x1; // y - mx = b
                    cy = horM * cx + b; // y = mx + b
                    
                    // if the collision point is within the range of the side, then it's valid
                    if (cy &gt; obj.bbox_top &amp;&amp; cy &lt; obj.bbox_bottom)
                    {
                        if (collision_point(cx + cos(degtorad(image_angle)), cy - sin(degtorad(image_angle)), obj, true, false) != noone)
                        {
                            // if we collide a pixel into the bbox, then it's non-precise collision
                            newDist = point_distance(x1, y1, cx, cy);
                            if (newDist / sprite_get_width(sprite_index) &lt; image_xscale)
                            {
                                image_xscale = newDist / sprite_get_width(sprite_index);
                            }
                        }
                        else
                        {
                            // if not, it's precise collision checking (resource intensive)
                            // check every point from the bbox contact until we run out of collision line, or hit something
                            var foundCollision = false;
                            if (x1 &lt; x2)
                            {
                                // laser is going right
                                for (cx = cx; cx &lt; x2; cx++)
                                {
                                    if (collision_point(cx, cy, obj, true, false) != noone)
                                    {
                                        foundCollision = true;
                                        break;
                                    }
                                    
                                    cy += horM;
                                }
                            }
                            else
                            {
                                // laser is going left
                                for (cx = cx; cx &gt; x2; cx--)
                                {
                                    if (collision_point(cx, cy, obj, true, false) != noone)
                                    {
                                        foundCollision = true;
                                        break;
                                    }
                                    
                                    cy -= horM;
                                }
                            }
                            
                            if (foundCollision)
                            {
                                newDist = point_distance(x1, y1, cx, cy);
                                if (newDist / sprite_get_width(sprite_index) &lt; image_xscale)
                                {
                                    image_xscale = newDist / sprite_get_width(sprite_index);
                                }
                            }
                        }
                        
                        continue; // check next in the list
                    }
                }
            }
            
            // check y axis values of the bbox
            if (y1 &lt; obj.bbox_top) // don't take the collision if it's from the line coming out of the bbox
            {
                cy = obj.bbox_top;
            }
            
            if (y1 &gt; obj.bbox_bottom &amp;&amp; !topSolid) // don't take the collision if it's from the line coming out of the bbox
            {
                cy = obj.bbox_bottom;
            }
            
            if (cy != noone)
            {
                // find the x position of the line at the given x position (bbox), and see if it's the shortest so far
                verM = (x2 - x1) / (y2 - y1); // slope of the line
                b = x1 - verM * y1; // x - my = b
                cx = verM * cy + b; // x = my + b
                
                // if the collision point is within the range of the side, then it's valid
                if (cx &gt; obj.bbox_left &amp;&amp; cx &lt; obj.bbox_right)
                {
                    if (collision_point(cx + cos(degtorad(image_angle)), cy - sin(degtorad(image_angle)), obj, true, false) != noone)
                    {
                        // if we collide a pixel into the bbox, then it's non-precise collision
                        newDist = point_distance(x1, y1, cx, cy);
                        if (newDist / sprite_get_width(sprite_index) &lt; image_xscale)
                        {
                            image_xscale = newDist / sprite_get_width(sprite_index);
                        }
                    }
                    else
                    {
                        // if not, it's precise collision checking (resource intensive)
                        // check every point from the bbox contact until we run out of collision line, or hit something
                        foundCollision = false;
                        if (y1 &lt; y2)
                        {
                            // laser is going right
                            for (cy = cy; cy &lt; y2; cy++)
                            {
                                if (collision_point(cx, cy, obj, true, false) != noone)
                                {
                                    foundCollision = true;
                                    break;
                                }
                                
                                cx += verM;
                            }
                        }
                        else
                        {
                            // laser is going left
                            for (cy = cy; cy &gt; y2; cy--)
                            {
                                if (collision_point(cx, cy, obj, true, false) != noone)
                                {
                                    foundCollision = true;
                                    break;
                                }
                                
                                cx -= verM;
                            }
                        }
                        
                        if (foundCollision)
                        {
                            // show_debug_message("found precise collision");
                            newDist = point_distance(x1, y1, cx, cy);
                            if (newDist / sprite_get_width(sprite_index) &lt; image_xscale)
                            {
                                image_xscale = newDist / sprite_get_width(sprite_index);
                            }
                        }
                    }
                    
                    continue; // check next in the list
                }
            }
        }
        
        ds_list_clear(solidList);
    }
    
    if (image_xscale &lt; 0)
    {
        image_xscale = 0;
    }
    
    // if stuck on the same solid offscreen in the same position than disable the step code to cut down on processing
    if (image_xscale == lastXScale &amp;&amp; (bbox_right &lt; view_xview[0] || bbox_left &gt; view_xview[0] + view_wview[0] || bbox_bottom &lt; view_yview[0] || bbox_top &gt; view_yview[0] + view_hview[0]))
    {
        pauseStep = true;
    }
    
    lastXScale = image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_ATTACK (Health draining)

event_inherited();

if (variation == 1)
{
    with (other)
    {
        if (object_index == objMegaman)
        {
            healthpoints = global.playerHealth[playerID];
            global.playerHealth[playerID] -= 1;
        }
        
        healthpoints -= 1;
        if (healthpoints &lt;= 0)
        {
            event_user(EV_DEATH);
        }
        else
        {
            iFrames = other.drainCooldown;
            playSFX(sfxHit);
        }
    }
    
    global.damage = 0; // Overriding normal damage collision so there's no knockback
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(solidList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// don't draw if not on screen to cut down on processing
if (bbox_right &gt;= view_xview[0] &amp;&amp; bbox_left &lt;= view_xview[0] + view_wview[0] &amp;&amp; bbox_bottom &gt;= view_yview[0] &amp;&amp; bbox_top &lt;= view_yview[0] + view_hview[0])
{
    if (myPixel &gt;= 0 || sprite_get_width(sprite_index) &gt; 1)
    {
        var size = image_xscale * sprite_get_width(sprite_index);
        var img = size;
        var bit = 0;
        
        while (img &gt; 0)
        {
            bit = min(sprite_get_width(sprite_index), img);
            
            if (myPixel == -1)
            {
                // entire laser
                draw_sprite_general(sprite_index, image_index, 0, 0, bit, sprite_height, x + (size - img) * cos(degtorad(image_angle)), y - (size - img) * sin(degtorad(image_angle)), 1, 1, image_angle, c_white, c_white, c_white, c_white, image_alpha);
            }
            else
            {
                // pixel high laser, as a result from having pixelPrecision turned on
                draw_sprite_general(sprite_index, image_index, 0, myPixel, bit, 1, x + (size - img) * cos(degtorad(image_angle)), y - (size - img) * sin(degtorad(image_angle)), 1, 1, image_angle, c_white, c_white, c_white, c_white, image_alpha);
            }
            
            img -= bit;
        }
    }
    else
    {
        // since a 1 wide laser sliver looks the same stretched, we can do this. Way less resource intensive
        draw_self();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
