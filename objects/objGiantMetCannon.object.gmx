<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGiantMetCannonPreview</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>prtMiniBoss</parentName>
  <maskName>mskGiantMetCannon</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// A Giant Met manning a giant cannon (egads, you don't say?!). It can fire either a large
// shot, or a homing missile from the back.

event_inherited();
respawn = true;
doesIntro = false;
healthpointsStart = 16;
healthpoints = healthpointsStart;
contactDamage = 0;
blockCollision = 0;
grav = 0;
isSolid = true;

category = "mets, bulky, cannon";

// Enemy specific code, not for editing unless you know what you're doing
image_speed = 0;
image_index = 0;
curYOffset = -24;
yOffsetMax = -24;
cFrame = 0;
phase = 1;
oldPhase = 1;
attackTimer = 0;
delayTimer = 0;
child[0] = noone;
shotsFired = 0;


//creation code

// @cc - Determines if it can shoot homing missiles AND cannon shots.
randomMissiles = false;

// @cc yspeed - how fast metcannon moves up and down
spd = 0.25;

// @cc - Use this to make it fire ONLY cannon shots (0) or homing missiles (1)
// THIS WILL NOT WORK IF randomMissiles IS SET TO TRUE
shotType = 0;

//@cc define sprites
mySprite[0] = sprGiantMetCannonTop; //top
mySprite[1] = sprGiantMetCannonMiddle; //middle
mySprite[2] = sprGiantMetCannonBottom; //bottom

//setup colission mask
// to stop the met cannon from crushing a player underneath them, we change its mask
//@cc define masks
myMask[0] = mskGiantMetCannon; //largest
myMask[1] = mskGiantMetCannon2; //medium
myMask[2] = mskGiantMetCannon3; //smallest

//comparsion values, despite being creation code, don't change these unless you're sure what you're doing.
maskOffset[0] = -20;
maskOffset[1] = -16;
maskOffset[2] = -8;

// @cc animation offsets
spriteOffset = 8;
bottomPart = y + 48;
attackTimerMax = 246; //how long before firing
delayTimerMax = 32; //how long giant met cannon waits


//setup projectiles
/*giant met cannon can use up to two shot patterns.:
by default the primary cannon fires a bouncing orb, the secondary attack is a homing 'missile'
to setup something else, edit these values below as needed*/

//@cc primary cannon object setup
shotObject[0] = objGiantMetCannonShot; //create this projectile for a primary shot. can be an array of objects.
//the following variables must have arrays defined for every entry in the shotObject array otherwise the game will crash.
shotXOffset[0] = 36; //how many pixels from center x the 'orb' is created from
shotYOffset[0] = -3; //how many pixels from center y the 'orb' is created from
killShots = true; //if false, then do not destroy 'primary shots' on death

//the following variables do not neeed a entry for every instance in the shotObject array.
shotSFX[0] = noone; //if set, what sound is played when firing. set to noone to play no sound
shotSprite[0] = sprGiantMetCannonProjectile; //if defined, set the projectiles' sprite to this. set to noone for object default
shotXSpeed[0] = noone; //xspeed of created projectile. giant met cannon does not normally set shot speed, so only set this if not using objGiantMetCannonShot
shotYSpeed[9] = noone; //see above, but for yspeed
shotSmoke[0] = noone; //if defined, create a 'smoke object' when firing 'primary, for example, setting to objExplosion will create a explosion graphic;


//@cc missile object setup - secondary shot type
childObject[0] = objGunnerJoeMissile; //what projectile is fired as a 'secondary shot'; the object's AI is designed for these to be destructable. can be an array of objects.
childSprite[0] = sprGiantMetCannonMissile; //the sprite of the 'secondary shot'

//due to default missile's complexity, you will want to set xspeed and yspeed in the 'secondary shot' object itself.
missileXOffset = -27; //how many pixels from center x the 'secondary shot' is created from
missileYOffset = -20; //how many pixels from center y the 'secondary shot' is created from
childSFX = sfxMissileLaunch; //what sound is played when launched. set to noone to play no sound
childSmoke = noone; //if defined, create a 'smoke object' when firing 'secondary shot', for example, setting to objExplosion will create a explosion graphic;
killChildren = true; //if false, then do not destroy 'secondary shots' on death

missilesToFire = 2; //how many of the above to be in play
//for each 'secondary shot' fired, if using objGunnerJoeMissile, then set a angle. otherwise this can be ignored
missileAngle[0] = 45;
missileAngle[1] = 0;
//if using objGunnerJoeMissile, this array MUST have entries equal to missilesToFire, otherwise the game will crash

alarm[0] = 2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make sure child variable are set
for (var i = 0; i &lt;= missilesToFire; i++)
{
    child[i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    attackTimer++;
    
    // to stop the met cannon from crushing a player underneath them, we change its mask
    if (curYOffset == maskOffset[0])
        mask_index = myMask[0];
    else if (curYOffset == maskOffset[1])
        mask_index = myMask[1];
    else if (curYOffset == maskOffset[2])
        mask_index = myMask[2];

    
    switch (phase)
    {
        case 0: // move up 
            if (curYOffset &gt; yOffsetMax)
            {
                yspeed = 0;
                curYOffset -= spd;
                yspeed = -spd;
            }
            if (curYOffset == yOffsetMax)
            {
                yspeed = 0;
                curYOffset = yOffsetMax;
                phase = 1;
            }
            break;
        case 1:
        case 3: // delay movement 
            delayTimer++;
            if (delayTimer == delayTimerMax)
            {
                delayTimer = 0;
                phase++;
            }
            break;
        case 2: // move down 
            if (curYOffset &lt; 0)
            {
                curYOffset += spd;
                yspeed = spd;
            }
            if (curYOffset == 0)
            {
                yspeed = 0;
                curYOffset = 0;
                phase = 3;
            }
            break;
        case 4:
            phase = 0;
            break;
        case 5: // fire projectile 
            {
                if (shotType == 0) //Fire Cannonball
                {
                    switch (attackTimer)
                    {
                        case 1: // animation setup 
                            cFrame = 1;
                            break;
                        case 32:
                            cFrame = 3;
                            var sf = shotsFired;
                            with (instance_create(x + 36 * image_xscale, y - 3, shotObject[sf]))
                            {
                                image_xscale = other.image_xscale;
                                image_yscale = other.image_yscale;
                                if (other.shotSprite[sf] != noone)
                                    sprite_index = other.shotSprite[sf];
                                if (other.shotXSpeed[sf mod array_length_1d(other.shotXSpeed)] != noone)
                                    xspeed = other.shotXSpeed[sf mod array_length_1d(other.shotXSpeed)] * image_xscale;
                                if (other.shotYSpeed[sf mod array_length_1d(other.shotYSpeed)] != noone)
                                    yspeed = other.shotYSpeed[sf mod array_length_1d(other.shotYSpeed)] * image_yscale;
                                
                            }
                            
                            if (shotSFX[sf] != noone)
                                playSFX(shotSFX[sf]);
                            break;
                        case 38:
                            cFrame = 2;
                            break;
                        case 48:
                            cFrame = 0;
                            break;
                        case 64: // finish firing and return to previous phase. 
                            attackTimer = 0;
                            phase = oldPhase;
                            break;
                    }
                }
                else //Fire Missiles
                {
                    switch (attackTimer)
                    {
                        case 1: // animation setup 
                            cFrame = 1;
                            break;
                        case 32:
                            cFrame = 0;
                            for (var i = 0; i &lt; missilesToFire; i ++)
                            {
                                if (!instance_exists(child[i]))
                                {
                                    var CO = i mod array_length_1d(childObject);
                                    var CS = i mod array_length_1d(childSprite);
                                    var MS = i mod array_length_1d(missileAngle);
                                    with (instance_create(x + (missileXOffset * image_xscale), y + missileYOffset, childObject[CO]))
                                    {
                                        other.child[i] = id;
                                        parent = other.id;
                                        despawnRange = -1;
                                        if (other.childObject[CO] == objGunnerJoeMissile) //special code for its original missile.
                                        {
                                            if (image_index == -1)
                                            {
                                                
                                                direction = wrapAngle(180 - other.missileAngle[MS]);
                                                event_user(2);
                                            }
                                            else
                                            {
                                                
                                                direction = wrapAngle(other.missileAngle[MS]);
                                                event_user(2);
                                            }
                                        }
                                        else //if object is changed, just change xscale
                                        {
                                            image_xscale = other.image_xscale;
                                            image_yscale = other.image_yscale;
                                        }
                                        sprite_index = other.childSprite[CS];
                                        if (other.childSFX != noone)
                                            playSFX(other.childSFX);
                                    }
                                }

                            }
                            /*
                            if (!instance_exists(child[i]))
                            {
                                with (instance_create(x - 27 * image_xscale, y - 20, objGunnerJoeMissile))
                                {
                                    other.child[i] = id;
                                    parent = other.id;
                                    despawnRange = -1;
                                    if (image_index == -1)
                                    {
                                        image_index = 0;
                                        direction = 180;
                                    }
                                    else
                                    {
                                        image_index = 4;
                                        direction = 0;
                                    }
                                    if (instance_exists(target))
                                    {
                                        direction = point_direction(x, y, target.x, target.y);
                                    }
                                    playSFX(sfxMissileLaunch);
                                }
                            }*/
                            i = 0;
                            break;
                        case 38: // finish firing and return to previous phase. 
                            attackTimer = 0;
                            phase = oldPhase;
                            break;
                    }
                }
            }
    }
    
    if (attackTimer == attackTimerMax) // start fire projectile phase
    {
        yspeed = 0;
        attackTimer = 0;
        oldPhase = phase;
        phase = 5;
        if (randomMissiles)
        {
            shotType = choose(0,1);
        }
    }
}
else if (!insideView())
{
    image_index = 0;
    y = ystart;
    x = xstart;
    attackTimer = 0;
    delayTimer = 0;
    phase = 1;
    curYOffset = -24;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(bboxGetYCenterObject(other.id) &lt; y - 20) || cFrame == 1 || cFrame == 3) //24
{
    other.guardCancel = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
for (var i = 0; i &lt; array_length_1d(childObject); i++)
{
    with (childObject[i])
    {
        instance_create(bboxGetXCenter(),bboxGetYCenter(),objExplosion);
        instance_destroy();
    }
}
for (var i = 0; i &lt; array_length_1d(shotObject); i++)
{
    with (objGiantMetCannonShot)
    {
        instance_create(bboxGetXCenter(),bboxGetYCenter(),objExplosion);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
for (var i = 0; i &lt; ceil(abs(curYOffset) / 8); i++)
{
    draw_sprite_ext(mySprite[1], i, round(x)-1*image_xscale, round(y) + spriteOffset + (i * 8), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}
draw_sprite_ext(mySprite[2], 0, round(x)-2*image_xscale, bottomPart, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
draw_sprite_ext(mySprite[0], cFrame, round(x), round(y) + spriteOffset, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// handles stuff differently than the Puny Regular Enemies....
if (introTimer &gt; 0 &amp;&amp; doesIntro)
{
    draw_sprite_ext(introSprite, 2 - (min(2, min(introTimer, 15) / 5)), x,
        y - max(introTimer - 10, 0) * image_yscale, image_xscale, image_yscale, 0, c_white, 1);
}
else
{
    drawUser(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
