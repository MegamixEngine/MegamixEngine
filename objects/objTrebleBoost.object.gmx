<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRush</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canCoil = true;
teleportTimer = 0;
teleportY = 0;
teleportingUp = false;
yspeed = 0;
xspeed = 0;
inWater = 0;

canHit = false;
canDamage = false;
contactDamage = 0;

shouldLand = true;

alarm[0] = 4 * 60;

canDeflect = false;

isBoosting = false;

travelIncrementX = .0625;
travelIncrementY = .0625;

xVel = 0;
yVel = 0;

TB_MAXSPEED = 1.5;


frameSet[0] = 0;
frameSet[1] = 1;
frameSet[2] = 0;
frameSet[3] = 1;
frameSet[4] = 0;
frameSet[5] = 1;
frameSet[6] = 0;
frameSet[7] = 2;
frameSet[8] = 2;
frameSet[9] = 2;
frameSet[10] = 2;
frameSet[11] = 2;
frameSet[12] = 2;
frameSet[13] = 2;
frameSet[14] = 0;
frameSet[15] = 1;
frameSet[16] = 0;
frameSet[17] = 1;
frameSet[18] = 0;
frameSet[19] = 1;
frameSet[20] = 0;
frameSet[21] = 1;
frameSet[22] = 0;
frameSet[23] = 1;
frameSet[24] = 0;
frameSet[25] = 2;
frameSet[26] = 2;
frameSet[27] = 2;
frameSet[28] = 2;
frameSet[29] = 2;
frameSet[30] = 2;
frameSet[31] = 2;

imgIndex = 0;

hoverFrame = 0;
hoverInterval[0] = -.5;
hoverInterval[1] = -.5;
hoverInterval[2] = -.5;
hoverInterval[3] = -.5;
hoverInterval[4] = -.5;
hoverInterval[5] = -.5;
hoverInterval[6] = 0;
hoverInterval[7] = 0;
hoverInterval[8] = 0;
hoverInterval[9] = 0;
hoverInterval[10] = .5;
hoverInterval[11] = .5;
hoverInterval[12] = .5;
hoverInterval[13] = .5;
hoverInterval[14] = .5;
hoverInterval[15] = .5;
consumeFrame = 0;
consumeTime = 16; //* ((0.5 * (global.energySaver &gt; 0)) + 1);

playerLock = -1;//lockPoolNew();

grav = .25;

blockCollision = true;

animTimer = 0;

col[1] = -1;
col[2] = -1;
col[3] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isBoosting)
{
    //lockPoolRelease(playerLock);//lock = lockPoolLock(PL_LOCK_GROUND)
    //lock.targetInstance = target;
    with (objMegaman)
    {
        other.playerLock = lockPoolRelease(other.playerLock);//canMove = true;
        //canGravity = true;
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Teleport away
with (parent)
{
    global.playerProjectileCreator = id;
}
i = instance_create(x, y, objRushTeleport);
i.upordown = 'up';
i.parent = parent;
i.image_xscale = image_xscale;
i.image_yscale = image_yscale;
i.type = 'boost';
//i.col = col;

canCoil = false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// Update sprites of rider if they're on it
if (isBoosting)
{
    with (parent)
    {
        playerHandleSprites("Boost");
//        vehicle = other.id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    
    if (sprite_index == sprRush || sprite_index == sprRushCoil)
    {
        //checkGround();//checkGroundGravity();
        //gravityCheckGroundExt(grav * image_yscale);
        //generalCollision();
    }
    else
    {
        yspeed = 0;
    }
    
    if (!isBoosting)
    {
        var meg = noone;
        if (image_yscale == 1)
        {
            meg = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top,
                    parent, false, false);
        }
        else
        {
            meg = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom,
                    parent, false, false);
        }
        
        if (instance_exists(meg) &amp;&amp; ammoCanAfford(playerID))
        {
            /*if (meg.yspeed &gt; 0 &amp;&amp; meg.bbox_bottom &lt;= bbox_top + meg.yspeed
                    &amp;&amp; !meg.climbing)*/
            {
                event_user(1);
            }
        }
        /*if (global.rareWeapons[9] || global.rareWeapons[10])
        {
            if (global.gameTimer % 3 == 0)
            {
                with (instance_create(bboxGetXCenter(), bboxGetYCenter(), objSlideDust))
                {
                    sprite_index = sprShine; image_xscale = choose(1, -1); direction = irandom(360);
                    rotationMovement(xstart, ystart, irandom_range(1, 16), 0);
                }
            }
            
            if (global.gameTimer % 5 == 0 &amp;&amp; instance_exists(objMegaman))
            {
                with (instance_create(x, y - 4*abs(image_yscale), objTrailEffect))
                {
                    drawingPlayer = true;
                    parent = instance_nearest(x, y, objMegaman);
                    spriteX = 9;
                    spriteY = 12;
                    image_xscale = other.image_xscale; image_yscale = other.image_yscale;
                }
            }
        }*/
    }
    else if (alarm[1] &lt; 0)
    {
        if (global.keyLeft[playerID])
        {
                if (xVel &gt; 0)
                {
                    xVel = 0;
                }
                else
                {
                    xVel -= travelIncrementX;
                }
        }
        else if (global.keyRight[playerID])
        {
            if (xVel &lt; 0)
            {
                xVel = 0;
            }
            else
            {
                xVel += travelIncrementX;
            }
        }
        else
        {
                xVel += sign(xVel)*-travelIncrementX;
        }
        if (global.keyUp[playerID])
        {
            if (yVel &gt; 0)
            {
                yVel = 0;
            }
            else
            {
                yVel -= travelIncrementY*2;
                hoverFrame = 9;
            }
        }
        else if (global.keyDown[playerID])
        {
            if (yVel &lt; 0)
            {
                yVel = 0;
            }
            else
            {
                yVel += travelIncrementY*2;
                hoverFrame = -1;
            }
        }
        else
        {
                yVel += sign(yVel)*-travelIncrementY;
        }
        if (xVel &gt; 0)
        {
            xVel = min(xVel,TB_MAXSPEED);
        }
        else if (xVel &lt; 0)
        {
            xVel = max(xVel,-TB_MAXSPEED);
        }
        if (yVel &gt; 0)
        {
            yVel = min(yVel,TB_MAXSPEED);
        }
        else if (yVel &lt; 0)
        {
            yVel = max(yVel,-TB_MAXSPEED);
        }
        
        with (parent)
        {
//            shiftObject(0,other.yVel,true,id,0);
            //playLandSound = false;
            
            
            
            
            //grav = 0;
            /*if (ground)
            {
                other.hoverFrame = 0;
            }*/
            
            var vs = other.yVel;
            
            var escapeVelocity = 1;
            /*if (checkSolid(0,other.hoverInterval[floor(other.hoverFrame)]+1,false,true))
            {
                if (other.hoverFrame &gt;= 10)
                {
                    printErr("SOL");
                    escapeVelocity = 0;
                }
                else if (other.hoverFrame &lt; 6)
                {
                    printErr("DOL");
                    //vs = 0;
                    escapeVelocity = 4;//shiftObject(0,-1,true);//other.hoverFrame = 0;
                    other.hoverFrame = 5;
                }
                //yVel = 0;
                //yspeed = 0;
            }*/
            /*if (ground)
            {
                vs = min(floor(other.TB_MAXSPEED),vs);
            }*/
            if (ground)
            {
                if (vs &gt; 0 &amp;&amp; gravDir == 1) || (vs &lt; 0 &amp;&amp; gravDir == -1)
                {
                    other.hoverFrame = -1;
                    vs = 0;
                    other.yVel = 0;
                }
                else
                {
                    other.hoverFrame = 0;
                }
            }
            xspeed = other.xVel;
            var hs = 0
            if (other.hoverFrame &gt;= 0)
            {
                hs = other.hoverInterval[floor(other.hoverFrame)];
            }
            yspeed = vs+hs;
            var ySave = yspeed;
            gravityEffect();
            var yDiff = yspeed-ySave;
            yspeed = ySave-yDiff;
            /*if (!playerIsLocked(PL_LOCK_GRAVITY))
            {
            
                if (inWater)
                {
                    yspeed -= grav*waterAccelMod;
                }
                else
                {
                    yspeed -= grav;
                }
            }*/
            //printErr(vs);
            /*if (yspeed == 0)
            {
                shiftObject(0,other.hoverInterval[floor(other.hoverFrame)]*escapeVelocity,true);
            }
            printErr(other.hoverInterval[floor(other.hoverFrame)]*escapeVelocity);
            */
            if (sign(other.xVel) != 0 &amp;&amp; sign(other.xVel) != sign(image_xscale))
            {
                image_xscale *= -1;
            }
            //checkGround();
            /*if (global.rareWeapons[9] || global.rareWeapons[10])
            {
                if (global.gameTimer % 3 == 0)
                {
                    with (instance_create(bboxGetXCenter(), bboxGetYCenter(), objSlideDust))
                    {
                        sprite_index = sprShine; image_xscale = choose(1, -1); direction = irandom(360);
                        rotationMovement(xstart, ystart, irandom_range(1, 16), 0);
                    }
                }
                
                if (global.gameTimer % 5 == 0 &amp;&amp; instance_exists(objMegaman))
                {
                    with (instance_create(x, y - 4*abs(image_yscale), objTrailEffect))
                    {
                        drawingPlayer = true;
                        parent = instance_nearest(x, y, objMegaman);
                        spriteX = 9;
                        spriteY = 12;
                        image_xscale = other.image_xscale; image_yscale = other.image_yscale;
                    }
                }
            }*/
            
        }
        
        
        consumeFrame = (consumeFrame+1)%(consumeTime+1);
        //printErr(consumeFrame);
        //printErr(consumeFrame);
        if (/*consumeFrame == consumeTime*/true &amp;&amp; instance_exists(parent) &amp;&amp; global.playerHealth[parent.playerID] &gt; 0 &amp;&amp; (!checkCheats(cheatEnums.infiniteWeapons)))
        {
            
            var wep = global.weapon[playerID];
            
            if (checkCheats(cheatEnums.lingeringWeapons))
            {
                wep = global.weaponID[? objTrebleBoost];
            }
            
            var factor = 1;
            if (global.energySaver)
            {
                factor = 3/4;
            }
            //factor *= .5;
            var tmp = global.weapon[playerID];
            global.weapon[playerID] = wep;
            ammoDecrease(playerID, (28/(15*60))*factor);
            
            global.weapon[playerID] = tmp;

            if (!ammoCanAfford(playerID))
            {
                if (instance_exists(parent))
                {
                    x = parent.x;
                    y = parent.y;
                    event_perform(ev_alarm,0);//alarm[0] = 0;
                    event_perform(ev_destroy,0);
                }
                
                isBoosting = false;
            }
        }
        if (yVel == 0)
        {
            hoverFrame = (hoverFrame+.5)%16;
        }
        if (instance_exists(objDialogueBox))
        {
            if (instance_exists(parent))
            {
                x = parent.x;
                y = parent.y;
                event_perform(ev_alarm,0);//alarm[0] = 0;
                event_perform(ev_destroy,0);
                parent.xspeed = 0;
            }
        }
        
    }
    else
    {
        with (parent)
        {
            xspeed = 0;
            yspeed = 0;
            //shiftObject(0,other.hoverInterval[floor(other.hoverFrame)],true,id,0);
            
        }
        //hoverFrame = (hoverFrame+.5)%15;
        
    }
    
    
    /*if (!ground &amp;&amp; !isBoosting)
    {
        //printErr("TRIGGER");
        event_perform(ev_alarm, 0);
        exit;
    }*/
    y += yspeed;
    imgIndex = (imgIndex+.333) % 32;
    if (instance_exists(parent))
    {
        var pow = .25;
        if (alarm[1] &lt; 0)
        {
            animTimer = (animTimer+pow)%2;
        }
        else
        {
            animTimer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead &amp;&amp; !isBoosting)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (performShoot)//global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    var canSpawn = true;
    if (instance_exists(objRushCoil) || instance_exists(objRushJet) || 
    instance_exists(objTrebleBoost) || instance_exists(objRushTeleport)) // check if rush exists 
    {
        with (prtPlayerProjectile)
        {
            if (playerID == other.playerID)
                canSpawn = false;
        }
    }
    
    if (canSpawn &amp;&amp; ammoCanAfford(playerID))
    {
        i = fireWeapon(26, 0, objRushTeleport, 4, 0, 0, 0);
        if (i)
        {
            i.type = 'boost';
            i.y = view_yview + (view_hview * (image_yscale == -1));
        }
    }
    else
    {
        if (instance_exists(myTrebleBoost))
        {
            var directions = makeArray(0,45,-45,45*.5,-45*.5);
            var tempPlayer = global.costumeSelected[playerID];
            global.costumeSelected[playerID] = "Bass";
            
            var myCount = 0;
            if (!checkCheats(cheatEnums.noBulletLimits))
            {
                with (objBusterShot)//Check only this player's bullets.
                {
                    if (parent == other.id)
                    {
                        
                        myCount++;
                    }
                }
                with (objBusterShotCharged)//Also check this for the revenge burst variant.
                {
                    if (parent == other.id)
                    {
                        
                        myCount++;
                    }
                }
            
            }
            var yOff = 0;
            if (myCount == 0)
            {
                var obj = objBusterShot;
                var dirNerf = 1;
                var cost = 0;
                var total = 3;
                var spd = 5;
                if (releaseCharge &amp;&amp; chargeTimer &gt;= chargeTime &amp;&amp; global.revengeBurst)
                {
                    obj = objBusterShotCharged;
                    dirNerf = .75;
                    cost = 8;
                    if (global.energySaver)
                    {
                        cost *= .75;
                    }
                    total = 3;
                    spd = 5.5;
                    for (var a = 0; a &lt; 5; a++)
                    {
                        with (instance_create(x+(20+irandom_range(0,4))*image_xscale, y+yOff*image_yscale+irandom_range(-2,2),objSlideDust))
                        {
                            image_xscale = -other.image_xscale;
                            image_yscale = choose(-1,1);
                            
                            //hspeed = other.xspeed*.5;
                            //vspeed = other.yspeed*.5;
                            useShader = true;
                            replaceColor[0] = $FFFBFF;
                            replaceColor[1] = $FFE3AD;
                            
                            newColor[0] = global.nesPalette[$2B];
                            newColor[1] = global.nesPalette[$1A];
                            
                            
                        }
                    }
                }
                
                
                for (var a = 0; a &lt; total; a++)
                {
                    
                    i = fireWeapon(20, yOff, obj, 100, cost, 1, 0);
                    cost = 0;//Only count cost on first bullet.
                    if (i)
                    {
                        i.isBoost = true;
                        i.penetrate = 1;
                        i.contactDamage = 1 + 2*(obj==objBusterShotCharged);
                        if (obj!=objBusterShotCharged)
                        {
                            i.sprite_index = sprBassBullet;
                        }
                        i.dir = directions[a]*dirNerf;
                            
                            
                            
                        if (image_xscale &lt; 0)
                        {
                            i.dir += 180;
                        }
                        with (i)
                        {
                            xspeed = cos(degtorad(dir)) * spd;
                            yspeed = -sin(degtorad(dir)) * spd * sign(image_yscale);//Run this once to set the x and y speed.
                        }
                        autoFireDelay = i.autoFireSet;
                    }
                }
            
            
                /*i = fireWeapon(20, 0, objBusterShot, 100, 0, 1, 0);
                if (i)
                {
                    i.xspeed = image_xscale * 5;
                    i.sprite_index = sprEnemyBullet;
                    i = fireWeapon(20, 0, objBusterShot, 100, 0, 1, 0);
                    if (i)//Need inside so we can bypass bullet limit restrictions.
                    {
                        i.dir = degtorad(45);//i.xspeed = image_xscale * 3;
                        //i.yspeed = image_yscale * 3;
                        i.sprite_index = sprEnemyBullet;
                        if (image_xscale &lt; 0)
                        {
                            i.dir += 180;
                        }
                    }
                    
                    i = fireWeapon(20, 0, objBusterShot, 100, 0, 1, 0);
                    if (i)
                    {
                        i.dir = degtorad(-45)//i.xspeed = image_xscale * 3;
                        //i.yspeed = image_yscale * -3;
                        i.sprite_index = sprEnemyBullet;
                        if (image_xscale &lt; 0)
                        {
                            i.dir += 180;
                        }
                    }
                    
                    //global.shotCount++;
                }*/
            }
            global.costumeSelected[playerID] = tempPlayer;//And swap back.
        }
        else
        {
            var discountAssist = 1;//Used to guarantee the actual 'shot' limit as 3 instead of 2 (NES-style) or 3 with assist onscreen and 4 with it offscreen (out of ammo).
            if (instance_exists(objRushTeleport) || instance_exists(objRushCoil) || instance_exists(objRushJet) || instance_exists(objTrebleBoost))
            {
                discountAssist = 0;
            }
            
            i = fireWeapon(16, 0, objNormalBusterShot, 4-discountAssist, 0, 1, 0);
            if (i)
            {
                i.xspeed = image_xscale * 5;
                autoFireDelay = i.autoFireSet;
                //global.shotCount++;
            }
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("TREBLE BOOST", -7, -7, sprWeaponIconsTrebleBoost);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0;
///Setting up treble boost (need outside for calling from teleport)
//meg.yspeed = -7.5;
visible = false;//sprite_index = sprRushCoil;
canCoil = false;
isBoosting = true;
despawnRange = -1;
respawnRange = -1;
with (parent)
{
    jumpCount = 2;
    canMinJump = false;
    myTrebleBoost = other.id;

    
    if (isSlide)
    {
        isSlide = false;
        slideLock = lockPoolRelease(slideLock);
        slideChargeLock = lockPoolRelease(slideChargeLock);
        slideTimer = 0;
        //print("SlideRelease",WL_SHOW,c_white,true);
    }
    dashJumped = false;
    ground = false;
    airDashed = false;
    /*if (isShoot)
    {
        lockPoolRelease(shootLock);
    }*/
    //lockPoolRelease(movementLock);
    
    other.playerLock = lockPoolLock(localPlayerLock[PL_LOCK_MOVE]/*,localPlayerLock[PL_LOCK_GRAVITY]*/,localPlayerLock[PL_LOCK_AERIAL], localPlayerLock[PL_LOCK_SLIDE], localPlayerLock[PL_LOCK_CLIMB]);
}
alarm[0] = -1;
alarm[1] = 12;
xspeed = 0;
yspeed = 0;
playSFX(sfxTrebleBoost);

shiftVisible = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var yDiff = 0;
if (sprite_index == sprRush)
{
    ximg = 15+frameSet[imgIndex];// + image_index;
    if (frameSet[imgIndex] == 2)
    {
        yDiff = 1;
    }
    
    drawPlayer(playerID, costumeID, ximg, 8+yDiff, x, y - 16 * image_yscale, image_xscale, image_yscale);//Only handles rush, and I already placed Treble in the missing spot so we good B)
    global.primaryCol[playerID] = global.primaryCol[playerID];
    global.secondaryCol[playerID] = global.secondaryCol[playerID];
}


/*SquareSize = 48;
spr = global.playerSprite[playerID];
col[0] = c_white;
col[1] = global.primaryCol[playerID];
col[2] = global.secondaryCol[playerID];
col[3] = global.outlineCol[playerID];

for (i = 0; i &lt; 4; i += 1)
{
    draw_sprite_part_ext(spr, i, 1 + (floor(ximg) * (SquareSize + 3)),
            1 + (floor(8) * (SquareSize + 3)), SquareSize, SquareSize,
            round(x) - (22 * image_xscale), round(y) - ((36) * image_yscale),
            image_xscale, image_yscale, col[i], image_alpha);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
